<?xml version="1.0" encoding="UTF-8"?>

<panel name="Hughes &amp; Kettner Remote - v1.0" panelShowDialogs="1"
       panelMessageTime="10000" panelAuthorName="Fred Borry" panelAuthorEmail="frederic.borry@gmail.com"
       panelAuthorUrl="http://ctrlr.org/hughes-kettner-remote" panelAuthorDesc="Hughes &amp; Kettner Desktop Remote"
       panelVersionMajor="1" panelVersionMinor="0" panelVersionName="H&amp;K"
       panelVendor="Hughes &amp; Kettner" panelDevice="GrandMeister 36 / GrandMeister Deluxe 40 / Black Spirit 200"
       panelMidiSnapshotAfterLoad="0" panelMidiSnapshotAfterProgramChange="0"
       panelMidiSnapshotDelay="10" panelMidiSnapshotShowProgress="0"
       panelMidiInputChannelDevice="1" panelMidiInputDevice="-- None"
       panelMidiControllerChannelDevice="1" panelMidiControllerDevice="-- None"
       panelMidiOutputChannelDevice="1" panelMidiOutputDevice="-- None"
       panelMidiInputFromHost="0" panelMidiInputChannelHost="1" panelMidiOutputToHost="0"
       panelMidiOutputChannelHost="1" panelMidiThruH2H="0" panelMidiThruH2HChannelize="0"
       panelMidiThruH2D="0" panelMidiThruH2DChannelize="0" panelMidiThruD2D="0"
       panelMidiThruD2DChannelize="0" panelMidiThruD2H="0" panelMidiThruD2HChannelize="0"
       panelMidiRealtimeIgnore="1" panelMidiInputThreadPriority="7"
       panelMidiProgram="No Program" panelMidiBankLsb="0" panelMidiBankMsb="0"
       panelMidiSendProgramChangeOnLoad="0" panelMidiProgramCalloutOnprogramChange="0"
       panelMidiMatchCacheSize="32" panelMidiGlobalDelay="0" panelMidiPauseOut="0"
       panelMidiPauseIn="0" panelOSCEnabled="0" panelOSCPort="-1" panelOSCProtocol="0"
       luaPanelMidiChannelChanged="-- None" luaPanelMidiReceived="onMidiMessage"
       luaPanelMidiMultiReceived="-- None" luaPanelLoaded="initPanel"
       luaPanelBeforeLoad="-- None" luaPanelSaved="-- None" luaPanelResourcesLoaded="-- None"
       luaPanelProgramChanged="-- None" luaPanelGlobalChanged="-- None"
       luaPanelMessageHandler="-- None" luaPanelModulatorValueChanged="-- None"
       luaPanelSaveState="saveData" luaPanelRestoreState="loadData"
       luaPanelMidiSnapshotPost="-- None" luaPanelMidiSnapshotPre="-- None"
       luaAudioProcessBlock="-- None" luaPanelOSCReceived="-- None"
       panelFilePath="D:\perso\dev\Hughes&amp;KettnerRemote\Hughes&amp;KettnerRemote.panel"
       panelUID="8.9hOSdulECpN" panelInstanceUID="IX4a" panelInstanceManufacturerID="2dRE"
       panelModulatorListColumns="&lt;TABLELAYOUT sortedCol=&quot;605&quot; sortForwards=&quot;0&quot;&gt;&lt;COLUMN id=&quot;604&quot; visible=&quot;1&quot; width=&quot;163&quot;/&gt;&lt;COLUMN id=&quot;1&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;COLUMN id=&quot;603&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;COLUMN id=&quot;605&quot; visible=&quot;1&quot; width=&quot;163&quot;/&gt;&lt;COLUMN id=&quot;119&quot; visible=&quot;1&quot; width=&quot;151&quot;/&gt;&lt;COLUMN id=&quot;123&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;COLUMN id=&quot;124&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;COLUMN id=&quot;131&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;COLUMN id=&quot;547&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;COLUMN id=&quot;544&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;COLUMN id=&quot;548&quot; visible=&quot;1&quot; width=&quot;163&quot;/&gt;&lt;COLUMN id=&quot;18&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;COLUMN id=&quot;19&quot; visible=&quot;1&quot; width=&quot;139&quot;/&gt;&lt;/TABLELAYOUT&gt;"
       panelModulatorListCsvDelimiter="," panelModulatorListXmlRoot="ctrlrModulatorList"
       panelModulatorListXmlModulator="ctrlrModulator" panelModulatorListSortOption="1"
       panelGlobalVariables="0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:-1:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0"
       panelResources="" panelPropertyDisplayIDs="0" ctrlrMenuItemBackgroundColour="ffffffff"
       ctrlrMenuItemTextColour="ff000000" ctrlrMenuItemHighlightedTextColour="ffffffff"
       ctrlrMenuItemHighlightColour="ff4364ff" ctrlrMenuItemFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3"
       ctrlrMenuItemSeparatorColour="44000000" ctrlrMenuItemHeaderColour="ff000000"
       ctrlrMenuBarBackgroundColour1="fff7f7f7" ctrlrMenuBarBackgroundColour2="ffcccccc"
       ctrlrMenuBarTextColour="ff000000" ctrlrMenuBarHighlightedTextColour="ffffffff"
       ctrlrMenuBarHighlightColour="ff4364ff" ctrlrMenuBarFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1;3"
       ctrlrUseEditorWrapper="0" panelMidiOutputChannel="1" panelMidiThru="0"
       panelExcludeFromInputMatch="2047" panelIndex="0" uiPanelToolbarState="TB:36 2 -1 8 5 7 6 29 27 -3 1"
       panelCtrlrRevision="934" uiPanelModulatorListViewTree="0" uiPanelEditMode="0"
       panelIsDirty="0">
  <uiWindowManager>
    <uiChildWindow uiChildWindowName="LayerEditor" uiChildWindowState="680 340 600 400"
                   uiChildWindowVisible="0">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LuaMethodEditor" uiChildWindowState="fs 0 0 800 500">
      <uiChildWindowContentState luaMethodEditor="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;OPEN id=&quot;LUA&quot; scrollPos=&quot;0&quot;&gt;&#13;&#10;  &lt;OPEN id=&quot;Built-In&quot;/&gt;&#13;&#10;&lt;/OPEN&gt;&#13;&#10;;fe0f6f8c52574676b326ed7f33c93f71:3d2b3d9d1e7f40159d61b00c4ce8d3a9:687de20c34cb487d9b0022df180389fd:854c2fc9cf1b46bfa42e4513a922e965:cd0af87fe8384851a9664a787f0d643d:e04f30d3baca4d7bb348789e86756c6d:d29d32b23fb44fcfb9769d8b3a4b85c1:37c70180db0244cfac9eb3c0e158e91a:a8e0d0f99b43491fbab2edbe7baea0c4:794ef45950a74f15bee0133aac2f3b67:050d70bf5be543578376eba5ec1fcf25:27d97b7306de483cbd617b1538b02417:7b52e2c96aa94a4da7d1508ebfe6d1af:2411f014f0174d7c823b5d09b1bcdde1:d0cdd4870ab3493ea905476ef095fef2:c290c4451b214e599b93fc2aaa92ff82:f0da3d230af946b7aadd9e34477843d8:3537fc533ede49729492e0c00bc4d423:effea62480b0443d8c2e9532e8864525:baa52baca75f4df8903e95882d042c74:86e85cf1bf0449b5935b6408ac7a32d4:972446e2525c41abaa3c317b37e6af82:935aec0ac3d84bc1b655117025d3d1b5:f97b9a79f96d438b9738382657074618:eba94a811f8547e78e7fd00f274c09ff:2ea78ad93e2a43998e345f23553e4c84:5ecd5fbf9bf640cd8935e33eb7f3d50d:84497fb98aaa430c9d2c7bc7ab07ee8c:8e3b6f1e7bc24a5e834250b6533cff40:55db5370854d4b34b517f665b4b31afd:53baad1ad37b498aaf91df0228c6bf1e:d0b3228b515b4f8781bacc58b6cee29e:05a6aa8d22544b539a231c5b974bbb33:aab4875e4c694c129acf9fd9c7e33418:8fef08f06ef04fcf82d22585bb6c96f2:bfa58fd43f93423a8a685f4c8c81ae7e:7261a10302e54a3b8958d5fa3eb27e06:b806ca88ed8148a0b03611a5a2ac4069:5b738219789840b4b036b838d83812c8:13d5a482d6034699a42c6483aee1d26e:4afea29b342746c99bb94426f2a0c2e5:3df36a93652c44edbc8eb015ac059db7:18562ca86b8d468e8e5179317cabcd98:6b89831ab661447f8be49a34c8d61272:c32d464f53924ba299fb79c6e7fb1d8f:9278f5a950fc4836bc6168d7c6b46f72:518cf1d6dd2b4e1c92209790ea63d959:f8c79de9afa44372b62f8d666c8fab2d:6931d01003bc4405a00928fe6b99f67c:6e9ec65778554a76b55dcf7e202c3f43:8f151ba442ce4535b690347d44021970:6fc0e26ffe2a4f0e9a3b373be212fd45:a01aa0bebd9c4dcdaa8f6355a8ddc60e:00000000000000000000000000000004:00000000000000000000000000000001:00000000000000000000000000000006"/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LuaConsole" uiChildWindowState="2101 262 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="ModulatorList" uiChildWindowState="fs 0 0 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="MIDILibrary" uiChildWindowState="560 270 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="BufferEditor" uiChildWindowState="560 270 800 500">
      <uiChildWindowContentState>
        <midiBufferEditorLeft midiBufferEditorSource="0" midiBufferEditorFilePath="" midiBufferEditorCodeEditor="0:0:0"/>
        <midiBufferEditorRight midiBufferEditorSource="0" midiBufferEditorFilePath="" midiBufferEditorCodeEditor="0:0:0"/>
      </uiChildWindowContentState>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="MIDISettings" uiChildWindowState="560 270 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
  </uiWindowManager>
  <luaManager>
    <luaManagerMethods>
      <luaMethodGroup name="Built-In" uuid="e21440d532f745a3889aff9d36aa1602">
        <luaMethod luaMethodName="table_dump" luaMethodCode="-- @1.1&#10;--&#10;-- Print table contents&#10;--&#10;function table_dump(table)&#10;&#9;for key,value in ipairs(table) do&#10;&#9;&#9;_DBG (&quot;KEY= [&quot;..key..&quot;]&quot;)&#10;&#10;&#9;&#9;if (type(value) == &quot;table&quot;) then&#10;&#9;&#9;&#9;table_dump(value)&#10;&#9;&#9;elseif (type(value) == &quot;nil&quot;) then&#10;&#9;&#9;&#9;_DBG (&quot; = NIL&quot;)&#10;&#9;&#9;else&#10;&#9;&#9;&#9;what (value)&#10;&#9;&#9;end&#10;&#9;end&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000001"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="what" luaMethodCode="-- @1.1&#10;--&#10;-- Print methods for an object&#10;--&#10;function what(o)&#10;&#9;info = class_info(o)&#10;&#9;if info ~= nil then&#10;&#9;&#9;ret = &quot;Object type [&quot; .. info.name .. &quot;]\n-----------------------------------------------------------------\n\n&quot;..&quot;Members:\n&quot;&#10;&#10;&#9;&#9;if info.name == &quot;table&quot; then&#10;&#9;&#9;&#9;table_dump(o)&#10;&#9;&#9;end&#10;&#10;&#9;&#9;for k, v in pairs(info.methods) do&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#10;&#9;&#9;end&#10;&#9;&#9;ret = ret .. &quot;\n\nAttributes:\n&quot;&#10;&#9;&#9;for k, v in pairs(info.attributes) do&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#10;&#9;&#9;end&#10;&#9;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;end&#10;&#10;&#9;console (ret)&#10;&#9;return ret&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000002"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="how" luaMethodCode="-- @1.1&#10;--&#10;-- Print all available classes&#10;--&#10;function how()&#10;&#9;ret = &quot;Available classes:\n&quot;&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;for i,v in ipairs(class_names()) do&#10;&#9;&#9;ret = ret .. &quot;\t&quot;.. v .. &quot;\n&quot;&#10;&#9;end&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;console (J(ret))&#10;&#9;return ret&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000003"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="json4lua" luaMethodCode="-----------------------------------------------------------------------------&#13;&#10;-- JSON4Lua: JSON encoding / decoding support for the Lua language.&#13;&#10;-- json Module.&#13;&#10;-- Author: Craig Mason-Jones&#13;&#10;-- Homepage: http://json.luaforge.net/&#13;&#10;-- Version: 0.9.40&#13;&#10;-- This module is released under the MIT License (MIT).&#13;&#10;-- Please see LICENCE.txt for details.&#13;&#10;--&#13;&#10;-- USAGE:&#13;&#10;-- This module exposes two functions:&#13;&#10;--   encode(o)&#13;&#10;--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.&#13;&#10;--   decode(json_string)&#13;&#10;--     Returns a Lua object populated with the data encoded in the JSON string json_string.&#13;&#10;--&#13;&#10;-- REQUIREMENTS:&#13;&#10;--   compat-5.1 if using Lua 5.0&#13;&#10;--&#13;&#10;-- CHANGELOG&#13;&#10;--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). &#13;&#10;--          Fixed Lua 5.1 compatibility issues.&#13;&#10;--   &#9;&#9;Introduced json.null to have null values in associative arrays.&#13;&#10;--          encode() performance improvement (more than 50%) through table.concat rather than ..&#13;&#10;--          Introduced decode ability to ignore /**/ comments in the JSON string.&#13;&#10;--   0.9.10 Fix to array encoding / decoding to correctly manage nil/null values in arrays.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Imports and dependencies&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;local math = require('math')&#13;&#10;local string = require(&quot;string&quot;)&#13;&#10;local table = require(&quot;table&quot;)&#13;&#10;&#13;&#10;local base = _G&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Module declaration&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;module(&quot;json&quot;)&#13;&#10;&#13;&#10;-- Public functions&#13;&#10;&#13;&#10;-- Private functions&#13;&#10;local decode_scanArray&#13;&#10;local decode_scanComment&#13;&#10;local decode_scanConstant&#13;&#10;local decode_scanNumber&#13;&#10;local decode_scanObject&#13;&#10;local decode_scanString&#13;&#10;local decode_scanWhitespace&#13;&#10;local encodeString&#13;&#10;local isArray&#13;&#10;local isEncodable&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- PUBLIC FUNCTIONS&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;--- Encodes an arbitrary Lua object / variable.&#13;&#10;-- @param v The Lua object / variable to be JSON encoded.&#13;&#10;-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)&#13;&#10;function encode (v)&#13;&#10;  -- Handle nil values&#13;&#10;  if v==nil then&#13;&#10;    return &quot;null&quot;&#13;&#10;  end&#13;&#10;  &#13;&#10;  local vtype = base.type(v)  &#13;&#10;&#13;&#10;  -- Handle strings&#13;&#10;  if vtype=='string' then    &#13;&#10;    return '&quot;' .. encodeString(v) .. '&quot;'&#9;    -- Need to handle encoding in string&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle booleans&#13;&#10;  if vtype=='number' or vtype=='boolean' then&#13;&#10;    return base.tostring(v)&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle tables&#13;&#10;  if vtype=='table' then&#13;&#10;    local rval = {}&#13;&#10;    -- Consider arrays separately&#13;&#10;    local bArray, maxCount = isArray(v)&#13;&#10;    if bArray then&#13;&#10;      for i = 1,maxCount do&#13;&#10;        table.insert(rval, encode(v[i]))&#13;&#10;      end&#13;&#10;    else&#9;-- An object, not an array&#13;&#10;      for i,j in base.pairs(v) do&#13;&#10;        if isEncodable(i) and isEncodable(j) then&#13;&#10;          table.insert(rval, '&quot;' .. encodeString(i) .. '&quot;:' .. encode(j))&#13;&#10;        end&#13;&#10;      end&#13;&#10;    end&#13;&#10;    if bArray then&#13;&#10;      return '[' .. table.concat(rval,',') ..']'&#13;&#10;    else&#13;&#10;      return '{' .. table.concat(rval,',') .. '}'&#13;&#10;    end&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle null values&#13;&#10;  if vtype=='function' and v==null then&#13;&#10;    return 'null'&#13;&#10;  end&#13;&#10;  &#13;&#10;  base.assert(false,'encode attempt to encode unsupported type ' .. vtype .. ':' .. base.tostring(v))&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.&#13;&#10;-- @param s The string to scan.&#13;&#10;-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.&#13;&#10;-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,&#13;&#10;-- and the position of the first character after&#13;&#10;-- the scanned JSON object.&#13;&#10;function decode(s, startPos)&#13;&#10;  startPos = startPos and startPos or 1&#13;&#10;  startPos = decode_scanWhitespace(s,startPos)&#13;&#10;  base.assert(startPos&lt;=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')&#13;&#10;  local curChar = string.sub(s,startPos,startPos)&#13;&#10;  -- Object&#13;&#10;  if curChar=='{' then&#13;&#10;    return decode_scanObject(s,startPos)&#13;&#10;  end&#13;&#10;  -- Array&#13;&#10;  if curChar=='[' then&#13;&#10;    return decode_scanArray(s,startPos)&#13;&#10;  end&#13;&#10;  -- Number&#13;&#10;  if string.find(&quot;+-0123456789.e&quot;, curChar, 1, true) then&#13;&#10;    return decode_scanNumber(s,startPos)&#13;&#10;  end&#13;&#10;  -- String&#13;&#10;  if curChar==[[&quot;]] or curChar==[[']] then&#13;&#10;    return decode_scanString(s,startPos)&#13;&#10;  end&#13;&#10;  if string.sub(s,startPos,startPos+1)=='/*' then&#13;&#10;    return decode(s, decode_scanComment(s,startPos))&#13;&#10;  end&#13;&#10;  -- Otherwise, it must be a constant&#13;&#10;  return decode_scanConstant(s,startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- The null function allows one to specify a null value in an associative array (which is otherwise&#13;&#10;-- discarded if you set the value with 'nil' in Lua. Simply set t = { first=json.null }&#13;&#10;function null()&#13;&#10;  return null -- so json.null() will also return null ;-)&#13;&#10;end&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Internal, PRIVATE functions.&#13;&#10;-- Following a Python-like convention, I have prefixed all these 'PRIVATE'&#13;&#10;-- functions with an underscore.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;--- Scans an array from JSON into a Lua object&#13;&#10;-- startPos begins at the start of the array.&#13;&#10;-- Returns the array and the next starting position&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position for the scan.&#13;&#10;-- @return table, int The scanned array as a table, and the position of the next character to scan.&#13;&#10;function decode_scanArray(s,startPos)&#13;&#10;  local array = {}&#9;-- The return value&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\n'..s )&#13;&#10;  startPos = startPos + 1&#13;&#10;  -- Infinite loop for array elements&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen,'JSON String ended unexpectedly scanning array.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar==']') then&#13;&#10;      return array, startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON String ended unexpectedly scanning array.')&#13;&#10;    object, startPos = decode(s,startPos)&#13;&#10;    table.insert(array,object)&#13;&#10;  until false&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a comment and discards the comment.&#13;&#10;-- Returns the position of the next character following the comment.&#13;&#10;-- @param string s The JSON string to scan.&#13;&#10;-- @param int startPos The starting position of the comment&#13;&#10;function decode_scanComment(s, startPos)&#13;&#10;  base.assert( string.sub(s,startPos,startPos+1)=='/*', &quot;decode_scanComment called but comment does not start at position &quot; .. startPos)&#13;&#10;  local endPos = string.find(s,'*/',startPos+2)&#13;&#10;  base.assert(endPos~=nil, &quot;Unterminated comment in string at &quot; .. startPos)&#13;&#10;  return endPos+2  &#13;&#10;end&#13;&#10;&#13;&#10;--- Scans for given constants: true, false or null&#13;&#10;-- Returns the appropriate Lua type, and the position of the next character to read.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position in the string at which to start scanning.&#13;&#10;-- @return object, int The object (true, false or nil) and the position at which the next character should be &#13;&#10;-- scanned.&#13;&#10;function decode_scanConstant(s, startPos)&#13;&#10;  local consts = { [&quot;true&quot;] = true, [&quot;false&quot;] = false, [&quot;null&quot;] = nil }&#13;&#10;  local constNames = {&quot;true&quot;,&quot;false&quot;,&quot;null&quot;}&#13;&#10;&#13;&#10;  for i,k in base.pairs(constNames) do&#13;&#10;    --print (&quot;[&quot; .. string.sub(s,startPos, startPos + string.len(k) -1) ..&quot;]&quot;, k)&#13;&#10;    if string.sub(s,startPos, startPos + string.len(k) -1 )==k then&#13;&#10;      return consts[k], startPos + string.len(k)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  base.assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a number from the JSON encoded string.&#13;&#10;-- (in fact, also is able to scan numeric +- eqns, which is not&#13;&#10;-- in the JSON spec.)&#13;&#10;-- Returns the number, and the position of the next character&#13;&#10;-- after the number.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position at which to start scanning.&#13;&#10;-- @return number, int The extracted number and the position of the next character to scan.&#13;&#10;function decode_scanNumber(s,startPos)&#13;&#10;  local endPos = startPos+1&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local acceptableChars = &quot;+-0123456789.e&quot;&#13;&#10;  while (string.find(acceptableChars, string.sub(s,endPos,endPos), 1, true)&#13;&#10;&#9;and endPos&lt;=stringLen&#13;&#10;&#9;) do&#13;&#10;    endPos = endPos + 1&#13;&#10;  end&#13;&#10;  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)&#13;&#10;  local stringEval = base.loadstring(stringValue)&#13;&#10;  base.assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)&#13;&#10;  return stringEval(), endPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON object into a Lua object.&#13;&#10;-- startPos begins at the start of the object.&#13;&#10;-- Returns the object and the next starting position.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return table, int The scanned object as a table and the position of the next character to scan.&#13;&#10;function decode_scanObject(s,startPos)&#13;&#10;  local object = {}&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local key, value&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\n' .. s)&#13;&#10;  startPos = startPos + 1&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly while scanning object.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar=='}') then&#13;&#10;      return object,startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly scanning object.')&#13;&#10;    -- Scan the key&#13;&#10;    key, startPos = decode(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    base.assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    value, startPos = decode(s,startPos)&#13;&#10;    object[key]=value&#13;&#10;  until false&#9;-- infinite loop while key-value pairs are found&#13;&#10;end&#13;&#10;&#13;&#10;-- START SoniEx2&#13;&#10;-- Initialize some things used by decode_scanString&#13;&#10;-- You know, for efficiency&#13;&#10;local escapeSequences = {&#13;&#10;  [&quot;\\t&quot;] = &quot;\t&quot;,&#13;&#10;  [&quot;\\f&quot;] = &quot;\f&quot;,&#13;&#10;  [&quot;\\r&quot;] = &quot;\r&quot;,&#13;&#10;  [&quot;\\n&quot;] = &quot;\n&quot;,&#13;&#10;  [&quot;\\b&quot;] = &quot;\b&quot;&#13;&#10;}&#13;&#10;base.setmetatable(escapeSequences, {__index = function(t,k)&#13;&#10;  -- skip &quot;\&quot; aka strip escape&#13;&#10;  return string.sub(k,2)&#13;&#10;end})&#13;&#10;-- END SoniEx2&#13;&#10;&#13;&#10;--- Scans a JSON string from the opening inverted comma or single quote to the&#13;&#10;-- end of the string.&#13;&#10;-- Returns the string extracted as a Lua string,&#13;&#10;-- and the position of the next non-string character&#13;&#10;-- (after the closing inverted comma or single quote).&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return string, int The extracted string as a Lua string, and the next character to parse.&#13;&#10;function decode_scanString(s,startPos)&#13;&#10;  base.assert(startPos, 'decode_scanString(..) called without start position')&#13;&#10;  local startChar = string.sub(s,startPos,startPos)&#13;&#10;  -- START SoniEx2&#13;&#10;  -- PS: I don't think single quotes are valid JSON&#13;&#10;  base.assert(startChar == [[&quot;]] or startChar == [[']],'decode_scanString called for a non-string')&#13;&#10;  --base.assert(startPos, &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; for string at position &quot; .. oldStart)&#13;&#10;  local t = {}&#13;&#10;  local i,j = startPos,startPos&#13;&#10;  while string.find(s, startChar, j+1) ~= j+1 do&#13;&#10;    local oldj = j&#13;&#10;    i,j = string.find(s, &quot;\\.&quot;, j+1)&#13;&#10;    local x,y = string.find(s, startChar, oldj+1)&#13;&#10;    if not i or x &lt; i then&#13;&#10;      base.print(s, startPos, string.sub(s,startPos,oldj))&#13;&#10;      i,j = x,y-1&#13;&#10;      if not x then base.print(s, startPos, string.sub(s,startPos,oldj)) end&#13;&#10;    end&#13;&#10;    table.insert(t, string.sub(s, oldj+1, i-1))&#13;&#10;    if string.sub(s, i, j) == &quot;\\u&quot; then&#13;&#10;      local a = string.sub(s,j+1,j+4)&#13;&#10;      j = j + 4&#13;&#10;      local n = base.tonumber(a, 16)&#13;&#10;      base.assert(n, &quot;String decoding failed: bad Unicode escape &quot; .. a .. &quot; at position &quot; .. i .. &quot; : &quot; .. j)&#13;&#10;      -- math.floor(x/2&#94;y) == lazy right shift&#13;&#10;      -- a % 2&#94;b == bitwise_and(a, (2&#94;b)-1)&#13;&#10;      -- 64 = 2&#94;6&#13;&#10;      -- 4096 = 2&#94;12 (or 2&#94;6 * 2&#94;6)&#13;&#10;      local x&#13;&#10;      if n &lt; 0x80 then&#13;&#10;        x = string.char(n % 0x80)&#13;&#10;      elseif n &lt; 0x800 then&#13;&#10;        -- [110x xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xC0 + (math.floor(n/64) % 0x20), 0x80 + (n % 0x40))&#13;&#10;      else&#13;&#10;        -- [1110 xxxx] [10xx xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xE0 + (math.floor(n/4096) % 0x10), 0x80 + (math.floor(n/64) % 0x40), 0x80 + (n % 0x40))&#13;&#10;      end&#13;&#10;      table.insert(t, x)&#13;&#10;    else&#13;&#10;      table.insert(t, escapeSequences[string.sub(s, i, j)])&#13;&#10;    end&#13;&#10;  end&#13;&#10;  table.insert(t,string.sub(j, j+1))&#13;&#10;  base.assert(string.find(s, startChar, j+1), &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; at position &quot; .. j .. &quot;(for string at position &quot; .. startPos .. &quot;)&quot;)&#13;&#10;  return table.concat(t,&quot;&quot;), j+2&#13;&#10;  -- END SoniEx2&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON string skipping all whitespace from the current start position.&#13;&#10;-- Returns the position of the first non-whitespace character, or nil if the whole end of string is reached.&#13;&#10;-- @param s The string being scanned&#13;&#10;-- @param startPos The starting position where we should begin removing whitespace.&#13;&#10;-- @return int The first position where non-whitespace was encountered, or string.len(s)+1 if the end of string&#13;&#10;-- was reached.&#13;&#10;function decode_scanWhitespace(s,startPos)&#13;&#10;  local whitespace=&quot; \n\r\t&quot;&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  while ( string.find(whitespace, string.sub(s,startPos,startPos), 1, true)  and startPos &lt;= stringLen) do&#13;&#10;    startPos = startPos + 1&#13;&#10;  end&#13;&#10;  return startPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Encodes a string to be JSON-compatible.&#13;&#10;-- This just involves back-quoting inverted commas, back-quotes and newlines, I think ;-)&#13;&#10;-- @param s The string to return as a JSON encoded (i.e. backquoted string)&#13;&#10;-- @return The string appropriately escaped.&#13;&#10;&#13;&#10;local escapeList = {&#13;&#10;    ['&quot;']  = '\\&quot;',&#13;&#10;    ['\\'] = '\\\\',&#13;&#10;    ['/']  = '\\/', &#13;&#10;    ['\b'] = '\\b',&#13;&#10;    ['\f'] = '\\f',&#13;&#10;    ['\n'] = '\\n',&#13;&#10;    ['\r'] = '\\r',&#13;&#10;    ['\t'] = '\\t'&#13;&#10;}&#13;&#10;&#13;&#10;function encodeString(s)&#13;&#10; return s:gsub(&quot;.&quot;, function(c) return escapeList[c] end) -- SoniEx2: 5.0 compat&#13;&#10;end&#13;&#10;&#13;&#10;-- Determines whether the given Lua type is an array or a table / dictionary.&#13;&#10;-- We consider any table an array if it has indexes 1..n for its n items, and no&#13;&#10;-- other data in the table.&#13;&#10;-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...&#13;&#10;-- @param t The table to evaluate as an array&#13;&#10;-- @return boolean, number True if the table can be represented as an array, false otherwise. If true,&#13;&#10;-- the second returned value is the maximum&#13;&#10;-- number of indexed elements in the array. &#13;&#10;function isArray(t)&#13;&#10;  -- Next we count all the elements, ensuring that any non-indexed elements are not-encodable &#13;&#10;  -- (with the possible exception of 'n')&#13;&#10;  local maxIndex = 0&#13;&#10;  for k,v in base.pairs(t) do&#13;&#10;    if (base.type(k)=='number' and math.floor(k)==k and 1&lt;=k) then&#9;-- k,v is an indexed pair&#13;&#10;      if (not isEncodable(v)) then return false end&#9;-- All array elements must be encodable&#13;&#10;      maxIndex = math.max(maxIndex,k)&#13;&#10;    else&#13;&#10;      if (k=='n') then&#13;&#10;        if v ~= table.getn(t) then return false end  -- False if n does not hold the number of elements&#13;&#10;      else -- Else of (k=='n')&#13;&#10;        if isEncodable(v) then return false end&#13;&#10;      end  -- End of (k~='n')&#13;&#10;    end -- End of k,v not an indexed pair&#13;&#10;  end  -- End of loop across all pairs&#13;&#10;  return true, maxIndex&#13;&#10;end&#13;&#10;&#13;&#10;--- Determines whether the given Lua object / table / variable can be JSON encoded. The only&#13;&#10;-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.&#13;&#10;-- In this implementation, all other types are ignored.&#13;&#10;-- @param o The object to examine.&#13;&#10;-- @return boolean True if the object should be JSON encoded, false if it should be ignored.&#13;&#10;function isEncodable(o)&#13;&#10;  local t = base.type(o)&#13;&#10;  return (t=='string' or t=='boolean' or t=='number' or t=='nil' or t=='table') or (t=='function' and o==null) &#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000004"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="debugger.lua" luaMethodCode="--{{{  history&#13;&#10;&#13;&#10;--15/03/06 DCN Created based on RemDebug&#13;&#10;--28/04/06 DCN Update for Lua 5.1&#13;&#10;--01/06/06 DCN Fix command argument parsing&#13;&#10;--             Add step/over N facility&#13;&#10;--             Add trace lines facility&#13;&#10;--05/06/06 DCN Add trace call/return facility&#13;&#10;--06/06/06 DCN Make it behave when stepping through the creation of a coroutine&#13;&#10;--06/06/06 DCN Integrate the simple debugger into the main one&#13;&#10;--07/06/06 DCN Provide facility to step into coroutines&#13;&#10;--13/06/06 DCN Fix bug that caused the function environment to get corrupted with the global one&#13;&#10;--14/06/06 DCN Allow 'sloppy' file names when setting breakpoints&#13;&#10;--04/08/06 DCN Allow for no space after command name&#13;&#10;--11/08/06 DCN Use io.write not print&#13;&#10;--30/08/06 DCN Allow access to array elements in 'dump'&#13;&#10;--10/10/06 DCN Default to breakfile for all commands that require a filename and give '-'&#13;&#10;--06/12/06 DCN Allow for punctuation characters in DUMP variable names&#13;&#10;--03/01/07 DCN Add pause on/off facility&#13;&#10;--19/06/07 DCN Allow for duff commands being typed in the debugger (thanks to Michael.Bringmann@lsi.com)&#13;&#10;--             Allow for case sensitive file systems               (thanks to Michael.Bringmann@lsi.com)&#13;&#10;--04/08/09 DCN Add optional line count param to pause&#13;&#10;--05/08/09 DCN Reset the debug hook in Pause() even if we think we're started&#13;&#10;--30/09/09 DCN Re-jig to not use co-routines (makes debugging co-routines awkward)&#13;&#10;--01/10/09 DCN Add ability to break on reaching any line in a file&#13;&#10;--24/07/13 TWW Added code for emulating setfenv/getfenv in Lua 5.2 as per&#13;&#10;--             http://lua-users.org/lists/lua-l/2010-06/msg00313.html&#13;&#10;--25/07/13 TWW Copied Alex Parrill's fix for errors when tracing back across a C frame&#13;&#10;--             (https://github.com/ColonelThirtyTwo/clidebugger, 26/01/12)&#13;&#10;--25/07/13 DCN Allow for windows and unix file name conventions in has_breakpoint&#13;&#10;--26/07/13 DCN Allow for \ being interpreted as an escape inside a [] pattern in 5.2&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  description&#13;&#10;&#13;&#10;--A simple command line debug system for Lua written by Dave Nichols of&#13;&#10;--Match-IT Limited. Its public domain software. Do with it as you wish.&#13;&#10;&#13;&#10;--This debugger was inspired by:&#13;&#10;-- RemDebug 1.0 Beta&#13;&#10;-- Copyright Kepler Project 2005 (http://www.keplerproject.org/remdebug)&#13;&#10;&#13;&#10;--Usage:&#13;&#10;--  require('debugger')        --load the debug library&#13;&#10;--  pause(message)             --start/resume a debug session&#13;&#10;&#13;&#10;--An assert() failure will also invoke the debugger.&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;local IsWindows = string.find(string.lower(os.getenv('OS') or ''),'&#94;windows')&#13;&#10;&#13;&#10;local coro_debugger&#13;&#10;local events = { BREAK = 1, WATCH = 2, STEP = 3, SET = 4 }&#13;&#10;breakpoints = {}&#13;&#10;local watches = {}&#13;&#10;local step_into   = false&#13;&#10;local step_over   = false&#13;&#10;local step_lines  = 0&#13;&#10;local step_level  = {main=0}&#13;&#10;local stack_level = {main=0}&#13;&#10;local trace_level = {main=0}&#13;&#10;local trace_calls = false&#13;&#10;local trace_returns = false&#13;&#10;local trace_lines = false&#13;&#10;local ret_file, ret_line, ret_name&#13;&#10;local current_thread = 'main'&#13;&#10;local started = false&#13;&#10;local pause_off = false&#13;&#10;local _g      = _G&#13;&#10;local cocreate, cowrap = coroutine.create, coroutine.wrap&#13;&#10;local pausemsg = 'pause'&#13;&#10;&#13;&#10;--{{{  make Lua 5.2 compatible&#13;&#10;&#13;&#10;if not setfenv then -- Lua 5.2&#13;&#10;  --[[&#13;&#10;  As far as I can see, the only missing detail of these functions (except&#13;&#10;  for occasional bugs) to achieve 100% compatibility is the case of&#13;&#10;  'getfenv' over a function that does not have an _ENV variable (that is,&#13;&#10;  it uses no globals).&#13;&#10;&#13;&#10;  We could use a weak table to keep the environments of these functions&#13;&#10;  when set by setfenv, but that still misses the case of a function&#13;&#10;  without _ENV that was not subjected to setfenv.&#13;&#10;&#13;&#10;  -- Roberto&#13;&#10;  ]]--&#13;&#10;&#13;&#10;  setfenv = setfenv or function(f, t)&#13;&#10;    f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)&#13;&#10;    local name&#13;&#10;    local up = 0&#13;&#10;    repeat&#13;&#10;      up = up + 1&#13;&#10;      name = debug.getupvalue(f, up)&#13;&#10;    until name == '_ENV' or name == nil&#13;&#10;    if name then&#13;&#10;      debug.upvaluejoin(f, up, function() return name end, 1) -- use unique upvalue&#13;&#10;      debug.setupvalue(f, up, t)&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  getfenv = getfenv or function(f)&#13;&#10;    f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)&#13;&#10;    local name, val&#13;&#10;    local up = 0&#13;&#10;    repeat&#13;&#10;      up = up + 1&#13;&#10;      name, val = debug.getupvalue(f, up)&#13;&#10;    until name == '_ENV' or name == nil&#13;&#10;    return val&#13;&#10;  end&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  local hints -- command help&#13;&#10;--The format in here is name=summary|description&#13;&#10;local hints = {&#13;&#10;&#13;&#10;pause =   [[&#13;&#10;pause(msg[,lines][,force]) -- start/resume a debugger session|&#13;&#10;&#13;&#10;This can only be used in your code or from the console as a means to&#13;&#10;start/resume a debug session.&#13;&#10;If msg is given that is shown when the session starts/resumes. Useful to&#13;&#10;give a context if you've instrumented your code with pause() statements.&#13;&#10;&#13;&#10;If lines is given, the script pauses after that many lines, else it pauses&#13;&#10;immediately.&#13;&#10;&#13;&#10;If force is true, the pause function is honoured even if poff has been used.&#13;&#10;This is useful when in an interactive console session to regain debugger&#13;&#10;control.&#13;&#10;]],&#13;&#10;&#13;&#10;poff =    [[&#13;&#10;poff                -- turn off pause() command|&#13;&#10;&#13;&#10;This causes all pause() commands to be ignored. This is useful if you have&#13;&#10;instrumented your code in a busy loop and want to continue normal execution&#13;&#10;with no further interruption.&#13;&#10;]],&#13;&#10;&#13;&#10;pon =     [[&#13;&#10;pon                 -- turn on pause() command|&#13;&#10;&#13;&#10;This re-instates honouring the pause() commands you may have instrumented&#13;&#10;your code with.&#13;&#10;]],&#13;&#10;&#13;&#10;setb =    [[&#13;&#10;setb [line file]    -- set a breakpoint to line/file|, line 0 means 'any'&#13;&#10;&#13;&#10;If file is omitted or is &quot;-&quot; the breakpoint is set at the file for the&#13;&#10;currently set level (see &quot;set&quot;). Execution pauses when this line is about&#13;&#10;to be executed and the debugger session is re-activated.&#13;&#10;&#13;&#10;The file can be given as the fully qualified name, partially qualified or&#13;&#10;just the file name. E.g. if file is set as &quot;myfile.lua&quot;, then whenever&#13;&#10;execution reaches any file that ends with &quot;myfile.lua&quot; it will pause. If&#13;&#10;no extension is given, any extension will do.&#13;&#10;&#13;&#10;If the line is given as 0, then reaching any line in the file will do.&#13;&#10;]],&#13;&#10;&#13;&#10;delb =    [[&#13;&#10;delb [line file]    -- removes a breakpoint|&#13;&#10;&#13;&#10;If file is omitted or is &quot;-&quot; the breakpoint is removed for the file of the&#13;&#10;currently set level (see &quot;set&quot;).&#13;&#10;]],&#13;&#10;&#13;&#10;delallb = [[&#13;&#10;delallb             -- removes all breakpoints|&#13;&#10;]],&#13;&#10;&#13;&#10;setw =    [[&#13;&#10;setw &lt;exp&gt;          -- adds a new watch expression|&#13;&#10;&#13;&#10;The expression is evaluated before each line is executed. If the expression&#13;&#10;yields true then execution is paused and the debugger session re-activated.&#13;&#10;The expression is executed in the context of the line about to be executed.&#13;&#10;]],&#13;&#10;&#13;&#10;delw =    [[&#13;&#10;delw &lt;index&gt;        -- removes the watch expression at index|&#13;&#10;&#13;&#10;The index is that returned when the watch expression was set by setw.&#13;&#10;]],&#13;&#10;&#13;&#10;delallw = [[&#13;&#10;delallw             -- removes all watch expressions|&#13;&#10;]],&#13;&#10;&#13;&#10;run     = [[&#13;&#10;run                 -- run until next breakpoint or watch expression|&#13;&#10;]],&#13;&#10;&#13;&#10;step    = [[&#13;&#10;step [N]            -- run next N lines, stepping into function calls|&#13;&#10;&#13;&#10;If N is omitted, use 1.&#13;&#10;]],&#13;&#10;&#13;&#10;over    = [[&#13;&#10;over [N]            -- run next N lines, stepping over function calls|&#13;&#10;&#13;&#10;If N is omitted, use 1.&#13;&#10;]],&#13;&#10;&#13;&#10;out     = [[&#13;&#10;out [N]             -- run lines until stepped out of N functions|&#13;&#10;&#13;&#10;If N is omitted, use 1.&#13;&#10;If you are inside a function, using &quot;out 1&quot; will run until you return&#13;&#10;from that function to the caller.&#13;&#10;]],&#13;&#10;&#13;&#10;gotoo   = [[&#13;&#10;gotoo [line file]    -- step to line in file|&#13;&#10;&#13;&#10;This is equivalent to 'setb line file', followed by 'run', followed&#13;&#10;by 'delb line file'.&#13;&#10;]],&#13;&#10;&#13;&#10;listb   = [[&#13;&#10;listb               -- lists breakpoints|&#13;&#10;]],&#13;&#10;&#13;&#10;listw   = [[&#13;&#10;listw               -- lists watch expressions|&#13;&#10;]],&#13;&#10;&#13;&#10;set     = [[&#13;&#10;set [level]         -- set context to stack level, omitted=show|&#13;&#10;&#13;&#10;If level is omitted it just prints the current level set.&#13;&#10;This sets the current context to the level given. This affects the&#13;&#10;context used for several other functions (e.g. vars). The possible&#13;&#10;levels are those shown by trace.&#13;&#10;]],&#13;&#10;&#13;&#10;vars    = [[&#13;&#10;vars [depth]        -- list context locals to depth, omitted=1|&#13;&#10;&#13;&#10;If depth is omitted then uses 1.&#13;&#10;Use a depth of 0 for the maximum.&#13;&#10;Lists all non-nil local variables and all non-nil upvalues in the&#13;&#10;currently set context. For variables that are tables, lists all fields&#13;&#10;to the given depth.&#13;&#10;]],&#13;&#10;&#13;&#10;fenv    = [[&#13;&#10;fenv [depth]        -- list context function env to depth, omitted=1|&#13;&#10;&#13;&#10;If depth is omitted then uses 1.&#13;&#10;Use a depth of 0 for the maximum.&#13;&#10;Lists all function environment variables in the currently set context.&#13;&#10;For variables that are tables, lists all fields to the given depth.&#13;&#10;]],&#13;&#10;&#13;&#10;glob    = [[&#13;&#10;glob [depth]        -- list globals to depth, omitted=1|&#13;&#10;&#13;&#10;If depth is omitted then uses 1.&#13;&#10;Use a depth of 0 for the maximum.&#13;&#10;Lists all global variables.&#13;&#10;For variables that are tables, lists all fields to the given depth.&#13;&#10;]],&#13;&#10;&#13;&#10;ups     = [[&#13;&#10;ups                 -- list all the upvalue names|&#13;&#10;&#13;&#10;These names will also be in the &quot;vars&quot; list unless their value is nil.&#13;&#10;This provides a means to identify which vars are upvalues and which are&#13;&#10;locals. If a name is both an upvalue and a local, the local value takes&#13;&#10;precedance.&#13;&#10;]],&#13;&#10;&#13;&#10;locs    = [[&#13;&#10;locs                -- list all the locals names|&#13;&#10;&#13;&#10;These names will also be in the &quot;vars&quot; list unless their value is nil.&#13;&#10;This provides a means to identify which vars are upvalues and which are&#13;&#10;locals. If a name is both an upvalue and a local, the local value takes&#13;&#10;precedance.&#13;&#10;]],&#13;&#10;&#13;&#10;dump    = [[&#13;&#10;dump &lt;var&gt; [depth]  -- dump all fields of variable to depth|&#13;&#10;&#13;&#10;If depth is omitted then uses 1.&#13;&#10;Use a depth of 0 for the maximum.&#13;&#10;Prints the value of &lt;var&gt; in the currently set context level. If &lt;var&gt;&#13;&#10;is a table, lists all fields to the given depth. &lt;var&gt; can be just a&#13;&#10;name, or name.field or name.# to any depth, e.g. t.1.f accesses field&#13;&#10;'f' in array element 1 in table 't'.&#13;&#10;&#13;&#10;Can also be called from a script as dump(var,depth).&#13;&#10;]],&#13;&#10;&#13;&#10;tron    = [[&#13;&#10;tron [crl]          -- turn trace on for (c)alls, (r)etuns, (l)lines|&#13;&#10;&#13;&#10;If no parameter is given then tracing is turned off.&#13;&#10;When tracing is turned on a line is printed to the console for each&#13;&#10;debug 'event' selected. c=function calls, r=function returns, l=lines.&#13;&#10;]],&#13;&#10;&#13;&#10;trace   = [[&#13;&#10;trace               -- dumps a stack trace|&#13;&#10;&#13;&#10;Format is [level] = file,line,name&#13;&#10;The level is a candidate for use by the 'set' command.&#13;&#10;]],&#13;&#10;&#13;&#10;info    = [[&#13;&#10;info                -- dumps the complete debug info captured|&#13;&#10;&#13;&#10;Only useful as a diagnostic aid for the debugger itself. This information&#13;&#10;can be HUGE as it dumps all variables to the maximum depth, so be careful.&#13;&#10;]],&#13;&#10;&#13;&#10;show    = [[&#13;&#10;show line file X Y  -- show X lines before and Y after line in file|&#13;&#10;&#13;&#10;If line is omitted or is '-' then the current set context line is used.&#13;&#10;If file is omitted or is '-' then the current set context file is used.&#13;&#10;If file is not fully qualified and cannot be opened as specified, then&#13;&#10;a search for the file in the package[path] is performed using the usual&#13;&#10;&quot;require&quot; searching rules. If no file extension is given, .lua is used.&#13;&#10;Prints the lines from the source file around the given line.&#13;&#10;]],&#13;&#10;&#13;&#10;exit    = [[&#13;&#10;exit                -- exits debugger, re-start it using pause()|&#13;&#10;]],&#13;&#10;&#13;&#10;help    = [[&#13;&#10;help [command]      -- show this list or help for command|&#13;&#10;]],&#13;&#10;&#13;&#10;[&quot;&lt;statement&gt;&quot;] = [[&#13;&#10;&lt;statement&gt;         -- execute a statement in the current context|&#13;&#10;&#13;&#10;The statement can be anything that is legal in the context, including&#13;&#10;assignments. Such assignments affect the context and will be in force&#13;&#10;immediately. Any results returned are printed. Use '=' as a short-hand&#13;&#10;for 'return', e.g. &quot;=func(arg)&quot; will call 'func' with 'arg' and print&#13;&#10;the results, and &quot;=var&quot; will just print the value of 'var'.&#13;&#10;]],&#13;&#10;&#13;&#10;what    = [[&#13;&#10;what &lt;func&gt;         -- show where &lt;func&gt; is defined (if known)|&#13;&#10;]],&#13;&#10;&#13;&#10;}&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{ Local function to get table size&#13;&#10;local function tsize(t)&#13;&#10;    local count=0&#13;&#10;&#13;&#10;    for k,v in pairs(t) do&#13;&#10;        count = count + 1&#13;&#10;    end&#13;&#10;&#13;&#10;    return count&#13;&#10;end&#13;&#10;---}}}&#13;&#10;&#13;&#10;---{{{ Global utility function to set breakpoints, used inside Ctrlr&#13;&#10;function setBreakpoint(line, file, shouldBeSet)&#13;&#10;    if not breakpoints[line] then&#13;&#10;        breakpoints[line] = {}&#13;&#10;    end&#13;&#10;&#13;&#10;    if shouldBeSet then&#13;&#10;        breakpoints[line][file] = true&#13;&#10;    else&#13;&#10;        breakpoints[line] = nil&#13;&#10;    end&#13;&#10;end&#13;&#10;---}}}&#13;&#10;&#13;&#10;&#13;&#10;--{{{  local function getinfo(level,field)&#13;&#10;&#13;&#10;--like debug.getinfo but copes with no activation record at the given level&#13;&#10;--and knows how to get 'field'. 'field' can be the name of any of the&#13;&#10;--activation record fields or any of the 'what' names or nil for everything.&#13;&#10;--only valid when using the stack level to get info, not a function name.&#13;&#10;&#13;&#10;local function getinfo(level,field)&#13;&#10;  level = level + 1  --to get to the same relative level as the caller&#13;&#10;  if not field then return debug.getinfo(level) end&#13;&#10;  local what&#13;&#10;  if field == 'name' or field == 'namewhat' then&#13;&#10;    what = 'n'&#13;&#10;  elseif field == 'what' or field == 'source' or field == 'linedefined' or field == 'lastlinedefined' or field == 'short_src' then&#13;&#10;    what = 'S'&#13;&#10;  elseif field == 'currentline' then&#13;&#10;    what = 'l'&#13;&#10;  elseif field == 'nups' then&#13;&#10;    what = 'u'&#13;&#10;  elseif field == 'func' then&#13;&#10;    what = 'f'&#13;&#10;  else&#13;&#10;    return debug.getinfo(level,field)&#13;&#10;  end&#13;&#10;  local ar = debug.getinfo(level,what)&#13;&#10;  if ar then return ar[field] else return nil end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function indented( level, ... )&#13;&#10;&#13;&#10;local function indented( level, ... )&#13;&#10;  ctrlrDebugger:write( string.format (&quot;%s%s\n&quot;, string.rep('  ',level), table.concat({...}) ))&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function dumpval( level, name, value, limit )&#13;&#10;&#13;&#10;local dumpvisited&#13;&#10;&#13;&#10;local function dumpval( level, name, value, limit )&#13;&#10;    local index&#13;&#10;&#13;&#10;    if type(name) == 'number' then&#13;&#10;        index = string.format(&quot;%q,&quot;,name)&#13;&#10;    elseif type(name) == 'string' and (name == '__VARSLEVEL__' or name == '__ENVIRONMENT__' or name == '__GLOBALS__' or name == '__UPVALUES__' or name == '__LOCALS__') then&#13;&#10;        --ignore these, they are debugger generated&#13;&#10;        return&#13;&#10;    elseif type(name) == 'string' and string.find(name,'&#94;[_%a][_.%w]*$') then&#13;&#10;        index = string.format (&quot;%q: &quot;, name);&#13;&#10;    else&#13;&#10;        index = string.format (&quot;%q,&quot;, tostring(name))&#13;&#10;    end&#13;&#10;&#13;&#10;    if type(value) == 'table' then&#13;&#10;        if dumpvisited[value] then&#13;&#10;            indented (level, index, string.format(&quot;%q&quot;, dumpvisited[value]))&#13;&#10;        else&#13;&#10;            dumpvisited[value] = string.format (&quot;\&quot;table\&quot;: \&quot;%d\&quot;,&quot;, tsize (value))&#13;&#10;            if (limit or 0) &gt; 0 and level+1 &gt;= limit then&#13;&#10;                indented (level, index, string.format (&quot;{%s&quot;, string.gsub(dumpvisited[value], &quot;,&quot;, &quot;},&quot;)))&#13;&#10;            else&#13;&#10;                indented (level, index, &quot;{\n&quot;, dumpvisited[value])&#13;&#10;&#13;&#10;                for n,v in pairs(value) do&#13;&#10;                    dumpval (level+1, n, v, limit)&#13;&#10;                end&#13;&#10;&#13;&#10;                indented (level, &quot;}&quot;)&#13;&#10;            end&#13;&#10;        end&#13;&#10;    else&#13;&#10;        if type(value) == 'string' then&#13;&#10;            indented (level, index, string.format(&quot;{\&quot;string\&quot;: %q}&quot;,value), ',')&#13;&#10;        end&#13;&#10;&#13;&#10;        if type(value) == 'userdata' then&#13;&#10;            info = class_info (value)&#13;&#10;            indented (level, index, string.format (&quot;{\&quot;userdata\&quot;: %q}&quot;, info.name) , ',')&#13;&#10;        end&#13;&#10;&#13;&#10;        if type(value) == 'number' then&#13;&#10;            indented (level, index, string.format (&quot;{\&quot;number\&quot;: %q}&quot;,tostring(value)), ',')&#13;&#10;        end&#13;&#10;    end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function dumpvar( value, limit, name )&#13;&#10;&#13;&#10;local function dumpvar( value, limit, name )&#13;&#10;  ctrlrDebugger:write (&quot;\n::start dumpvar\n&quot;)&#13;&#10;  dumpvisited = {}&#13;&#10;  dumpval( 0, name or tostring(value), value, limit )&#13;&#10;  ctrlrDebugger:write (&quot;::end\n&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function show(file,line,before,after)&#13;&#10;&#13;&#10;--show +/-N lines of a file around line M&#13;&#10;&#13;&#10;local function show(file,line,before,after)&#13;&#10;&#13;&#10;  line   = tonumber(line   or 1)&#13;&#10;  before = tonumber(before or 10)&#13;&#10;  after  = tonumber(after  or before)&#13;&#10;&#13;&#10;  if not string.find(file,'%.') then file = file..'.lua' end&#13;&#10;&#13;&#10;  local f = io.open(file,'r')&#13;&#10;  if not f then&#13;&#10;    --{{{  try to find the file in the path&#13;&#10;&#13;&#10;    --&#13;&#10;    -- looks for a file in the package path&#13;&#10;    --&#13;&#10;    local path = package.path or LUA_PATH or ''&#13;&#10;    for c in string.gmatch (path, &quot;[&#94;;]+&quot;) do&#13;&#10;      local c = string.gsub (c, &quot;%?%.lua&quot;, file)&#13;&#10;      f = io.open (c,'r')&#13;&#10;      if f then&#13;&#10;        break&#13;&#10;      end&#13;&#10;    end&#13;&#10;&#13;&#10;    --}}}&#13;&#10;    if not f then&#13;&#10;      ctrlrDebugger:write('Cannot find '..file..'\n')&#13;&#10;      return&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  local i = 0&#13;&#10;  for l in f:lines() do&#13;&#10;    i = i + 1&#13;&#10;    if i &gt;= (line-before) then&#13;&#10;      if i &gt; (line+after) then break end&#13;&#10;      if i == line then&#13;&#10;        ctrlrDebugger:write(i..'***\t'..l..'\n')&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(i..'\t'..l..'\n')&#13;&#10;      end&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  f:close()&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function tracestack(l)&#13;&#10;&#13;&#10;local function gi( i )&#13;&#10;  return function() i=i+1 return debug.getinfo(i),i end&#13;&#10;end&#13;&#10;&#13;&#10;local function gl( level, j )&#13;&#10;  return function() j=j+1 return debug.getlocal( level, j ) end&#13;&#10;end&#13;&#10;&#13;&#10;local function gu( func, k )&#13;&#10;  return function() k=k+1 return debug.getupvalue( func, k ) end&#13;&#10;end&#13;&#10;&#13;&#10;local  traceinfo&#13;&#10;&#13;&#10;local function tracestack(l)&#13;&#10;  local l = l + 1                        --NB: +1 to get level relative to caller&#13;&#10;  traceinfo = {}&#13;&#10;  traceinfo.pausemsg = pausemsg&#13;&#10;  for ar,i in gi(l) do&#13;&#10;    table.insert( traceinfo, ar )&#13;&#10;    if ar.what ~= 'C' then&#13;&#10;      local names  = {}&#13;&#10;      local values = {}&#13;&#10;      for n,v in gl(i,0) do&#13;&#10;        if string.sub(n,1,1) ~= '(' then   --ignore internal control variables&#13;&#10;          table.insert( names, n )&#13;&#10;          table.insert( values, v )&#13;&#10;        end&#13;&#10;      end&#13;&#10;      if #names &gt; 0 then&#13;&#10;        ar.lnames  = names&#13;&#10;        ar.lvalues = values&#13;&#10;      end&#13;&#10;    end&#13;&#10;    if ar.func then&#13;&#10;      local names  = {}&#13;&#10;      local values = {}&#13;&#10;      for n,v in gu(ar.func,0) do&#13;&#10;        if string.sub(n,1,1) ~= '(' then   --ignore internal control variables&#13;&#10;          table.insert( names, n )&#13;&#10;          table.insert( values, v )&#13;&#10;        end&#13;&#10;      end&#13;&#10;      if #names &gt; 0 then&#13;&#10;        ar.unames  = names&#13;&#10;        ar.uvalues = values&#13;&#10;      end&#13;&#10;    end&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function trace()&#13;&#10;&#13;&#10;local function trace(set)&#13;&#10;  ctrlrDebugger:write (&quot;\n::start trace\n&quot;)&#13;&#10;  local mark&#13;&#10;  for level,ar in ipairs(traceinfo) do&#13;&#10;    if level == set then&#13;&#10;      mark = '***'&#13;&#10;    else&#13;&#10;      mark = ''&#13;&#10;    end&#13;&#10;    ctrlrDebugger:write('['..level..']'..mark..'\t'..(ar.name or ar.what)..' in '..ar.short_src..':'..ar.currentline..'\n')&#13;&#10;  end&#13;&#10;&#13;&#10;  ctrlrDebugger:write (&quot;::end\n&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function info()&#13;&#10;&#13;&#10;local function info()&#13;&#10;    dumpvar( traceinfo, 0, 'traceinfo' )&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  local function set_breakpoint(file, line, once)&#13;&#10;&#13;&#10;local function set_breakpoint(file, line, once)&#13;&#10;  if not breakpoints[line] then&#13;&#10;    breakpoints[line] = {}&#13;&#10;  end&#13;&#10;  if once then&#13;&#10;    breakpoints[line][file] = 1&#13;&#10;  else&#13;&#10;    breakpoints[line][file] = true&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function remove_breakpoint(file, line)&#13;&#10;&#13;&#10;local function remove_breakpoint(file, line)&#13;&#10;  if breakpoints[line] then&#13;&#10;    breakpoints[line][file] = nil&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function has_breakpoint(file, line)&#13;&#10;&#13;&#10;--allow for 'sloppy' file names&#13;&#10;--search for file and all variations walking up its directory hierachy&#13;&#10;--ditto for the file with no extension&#13;&#10;--a breakpoint can be permenant or once only, if once only its removed&#13;&#10;--after detection here, these are used for temporary breakpoints in the&#13;&#10;--debugger loop when executing the 'gotoo' command&#13;&#10;--a breakpoint on line 0 of a file means any line in that file&#13;&#10;&#13;&#10;local function has_breakpoint(file, line)&#13;&#10;  local isLine = breakpoints[line]&#13;&#10;  local isZero = breakpoints[0]&#13;&#10;  if not isLine and not isZero then return false end&#13;&#10;  local noext = string.gsub(file,&quot;(%..-)$&quot;,'',1)&#13;&#10;  if noext == file then noext = nil end&#13;&#10;  while file do&#13;&#10;    if isLine and isLine[file] then&#13;&#10;      if isLine[file] == 1 then isLine[file] = nil end&#13;&#10;      return true&#13;&#10;    end&#13;&#10;    if isZero and isZero[file] then&#13;&#10;      if isZero[file] == 1 then isZero[file] = nil end&#13;&#10;      return true&#13;&#10;    end&#13;&#10;    if IsWindows then&#13;&#10;      file = string.match(file,&quot;[:/\\](.+)$&quot;)&#13;&#10;    else&#13;&#10;      file = string.match(file,&quot;[:/](.+)$&quot;)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  while noext do&#13;&#10;    if isLine and isLine[noext] then&#13;&#10;      if isLine[noext] == 1 then isLine[noext] = nil end&#13;&#10;      return true&#13;&#10;    end&#13;&#10;    if isZero and isZero[noext] then&#13;&#10;      if isZero[noext] == 1 then isZero[noext] = nil end&#13;&#10;      return true&#13;&#10;    end&#13;&#10;    if IsWindows then&#13;&#10;      noext = string.match(noext,&quot;[:/\\](.+)$&quot;)&#13;&#10;    else&#13;&#10;      noext = string.match(noext,&quot;[:/](.+)$&quot;)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  return false&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function capture_vars(ref,level,line)&#13;&#10;&#13;&#10;local function capture_vars(ref,level,line)&#13;&#10;  --get vars, file and line for the given level relative to debug_hook offset by ref&#13;&#10;&#13;&#10;  local lvl = ref + level                --NB: This includes an offset of +1 for the call to here&#13;&#10;&#13;&#10;  --{{{  capture variables&#13;&#10;&#13;&#10;  local ar = debug.getinfo(lvl, &quot;f&quot;)&#13;&#10;  if not ar then return {},'?',0 end&#13;&#10;&#13;&#10;  local vars = {__UPVALUES__={}, __LOCALS__={}}&#13;&#10;  local i&#13;&#10;&#13;&#10;  local func = ar.func&#13;&#10;  if func then&#13;&#10;    i = 1&#13;&#10;    while true do&#13;&#10;      local name, value = debug.getupvalue(func, i)&#13;&#10;      if not name then break end&#13;&#10;      if string.sub(name,1,1) ~= '(' then  --NB: ignoring internal control variables&#13;&#10;        vars[name] = value&#13;&#10;        vars.__UPVALUES__[i] = name&#13;&#10;      end&#13;&#10;      i = i + 1&#13;&#10;    end&#13;&#10;    vars.__ENVIRONMENT__ = getfenv(func)&#13;&#10;  end&#13;&#10;&#13;&#10;  vars.__GLOBALS__ = getfenv(0)&#13;&#10;&#13;&#10;  i = 1&#13;&#10;  while true do&#13;&#10;    local name, value = debug.getlocal(lvl, i)&#13;&#10;    if not name then break end&#13;&#10;    if string.sub(name,1,1) ~= '(' then    --NB: ignoring internal control variables&#13;&#10;      vars[name] = value&#13;&#10;      vars.__LOCALS__[i] = name&#13;&#10;    end&#13;&#10;    i = i + 1&#13;&#10;  end&#13;&#10;&#13;&#10;  vars.__VARSLEVEL__ = level&#13;&#10;&#13;&#10;  if func then&#13;&#10;    --NB: Do not do this until finished filling the vars table&#13;&#10;    setmetatable(vars, { __index = getfenv(func), __newindex = getfenv(func) })&#13;&#10;  end&#13;&#10;&#13;&#10;  --NB: Do not read or write the vars table anymore else the metatable functions will get invoked!&#13;&#10;&#13;&#10;  --}}}&#13;&#10;&#13;&#10;  local file = getinfo(lvl, &quot;source&quot;)&#13;&#10;  if string.find(file, &quot;@&quot;) == 1 then&#13;&#10;    file = string.sub(file, 2)&#13;&#10;  end&#13;&#10;  if IsWindows then file = string.lower(file) end&#13;&#10;&#13;&#10;  if not line then&#13;&#10;    line = getinfo(lvl, &quot;currentline&quot;)&#13;&#10;  end&#13;&#10;&#13;&#10;  return vars,file,line&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function restore_vars(ref,vars)&#13;&#10;&#13;&#10;local function restore_vars(ref,vars)&#13;&#10;&#13;&#10;  if type(vars) ~= 'table' then return end&#13;&#10;&#13;&#10;  local level = vars.__VARSLEVEL__       --NB: This level is relative to debug_hook offset by ref&#13;&#10;  if not level then return end&#13;&#10;&#13;&#10;  level = level + ref                    --NB: This includes an offset of +1 for the call to here&#13;&#10;&#13;&#10;  local i&#13;&#10;  local written_vars = {}&#13;&#10;&#13;&#10;  i = 1&#13;&#10;  while true do&#13;&#10;    local name, value = debug.getlocal(level, i)&#13;&#10;    if not name then break end&#13;&#10;    if vars[name] and string.sub(name,1,1) ~= '(' then     --NB: ignoring internal control variables&#13;&#10;      debug.setlocal(level, i, vars[name])&#13;&#10;      written_vars[name] = true&#13;&#10;    end&#13;&#10;    i = i + 1&#13;&#10;  end&#13;&#10;&#13;&#10;  local ar = debug.getinfo(level, &quot;f&quot;)&#13;&#10;  if not ar then return end&#13;&#10;&#13;&#10;  local func = ar.func&#13;&#10;  if func then&#13;&#10;&#13;&#10;    i = 1&#13;&#10;    while true do&#13;&#10;      local name, value = debug.getupvalue(func, i)&#13;&#10;      if not name then break end&#13;&#10;      if vars[name] and string.sub(name,1,1) ~= '(' then   --NB: ignoring internal control variables&#13;&#10;        if not written_vars[name] then&#13;&#10;          debug.setupvalue(func, i, vars[name])&#13;&#10;        end&#13;&#10;        written_vars[name] = true&#13;&#10;      end&#13;&#10;      i = i + 1&#13;&#10;    end&#13;&#10;&#13;&#10;  end&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function trace_event(event, line, level)&#13;&#10;&#13;&#10;local function print_trace(level,depth,event,file,line,name)&#13;&#10;&#13;&#10;  --NB: level here is relative to the caller of trace_event, so offset by 2 to get to there&#13;&#10;  level = level + 2&#13;&#10;&#13;&#10;  local file = file or getinfo(level,'short_src')&#13;&#10;  local line = line or getinfo(level,'currentline')&#13;&#10;  local name = name or getinfo(level,'name')&#13;&#10;&#13;&#10;  local prefix = ''&#13;&#10;  if current_thread ~= 'main' then prefix = '['..tostring(current_thread)..'] ' end&#13;&#10;&#13;&#10;  ctrlrDebugger:write(prefix..&#13;&#10;           string.format('%08.2f:%02i.',os.clock(),depth)..&#13;&#10;           string.rep('.',depth%32)..&#13;&#10;           (file or '')..' ('..(line or '')..') '..&#13;&#10;           (name or '')..&#13;&#10;           ' ('..event..')\n')&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;local function trace_event(event, line, level)&#13;&#10;&#13;&#10;  if event == 'return' and trace_returns then&#13;&#10;    --note the line info for later&#13;&#10;    ret_file = getinfo(level+1,'short_src')&#13;&#10;    ret_line = getinfo(level+1,'currentline')&#13;&#10;    ret_name = getinfo(level+1,'name')&#13;&#10;  end&#13;&#10;&#13;&#10;  if event ~= 'line' then return end&#13;&#10;&#13;&#10;  local slevel = stack_level[current_thread]&#13;&#10;  local tlevel = trace_level[current_thread]&#13;&#10;&#13;&#10;  if trace_calls and slevel &gt; tlevel then&#13;&#10;    --we are now in the function called, so look back 1 level further to find the calling file and line&#13;&#10;    print_trace(level+1,slevel-1,'c',nil,nil,getinfo(level+1,'name'))&#13;&#10;  end&#13;&#10;&#13;&#10;  if trace_returns and slevel &lt; tlevel then&#13;&#10;    print_trace(level,slevel,'r',ret_file,ret_line,ret_name)&#13;&#10;  end&#13;&#10;&#13;&#10;  if trace_lines then&#13;&#10;    print_trace(level,slevel,'l')&#13;&#10;  end&#13;&#10;&#13;&#10;  trace_level[current_thread] = stack_level[current_thread]&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function report(ev, vars, file, line, idx_watch)&#13;&#10;&#13;&#10;local function report(ev, vars, file, line, idx_watch)&#13;&#10;  local vars = vars or {}&#13;&#10;  local file = file or '?'&#13;&#10;  local line = line or 0&#13;&#10;  local prefix = ''&#13;&#10;  if current_thread ~= 'main' then prefix = '['..tostring(current_thread)..'] ' end&#13;&#10;  if ev == events.STEP then&#13;&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..')\n')&#13;&#10;  elseif ev == events.BREAK then&#13;&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..') (breakpoint)\n')&#13;&#10;  elseif ev == events.WATCH then&#13;&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..')'..&quot; (watch expression &quot;..idx_watch.. &quot;: [&quot;..watches[idx_watch].exp..&quot;])\n&quot;)&#13;&#10;  elseif ev == events.SET then&#13;&#10;    --do nothing&#13;&#10;  else&#13;&#10;    ctrlrDebugger:write(prefix..&quot;Error in application: &quot;..file..&quot; line &quot;..line..&quot;\n&quot;)&#13;&#10;  end&#13;&#10;  if ev ~= events.SET then&#13;&#10;    if pausemsg and pausemsg ~= '' then ctrlrDebugger:write('Message: '..pausemsg..'\n') end&#13;&#10;    pausemsg = ''&#13;&#10;  end&#13;&#10;  return vars, file, line&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  local function debugger_loop(ev, vars, file, line, idx_watch)&#13;&#10;&#13;&#10;local function debugger_loop(ev, vars, file, line, idx_watch)&#13;&#10;&#13;&#10;  local eval_env  = vars or {}&#13;&#10;  local breakfile = file or '?'&#13;&#10;  local breakline = line or 0&#13;&#10;&#13;&#10;  local command, args&#13;&#10;&#13;&#10;  --{{{  local function getargs(spec)&#13;&#10;&#13;&#10;  --get command arguments according to the given spec from the args string&#13;&#10;  --the spec has a single character for each argument, arguments are separated&#13;&#10;  --by white space, the spec characters can be one of:&#13;&#10;  -- F for a filename    (defaults to breakfile if - given in args)&#13;&#10;  -- L for a line number (defaults to breakline if - given in args)&#13;&#10;  -- N for a number&#13;&#10;  -- V for a variable name&#13;&#10;  -- S for a string&#13;&#10;&#13;&#10;  local function getargs(spec)&#13;&#10;    local res={}&#13;&#10;    local char,arg&#13;&#10;    local ptr=1&#13;&#10;    for i=1,string.len(spec) do&#13;&#10;      char = string.sub(spec,i,i)&#13;&#10;      if     char == 'F' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '-' end&#13;&#10;        if arg == '-' then arg = breakfile end&#13;&#10;      elseif char == 'L' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '-' end&#13;&#10;        if arg == '-' then arg = breakline end&#13;&#10;        arg = tonumber(arg) or 0&#13;&#10;      elseif char == 'N' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '0' end&#13;&#10;        arg = tonumber(arg) or 0&#13;&#10;      elseif char == 'V' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '' end&#13;&#10;      elseif char == 'S' then&#13;&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#13;&#10;        if not arg or arg == '' then arg = '' end&#13;&#10;      else&#13;&#10;        arg = ''&#13;&#10;      end&#13;&#10;      table.insert(res,arg or '')&#13;&#10;    end&#13;&#10;    return unpack(res)&#13;&#10;  end&#13;&#10;&#13;&#10;  --}}}&#13;&#10;&#13;&#10;  while true do&#13;&#10;    -- io.write(&quot;[DEBUG]&gt; &quot;)&#13;&#10;    ctrlrDebugger:write(&quot;[DEBUG]&gt; &quot;)&#13;&#10;    -- local line = io.read(&quot;*line&quot;)&#13;&#10;    local line = ctrlrDebugger:read()&#13;&#10;    if line == nil then ctrlrDebugger:write('\n'); line = 'exit' end&#13;&#10;&#13;&#10;    if string.find(line, &quot;&#94;[a-z]+&quot;) then&#13;&#10;      command = string.sub(line, string.find(line, &quot;&#94;[a-z]+&quot;))&#13;&#10;      args    = string.gsub(line,&quot;&#94;[a-z]+%s*&quot;,'',1)            --strip command off line&#13;&#10;    else&#13;&#10;      command = ''&#13;&#10;    end&#13;&#10;&#13;&#10;    if command == &quot;setb&quot; then&#13;&#10;      --{{{  set breakpoint&#13;&#10;&#13;&#10;      local line, filename  = getargs('LF')&#13;&#10;      if filename ~= '' and line ~= '' then&#13;&#10;        set_breakpoint(filename,line)&#13;&#10;        ctrlrDebugger:write(&quot;Breakpoint set in file &quot;..filename..' line '..line..'\n')&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;delb&quot; then&#13;&#10;      --{{{  delete breakpoint&#13;&#10;&#13;&#10;      local line, filename = getargs('LF')&#13;&#10;      if filename ~= '' and line ~= '' then&#13;&#10;        remove_breakpoint(filename, line)&#13;&#10;        ctrlrDebugger:write(&quot;Breakpoint deleted from file &quot;..filename..' line '..line..&quot;\n&quot;)&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;delallb&quot; then&#13;&#10;      --{{{  delete all breakpoints&#13;&#10;      breakpoints = {}&#13;&#10;      ctrlrDebugger:write('All breakpoints deleted\n')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;listb&quot; then&#13;&#10;      --{{{  list breakpoints&#13;&#10;      for i, v in pairs(breakpoints) do&#13;&#10;        for ii, vv in pairs(v) do&#13;&#10;          ctrlrDebugger:write(&quot;Break at: &quot;..i..' in '..ii..'\n')&#13;&#10;        end&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;setw&quot; then&#13;&#10;      --{{{  set watch expression&#13;&#10;&#13;&#10;      if args and args ~= '' then&#13;&#10;        local func = loadstring(&quot;return(&quot; .. args .. &quot;)&quot;)&#13;&#10;        local newidx = #watches + 1&#13;&#10;        watches[newidx] = {func = func, exp = args}&#13;&#10;        ctrlrDebugger:write(&quot;Set watch exp no. &quot; .. newidx..'\n')&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;delw&quot; then&#13;&#10;      --{{{  delete watch expression&#13;&#10;&#13;&#10;      local index = tonumber(args)&#13;&#10;      if index then&#13;&#10;        watches[index] = nil&#13;&#10;        ctrlrDebugger:write(&quot;Watch expression deleted\n&quot;)&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;delallw&quot; then&#13;&#10;      --{{{  delete all watch expressions&#13;&#10;      watches = {}&#13;&#10;      ctrlrDebugger:write('All watch expressions deleted\n')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;listw&quot; then&#13;&#10;      --{{{  list watch expressions&#13;&#10;      for i, v in pairs(watches) do&#13;&#10;        ctrlrDebugger:write(&quot;Watch exp. &quot; .. i .. &quot;: &quot; .. v.exp..'\n')&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;run&quot; then&#13;&#10;      --{{{  run until breakpoint&#13;&#10;      step_into = false&#13;&#10;      step_over = false&#13;&#10;      return 'cont'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;step&quot; then&#13;&#10;      --{{{  step N lines (into functions)&#13;&#10;      local N = tonumber(args) or 1&#13;&#10;      step_over  = false&#13;&#10;      step_into  = true&#13;&#10;      step_lines = tonumber(N or 1)&#13;&#10;      return 'cont'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;over&quot; then&#13;&#10;      --{{{  step N lines (over functions)&#13;&#10;      local N = tonumber(args) or 1&#13;&#10;      step_into  = false&#13;&#10;      step_over  = true&#13;&#10;      step_lines = tonumber(N or 1)&#13;&#10;      step_level[current_thread] = stack_level[current_thread]&#13;&#10;      return 'cont'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;out&quot; then&#13;&#10;      --{{{  step N lines (out of functions)&#13;&#10;      local N = tonumber(args) or 1&#13;&#10;      step_into  = false&#13;&#10;      step_over  = true&#13;&#10;      step_lines = 1&#13;&#10;      step_level[current_thread] = stack_level[current_thread] - tonumber(N or 1)&#13;&#10;      return 'cont'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;gotoo&quot; then&#13;&#10;      --{{{  step until reach line&#13;&#10;      local line, filename = getargs('LF')&#13;&#10;      if line ~= '' then&#13;&#10;        step_over  = false&#13;&#10;        step_into  = false&#13;&#10;        if has_breakpoint(filename,line) then&#13;&#10;          return 'cont'&#13;&#10;        else&#13;&#10;          set_breakpoint(filename,line,true)&#13;&#10;          return 'cont'&#13;&#10;        end&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;set&quot; then&#13;&#10;      --{{{  set/show context level&#13;&#10;      local level = args&#13;&#10;      if level and level == '' then level = nil end&#13;&#10;      if level then return level end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;vars&quot; then&#13;&#10;      --{{{  list context variables&#13;&#10;      local depth = args&#13;&#10;      if depth and depth == '' then depth = nil end&#13;&#10;      depth = tonumber(depth) or 1&#13;&#10;      dumpvar(eval_env, depth+1, 'variables')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;glob&quot; then&#13;&#10;      --{{{  list global variables&#13;&#10;      local depth = args&#13;&#10;      if depth and depth == '' then depth = nil end&#13;&#10;      depth = tonumber(depth) or 1&#13;&#10;      dumpvar(eval_env.__GLOBALS__,depth+1,'globals')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;fenv&quot; then&#13;&#10;      --{{{  list function environment variables&#13;&#10;      local depth = args&#13;&#10;      if depth and depth == '' then depth = nil end&#13;&#10;      depth = tonumber(depth) or 1&#13;&#10;      dumpvar(eval_env.__ENVIRONMENT__,depth+1,'environment')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;ups&quot; then&#13;&#10;      --{{{  list upvalue names&#13;&#10;      dumpvar(eval_env.__UPVALUES__,2,'upvalues')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;locs&quot; then&#13;&#10;      --{{{  list locals names&#13;&#10;      dumpvar(eval_env.__LOCALS__,2,'upvalues')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;what&quot; then&#13;&#10;      --{{{  show where a function is defined&#13;&#10;      if args and args ~= '' then&#13;&#10;        local v = eval_env&#13;&#10;        local n = nil&#13;&#10;        for w in string.gmatch(args,&quot;[%w_]+&quot;) do&#13;&#10;          v = v[w]&#13;&#10;          if n then n = n..'.'..w else n = w end&#13;&#10;          if not v then break end&#13;&#10;        end&#13;&#10;        if type(v) == 'function' then&#13;&#10;          local def = debug.getinfo(v,'S')&#13;&#10;          if def then&#13;&#10;            ctrlrDebugger:write(def.what..' in '..def.short_src..' '..def.linedefined..'..'..def.lastlinedefined..'\n')&#13;&#10;          else&#13;&#10;            ctrlrDebugger:write('Cannot get info for '..v..'\n')&#13;&#10;          end&#13;&#10;        else&#13;&#10;          ctrlrDebugger:write(v..' is not a function\n')&#13;&#10;        end&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;dump&quot; then&#13;&#10;      --{{{  dump a variable&#13;&#10;      local name, depth = getargs('VN')&#13;&#10;      if name ~= '' then&#13;&#10;        if depth == '' or depth == 0 then depth = nil end&#13;&#10;        depth = tonumber(depth or 1)&#13;&#10;        local v = eval_env&#13;&#10;        local n = nil&#13;&#10;        for w in string.gmatch(name,&quot;[&#94;%.]+&quot;) do     --get everything between dots&#13;&#10;          if tonumber(w) then&#13;&#10;            v = v[tonumber(w)]&#13;&#10;          else&#13;&#10;            v = v[w]&#13;&#10;          end&#13;&#10;          if n then n = n..'.'..w else n = w end&#13;&#10;          if not v then break end&#13;&#10;        end&#13;&#10;        dumpvar(v,depth+1,n)&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;show&quot; then&#13;&#10;      --{{{  show file around a line or the current breakpoint&#13;&#10;&#13;&#10;      local line, file, before, after = getargs('LFNN')&#13;&#10;      if before == 0 then before = 10     end&#13;&#10;      if after  == 0 then after  = before end&#13;&#10;&#13;&#10;      if file ~= '' and file ~= &quot;=stdin&quot; then&#13;&#10;        show(file,line,before,after)&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write('Nothing to show\n')&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;poff&quot; then&#13;&#10;      --{{{  turn pause command off&#13;&#10;      pause_off = true&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;pon&quot; then&#13;&#10;      --{{{  turn pause command on&#13;&#10;      pause_off = false&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;tron&quot; then&#13;&#10;      --{{{  turn tracing on/off&#13;&#10;      local option = getargs('S')&#13;&#10;      trace_calls   = false&#13;&#10;      trace_returns = false&#13;&#10;      trace_lines   = false&#13;&#10;      if string.find(option,'c') then trace_calls   = true end&#13;&#10;      if string.find(option,'r') then trace_returns = true end&#13;&#10;      if string.find(option,'l') then trace_lines   = true end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;trace&quot; then&#13;&#10;      --{{{  dump a stack trace&#13;&#10;      trace(eval_env.__VARSLEVEL__)&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;info&quot; then&#13;&#10;      --{{{  dump all debug info captured&#13;&#10;      info()&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;pause&quot; then&#13;&#10;      --{{{  not allowed in here&#13;&#10;      ctrlrDebugger:write('pause() should only be used in the script you are debugging\n')&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;help&quot; then&#13;&#10;      --{{{  help&#13;&#10;      local command = getargs('S')&#13;&#10;      if command ~= '' and hints[command] then&#13;&#10;        ctrlrDebugger:write(hints[command]..'\n')&#13;&#10;      else&#13;&#10;        for _,v in pairs(hints) do&#13;&#10;          local _,_,h = string.find(v,&quot;(.+)|&quot;)&#13;&#10;          ctrlrDebugger:write(h..'\n')&#13;&#10;        end&#13;&#10;      end&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif command == &quot;exit&quot; then&#13;&#10;      --{{{  exit debugger&#13;&#10;      return 'stop'&#13;&#10;      --}}}&#13;&#10;&#13;&#10;    elseif line ~= '' then&#13;&#10;      --{{{  just execute whatever it is in the current context&#13;&#10;&#13;&#10;      --map line starting with &quot;=...&quot; to &quot;return ...&quot;&#13;&#10;      if string.sub(line,1,1) == '=' then line = string.gsub(line,'=','return ',1) end&#13;&#10;&#13;&#10;      local ok, func = pcall(loadstring,line)&#13;&#10;      if func == nil then                             --Michael.Bringmann@lsi.com&#13;&#10;        ctrlrDebugger:write(&quot;Compile error: &quot;..line..'\n')&#13;&#10;      elseif not ok then&#13;&#10;        ctrlrDebugger:write(&quot;Compile error: &quot;..func..'\n')&#13;&#10;      else&#13;&#10;        setfenv(func, eval_env)&#13;&#10;        local res = {pcall(func)}&#13;&#10;        if res[1] then&#13;&#10;          if res[2] then&#13;&#10;            table.remove(res,1)&#13;&#10;            for _,v in ipairs(res) do&#13;&#10;              ctrlrDebugger:write(tostring(v))&#13;&#10;              ctrlrDebugger:write('\t')&#13;&#10;            end&#13;&#10;            ctrlrDebugger:write('\n')&#13;&#10;          end&#13;&#10;          --update in the context&#13;&#10;          return 0&#13;&#10;        else&#13;&#10;          ctrlrDebugger:write(&quot;Run error: &quot;..res[2]..'\n')&#13;&#10;        end&#13;&#10;      end&#13;&#10;&#13;&#10;      --}}}&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  local function debug_hook(event, line, level, thread)&#13;&#10;&#13;&#10;local function debug_hook(event, line, level, thread)&#13;&#10;  if not started then debug.sethook(); coro_debugger = nil; return end&#13;&#10;  current_thread = thread or 'main'&#13;&#10;  local level = level or 2&#13;&#10;  trace_event(event,line,level)&#13;&#10;  if event == &quot;call&quot; then&#13;&#10;    stack_level[current_thread] = stack_level[current_thread] + 1&#13;&#10;  elseif event == &quot;return&quot; then&#13;&#10;    stack_level[current_thread] = stack_level[current_thread] - 1&#13;&#10;    if stack_level[current_thread] &lt; 0 then stack_level[current_thread] = 0 end&#13;&#10;  else&#13;&#10;    local vars,file,line = capture_vars(level,1,line)&#13;&#10;    local stop, ev, idx = false, events.STEP, 0&#13;&#10;    while true do&#13;&#10;      for index, value in pairs(watches) do&#13;&#10;        setfenv(value.func, vars)&#13;&#10;        local status, res = pcall(value.func)&#13;&#10;        if status and res then&#13;&#10;          ev, idx = events.WATCH, index&#13;&#10;          stop = true&#13;&#10;          break&#13;&#10;        end&#13;&#10;      end&#13;&#10;      if stop then break end&#13;&#10;      if (step_into)&#13;&#10;      or (step_over and (stack_level[current_thread] &lt;= step_level[current_thread] or stack_level[current_thread] == 0)) then&#13;&#10;        step_lines = step_lines - 1&#13;&#10;        if step_lines &lt; 1 then&#13;&#10;          ev, idx = events.STEP, 0&#13;&#10;          break&#13;&#10;        end&#13;&#10;      end&#13;&#10;      if has_breakpoint(file, line) then&#13;&#10;        ev, idx = events.BREAK, 0&#13;&#10;        break&#13;&#10;      end&#13;&#10;      return&#13;&#10;    end&#13;&#10;    if not coro_debugger then&#13;&#10;      ctrlrDebugger:write(&quot;Lua Debugger\n&quot;)&#13;&#10;      vars, file, line = report(ev, vars, file, line, idx)&#13;&#10;      ctrlrDebugger:write(&quot;Type 'help' for commands\n&quot;)&#13;&#10;      coro_debugger = true&#13;&#10;    else&#13;&#10;      vars, file, line = report(ev, vars, file, line, idx)&#13;&#10;    end&#13;&#10;    tracestack(level)&#13;&#10;    local last_next = 1&#13;&#10;    local next = 'ask'&#13;&#10;    local silent = false&#13;&#10;    while true do&#13;&#10;      if next == 'ask' then&#13;&#10;        next = debugger_loop(ev, vars, file, line, idx)&#13;&#10;      elseif next == 'cont' then&#13;&#10;        return&#13;&#10;      elseif next == 'stop' then&#13;&#10;        started = false&#13;&#10;        debug.sethook()&#13;&#10;        coro_debugger = nil&#13;&#10;        return&#13;&#10;      elseif tonumber(next) then --get vars for given level or last level&#13;&#10;        next = tonumber(next)&#13;&#10;        if next == 0 then silent = true; next = last_next else silent = false end&#13;&#10;        last_next = next&#13;&#10;        restore_vars(level,vars)&#13;&#10;        vars, file, line = capture_vars(level,next)&#13;&#10;        if not silent then&#13;&#10;          if vars and vars.__VARSLEVEL__ then&#13;&#10;            ctrlrDebugger:write('Level: '..vars.__VARSLEVEL__..'\n')&#13;&#10;          else&#13;&#10;            ctrlrDebugger:write('No level set\n')&#13;&#10;          end&#13;&#10;        end&#13;&#10;        ev = events.SET&#13;&#10;        next = 'ask'&#13;&#10;      else&#13;&#10;        ctrlrDebugger:write('Unknown command from debugger_loop: '..tostring(next)..'\n')&#13;&#10;        ctrlrDebugger:write('Stopping debugger\n')&#13;&#10;        next = 'stop'&#13;&#10;      end&#13;&#10;    end&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  coroutine.create&#13;&#10;&#13;&#10;--This function overrides the built-in for the purposes of propagating&#13;&#10;--the debug hook settings from the creator into the created coroutine.&#13;&#10;&#13;&#10;_G.coroutine.create = function(f)&#13;&#10;  local thread&#13;&#10;  local hook, mask, count = debug.gethook()&#13;&#10;  if hook then&#13;&#10;    local function thread_hook(event,line)&#13;&#10;      hook(event,line,3,thread)&#13;&#10;    end&#13;&#10;    thread = cocreate(function(...)&#13;&#10;                        stack_level[thread] = 0&#13;&#10;                        trace_level[thread] = 0&#13;&#10;                        step_level [thread] = 0&#13;&#10;                        debug.sethook(thread_hook,mask,count)&#13;&#10;                        return f(...)&#13;&#10;                      end)&#13;&#10;    return thread&#13;&#10;  else&#13;&#10;    return cocreate(f)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  coroutine.wrap&#13;&#10;&#13;&#10;--This function overrides the built-in for the purposes of propagating&#13;&#10;--the debug hook settings from the creator into the created coroutine.&#13;&#10;&#13;&#10;_G.coroutine.wrap = function(f)&#13;&#10;  local thread&#13;&#10;  local hook, mask, count = debug.gethook()&#13;&#10;  if hook then&#13;&#10;    local function thread_hook(event,line)&#13;&#10;      hook(event,line,3,thread)&#13;&#10;    end&#13;&#10;    thread = cowrap(function(...)&#13;&#10;                      stack_level[thread] = 0&#13;&#10;                      trace_level[thread] = 0&#13;&#10;                      step_level [thread] = 0&#13;&#10;                      debug.sethook(thread_hook,mask,count)&#13;&#10;                      return f(...)&#13;&#10;                    end)&#13;&#10;    return thread&#13;&#10;  else&#13;&#10;    return cowrap(f)&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;&#13;&#10;--{{{  function pause(x,l,f)&#13;&#10;&#13;&#10;--&#13;&#10;-- Starts/resumes a debug session&#13;&#10;--&#13;&#10;&#13;&#10;function pause(x,l,f)&#13;&#10;  if not f and pause_off then return end       --being told to ignore pauses&#13;&#10;  pausemsg = x or 'pause'&#13;&#10;  local lines&#13;&#10;  local src = getinfo(2,'short_src')&#13;&#10;  if l then&#13;&#10;    lines = l   --being told when to stop&#13;&#10;  elseif src == &quot;stdin&quot; then&#13;&#10;    lines = 1   --if in a console session, stop now&#13;&#10;  else&#13;&#10;    lines = 2   --if in a script, stop when get out of pause()&#13;&#10;  end&#13;&#10;  if started then&#13;&#10;    --we'll stop now 'cos the existing debug hook will grab us&#13;&#10;    step_lines = lines&#13;&#10;    step_into  = true&#13;&#10;    debug.sethook(debug_hook, &quot;crl&quot;)         --reset it in case some external agent fiddled with it&#13;&#10;  else&#13;&#10;    --set to stop when get out of pause()&#13;&#10;    trace_level[current_thread] = 0&#13;&#10;    step_level [current_thread] = 0&#13;&#10;    stack_level[current_thread] = 1&#13;&#10;    step_lines = lines&#13;&#10;    step_into  = true&#13;&#10;    started    = true&#13;&#10;    debug.sethook(debug_hook, &quot;crl&quot;)         --NB: this will cause an immediate entry to the debugger_loop&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  function dump(v,depth)&#13;&#10;&#13;&#10;--shows the value of the given variable, only really useful&#13;&#10;--when the variable is a table&#13;&#10;--see dump debug command hints for full semantics&#13;&#10;&#13;&#10;function dump(v,depth)&#13;&#10;  dumpvar(v,(depth or 1)+1,tostring(v))&#13;&#10;end&#13;&#10;&#13;&#10;--}}}&#13;&#10;--{{{  function debug.traceback(x)&#13;&#10;&#13;&#10;local _traceback = debug.traceback       --note original function&#13;&#10;&#13;&#10;--override standard function&#13;&#10;debug.traceback = function(x)&#13;&#10;  local assertmsg = _traceback(x)        --do original function&#13;&#10;  pause(x)                               --let user have a look at stuff&#13;&#10;  return assertmsg                       --carry on&#13;&#10;end&#13;&#10;&#13;&#10;_TRACEBACK = debug.traceback             --Lua 5.0 function&#13;&#10;&#13;&#10;--}}}"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000005"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="inspect" luaMethodCode="function getInspect()&#13;&#10;local inspect ={&#13;&#10;  _VERSION = 'inspect.lua 3.0.0',&#13;&#10;  _URL     = 'http://github.com/kikito/inspect.lua',&#13;&#10;  _DESCRIPTION = 'human-readable representations of tables',&#13;&#10;  _LICENSE = [[&#13;&#10;    MIT LICENSE&#13;&#10;&#13;&#10;    Copyright (c) 2013 Enrique Garc&#237;a Cota&#13;&#10;&#13;&#10;    Permission is hereby granted, free of charge, to any person obtaining a&#13;&#10;    copy of this software and associated documentation files (the&#13;&#10;    &quot;Software&quot;), to deal in the Software without restriction, including&#13;&#10;    without limitation the rights to use, copy, modify, merge, publish,&#13;&#10;    distribute, sublicense, and/or sell copies of the Software, and to&#13;&#10;    permit persons to whom the Software is furnished to do so, subject to&#13;&#10;    the following conditions:&#13;&#10;&#13;&#10;    The above copyright notice and this permission notice shall be included&#13;&#10;    in all copies or substantial portions of the Software.&#13;&#10;&#13;&#10;    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS&#13;&#10;    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&#13;&#10;    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.&#13;&#10;    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY&#13;&#10;    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,&#13;&#10;    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE&#13;&#10;    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#13;&#10;  ]]&#13;&#10;}&#13;&#10;&#13;&#10;inspect.KEY       = setmetatable({}, {__tostring = function() return 'inspect.KEY' end})&#13;&#10;inspect.METATABLE = setmetatable({}, {__tostring = function() return 'inspect.METATABLE' end})&#13;&#10;&#13;&#10;-- Apostrophizes the string if it has quotes, but not aphostrophes&#13;&#10;-- Otherwise, it returns a regular quoted string&#13;&#10;local function smartQuote(str)&#13;&#10;  if str:match('&quot;') and not str:match(&quot;'&quot;) then&#13;&#10;    return &quot;'&quot; .. str .. &quot;'&quot;&#13;&#10;  end&#13;&#10;  return '&quot;' .. str:gsub('&quot;', '\\&quot;') .. '&quot;'&#13;&#10;end&#13;&#10;&#13;&#10;local controlCharsTranslation = {&#13;&#10;  [&quot;\a&quot;] = &quot;\\a&quot;,  [&quot;\b&quot;] = &quot;\\b&quot;, [&quot;\f&quot;] = &quot;\\f&quot;,  [&quot;\n&quot;] = &quot;\\n&quot;,&#13;&#10;  [&quot;\r&quot;] = &quot;\\r&quot;,  [&quot;\t&quot;] = &quot;\\t&quot;, [&quot;\v&quot;] = &quot;\\v&quot;&#13;&#10;}&#13;&#10;&#13;&#10;local function escape(str)&#13;&#10;  local result = str:gsub(&quot;\\&quot;, &quot;\\\\&quot;):gsub(&quot;(%c)&quot;, controlCharsTranslation)&#13;&#10;  return result&#13;&#10;end&#13;&#10;&#13;&#10;local function isIdentifier(str)&#13;&#10;  return type(str) == 'string' and str:match( &quot;&#94;[_%a][_%a%d]*$&quot; )&#13;&#10;end&#13;&#10;&#13;&#10;local function isSequenceKey(k, length)&#13;&#10;  return type(k) == 'number'&#13;&#10;     and 1 &lt;= k&#13;&#10;     and k &lt;= length&#13;&#10;     and math.floor(k) == k&#13;&#10;end&#13;&#10;&#13;&#10;local defaultTypeOrders = {&#13;&#10;  ['number']   = 1, ['boolean']  = 2, ['string'] = 3, ['table'] = 4,&#13;&#10;  ['function'] = 5, ['userdata'] = 6, ['thread'] = 7&#13;&#10;}&#13;&#10;&#13;&#10;local function sortKeys(a, b)&#13;&#10;  local ta, tb = type(a), type(b)&#13;&#10;&#13;&#10;  -- strings and numbers are sorted numerically/alphabetically&#13;&#10;  if ta == tb and (ta == 'string' or ta == 'number') then return a &lt; b end&#13;&#10;&#13;&#10;  local dta, dtb = defaultTypeOrders[ta], defaultTypeOrders[tb]&#13;&#10;  -- Two default types are compared according to the defaultTypeOrders table&#13;&#10;  if dta and dtb then return defaultTypeOrders[ta] &lt; defaultTypeOrders[tb]&#13;&#10;  elseif dta     then return true  -- default types before custom ones&#13;&#10;  elseif dtb     then return false -- custom types after default ones&#13;&#10;  end&#13;&#10;&#13;&#10;  -- custom types are sorted out alphabetically&#13;&#10;  return ta &lt; tb&#13;&#10;end&#13;&#10;&#13;&#10;local function getNonSequentialKeys(t)&#13;&#10;  local keys, length = {}, #t&#13;&#10;  for k,_ in pairs(t) do&#13;&#10;    if not isSequenceKey(k, length) then table.insert(keys, k) end&#13;&#10;  end&#13;&#10;  table.sort(keys, sortKeys)&#13;&#10;  return keys&#13;&#10;end&#13;&#10;&#13;&#10;local function getToStringResultSafely(t, mt)&#13;&#10;  local __tostring = type(mt) == 'table' and rawget(mt, '__tostring')&#13;&#10;  local str, ok&#13;&#10;  if type(__tostring) == 'function' then&#13;&#10;    ok, str = pcall(__tostring, t)&#13;&#10;    str = ok and str or 'error: ' .. tostring(str)&#13;&#10;  end&#13;&#10;  if type(str) == 'string' and #str &gt; 0 then return str end&#13;&#10;end&#13;&#10;&#13;&#10;local maxIdsMetaTable = {&#13;&#10;  __index = function(self, typeName)&#13;&#10;    rawset(self, typeName, 0)&#13;&#10;    return 0&#13;&#10;  end&#13;&#10;}&#13;&#10;&#13;&#10;local idsMetaTable = {&#13;&#10;  __index = function (self, typeName)&#13;&#10;    local col = setmetatable({}, {__mode = &quot;kv&quot;})&#13;&#10;    rawset(self, typeName, col)&#13;&#10;    return col&#13;&#10;  end&#13;&#10;}&#13;&#10;&#13;&#10;local function countTableAppearances(t, tableAppearances)&#13;&#10;  tableAppearances = tableAppearances or setmetatable({}, {__mode = &quot;k&quot;})&#13;&#10;&#13;&#10;  if type(t) == 'table' then&#13;&#10;    if not tableAppearances[t] then&#13;&#10;      tableAppearances[t] = 1&#13;&#10;      for k,v in pairs(t) do&#13;&#10;        countTableAppearances(k, tableAppearances)&#13;&#10;        countTableAppearances(v, tableAppearances)&#13;&#10;      end&#13;&#10;      countTableAppearances(getmetatable(t), tableAppearances)&#13;&#10;    else&#13;&#10;      tableAppearances[t] = tableAppearances[t] + 1&#13;&#10;    end&#13;&#10;  end&#13;&#10;&#13;&#10;  return tableAppearances&#13;&#10;end&#13;&#10;&#13;&#10;local copySequence = function(s)&#13;&#10;  local copy, len = {}, #s&#13;&#10;  for i=1, len do copy[i] = s[i] end&#13;&#10;  return copy, len&#13;&#10;end&#13;&#10;&#13;&#10;local function makePath(path, ...)&#13;&#10;  local keys = {...}&#13;&#10;  local newPath, len = copySequence(path)&#13;&#10;  for i=1, #keys do&#13;&#10;    newPath[len + i] = keys[i]&#13;&#10;  end&#13;&#10;  return newPath&#13;&#10;end&#13;&#10;&#13;&#10;local function processRecursive(process, item, path)&#13;&#10;  if item == nil then return nil end&#13;&#10;&#13;&#10;  local processed = process(item, path)&#13;&#10;  if type(processed) == 'table' then&#13;&#10;    local processedCopy = {}&#13;&#10;    local processedKey&#13;&#10;&#13;&#10;    for k,v in pairs(processed) do&#13;&#10;      processedKey = processRecursive(process, k, makePath(path, k, inspect.KEY))&#13;&#10;      if processedKey ~= nil then&#13;&#10;        processedCopy[processedKey] = processRecursive(process, v, makePath(path, processedKey))&#13;&#10;      end&#13;&#10;    end&#13;&#10;&#13;&#10;    local mt  = processRecursive(process, getmetatable(processed), makePath(path, inspect.METATABLE))&#13;&#10;    setmetatable(processedCopy, mt)&#13;&#10;    processed = processedCopy&#13;&#10;  end&#13;&#10;  return processed&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;-------------------------------------------------------------------&#13;&#10;&#13;&#10;local Inspector = {}&#13;&#10;local Inspector_mt = {__index = Inspector}&#13;&#10;&#13;&#10;function Inspector:puts(...)&#13;&#10;  local args   = {...}&#13;&#10;  local buffer = self.buffer&#13;&#10;  local len    = #buffer&#13;&#10;  for i=1, #args do&#13;&#10;    len = len + 1&#13;&#10;    buffer[len] = tostring(args[i])&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:down(f)&#13;&#10;  self.level = self.level + 1&#13;&#10;  f()&#13;&#10;  self.level = self.level - 1&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:tabify()&#13;&#10;  self:puts(self.newline, string.rep(self.indent, self.level))&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:alreadyVisited(v)&#13;&#10;  return self.ids[type(v)][v] ~= nil&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:getId(v)&#13;&#10;  local tv = type(v)&#13;&#10;  local id = self.ids[tv][v]&#13;&#10;  if not id then&#13;&#10;    id              = self.maxIds[tv] + 1&#13;&#10;    self.maxIds[tv] = id&#13;&#10;    self.ids[tv][v] = id&#13;&#10;  end&#13;&#10;  return id&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:putKey(k)&#13;&#10;  if isIdentifier(k) then return self:puts(k) end&#13;&#10;  self:puts(&quot;[&quot;)&#13;&#10;  self:putValue(k)&#13;&#10;  self:puts(&quot;]&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:putTable(t)&#13;&#10;  if t == inspect.KEY or t == inspect.METATABLE then&#13;&#10;    self:puts(tostring(t))&#13;&#10;  elseif self:alreadyVisited(t) then&#13;&#10;    self:puts('&lt;table ', self:getId(t), '&gt;')&#13;&#10;  elseif self.level &gt;= self.depth then&#13;&#10;    self:puts('{...}')&#13;&#10;  else&#13;&#10;    if self.tableAppearances[t] &gt; 1 then self:puts('&lt;', self:getId(t), '&gt;') end&#13;&#10;&#13;&#10;    local nonSequentialKeys = getNonSequentialKeys(t)&#13;&#10;    local length            = #t&#13;&#10;    local mt                = getmetatable(t)&#13;&#10;    local toStringResult    = getToStringResultSafely(t, mt)&#13;&#10;&#13;&#10;    self:puts('{')&#13;&#10;    self:down(function()&#13;&#10;      if toStringResult then&#13;&#10;        self:puts(' -- ', escape(toStringResult))&#13;&#10;        if length &gt;= 1 then self:tabify() end&#13;&#10;      end&#13;&#10;&#13;&#10;      local count = 0&#13;&#10;      for i=1, length do&#13;&#10;        if count &gt; 0 then self:puts(',') end&#13;&#10;        self:puts(' ')&#13;&#10;        self:putValue(t[i])&#13;&#10;        count = count + 1&#13;&#10;      end&#13;&#10;&#13;&#10;      for _,k in ipairs(nonSequentialKeys) do&#13;&#10;        if count &gt; 0 then self:puts(',') end&#13;&#10;        self:tabify()&#13;&#10;        self:putKey(k)&#13;&#10;        self:puts(' = ')&#13;&#10;        self:putValue(t[k])&#13;&#10;        count = count + 1&#13;&#10;      end&#13;&#10;&#13;&#10;      if mt then&#13;&#10;        if count &gt; 0 then self:puts(',') end&#13;&#10;        self:tabify()&#13;&#10;        self:puts('&lt;metatable&gt; = ')&#13;&#10;        self:putValue(mt)&#13;&#10;      end&#13;&#10;    end)&#13;&#10;&#13;&#10;    if #nonSequentialKeys &gt; 0 or mt then -- result is multi-lined. Justify closing }&#13;&#10;      self:tabify()&#13;&#10;    elseif length &gt; 0 then -- array tables have one extra space before closing }&#13;&#10;      self:puts(' ')&#13;&#10;    end&#13;&#10;&#13;&#10;    self:puts('}')&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;function Inspector:putValue(v)&#13;&#10;  local tv = type(v)&#13;&#10;&#13;&#10;  if tv == 'string' then&#13;&#10;    self:puts(smartQuote(escape(v)))&#13;&#10;  elseif tv == 'number' or tv == 'boolean' or tv == 'nil' then&#13;&#10;    self:puts(tostring(v))&#13;&#10;  elseif tv == 'table' then&#13;&#10;    self:putTable(v)&#13;&#10;  else&#13;&#10;    self:puts('&lt;',tv,' ',self:getId(v),'&gt;')&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;-------------------------------------------------------------------&#13;&#10;&#13;&#10;function inspect.inspect(root, options)&#13;&#10;  options       = options or {}&#13;&#10;&#13;&#10;  local depth   = options.depth   or math.huge&#13;&#10;  local newline = options.newline or '\n'&#13;&#10;  local indent  = options.indent  or '  '&#13;&#10;  local process = options.process&#13;&#10;&#13;&#10;  if process then&#13;&#10;    root = processRecursive(process, root, {})&#13;&#10;  end&#13;&#10;&#13;&#10;  local inspector = setmetatable({&#13;&#10;    depth            = depth,&#13;&#10;    buffer           = {},&#13;&#10;    level            = 0,&#13;&#10;    ids              = setmetatable({}, idsMetaTable),&#13;&#10;    maxIds           = setmetatable({}, maxIdsMetaTable),&#13;&#10;    newline          = newline,&#13;&#10;    indent           = indent,&#13;&#10;    tableAppearances = countTableAppearances(root)&#13;&#10;  }, Inspector_mt)&#13;&#10;&#13;&#10;  inspector:putValue(root)&#13;&#10;&#13;&#10;  return table.concat(inspector.buffer)&#13;&#10;end&#13;&#10;&#13;&#10;setmetatable(inspect, { __call = function(_, ...) return inspect.inspect(...) end })&#13;&#10;&#13;&#10;return inspect&#13;&#10;end&#13;&#10;&#13;&#10;inspect = getInspect()"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000006"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethod luaMethodName="onMidiMessage" luaMethodCode="--&#10;-- Called when a panel receives a midi message (does not need to match any modulator mask)&#10;-- @midi   http://ctrlr.org/api/class_ctrlr_midi_message.html&#10;--&#10;&#10;onMidiMessage = function(midi)&#13;&#10;&#9;-- Blink Midi In Led&#13;&#10;&#9;blinkMidiInLed()&#13;&#10;&#9;local messageType = midi:getType()&#13;&#10;&#9;--console(&quot;Message type&quot;..messageType)&#13;&#10;&#9;if messageType == 5 then&#13;&#10;&#9;&#9;local midiData = midi:getData()&#13;&#10;&#9;&#9;if midiData:getSize() &gt;= 13 &#13;&#10;&#9;&#9;&#9;and midiData:getByte(0) == 0xF0&#13;&#10;&#9;&#9;&#9;and midiData:getByte(1) == 0x00&#13;&#10;&#9;&#9;&#9;and midiData:getByte(2) == 0x20&#13;&#10;&#9;&#9;&#9;and midiData:getByte(3) == 0x44&#13;&#10;&#9;&#9;&#9;and midiData:getByte(4) == 0x00&#13;&#10;&#9;&#9;&#9;and midiData:getByte(5) == 0x10&#13;&#10;&#9;&#9;&#9;and midiData:getByte(6) == 0x00&#13;&#10;&#9;&#9;&#9;and ((midiData:getByte(7) == 0x06) or (midiData:getByte(7) == 0x0A))&#13;&#10;&#9;&#9;&#9;and midiData:getByte(8) == 0x00 then&#13;&#10;&#9;&#9;&#9;-- Detect command type&#13;&#10;&#9;&#9;&#9;commandType = midiData:getByte(9)&#13;&#10;&#9;&#9;&#9;if commandType == 0x04 then&#13;&#10;&#9;&#9;&#9;&#9;-- Parameter change&#13;&#10;&#9;&#9;&#9;&#9;--console(&quot;Param change&quot;)&#13;&#10;&#9;&#9;&#9;&#9;paramType = midiData:getByte(10)&#13;&#10;&#9;&#9;&#9;&#9;--console(&quot;ParamType=&quot;..paramType)&#13;&#10;&#9;&#9;&#9;&#9;if paramType == 0x01 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Modulation Intensity&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;modulationIntensity&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x04 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Delay time&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setDelayTime(value,true,true,false,false)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x09 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;GLobal mute&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;globalMute&quot;,value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x0C then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Mod type&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setModulation(value,false,false)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x15 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Preamp bass&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;preampBass&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x16 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Preamp mid&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;preampMid&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x17 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Preamp Treble&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;preampTreble&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x18 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Power Amp Resonance&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;powerResonance&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x19 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Power Amp Presence&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;powerPresence&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x1B then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Delay Feedback&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;delayFeedback&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x1C then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Delay level&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;delayLevel&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x1D then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Reverb level&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;reverbLevel&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x1E then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Power soak&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;powerSoak&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x34 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;GLobal mute&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;modulationStatus&quot;,value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x35 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;GLobal mute&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;delayStatus&quot;,value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x36 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;GLobal mute&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;reverbStatus&quot;,value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x37 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Fx Loop&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;fxLoopStatus&quot;,value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x38 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Channel Gain&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;channelGain&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x39 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Channel Volume&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;channelVolume&quot;)&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x3F then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Noise Gate&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;noiseGateStatus&quot;,value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;elseif paramType == 0x40 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Channel Boost&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;channelBoost&quot;,value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator = nil&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;msb = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;&#9;lsb = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;&#9;value = convertToInt(msb,lsb)&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Value = &quot;..value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator:setValue(value,true,true)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- console(&quot;Modulator not found for paramType = &quot;..paramType)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;local paramName = controllers[paramType]&#13;&#10;&#9;&#9;&#9;&#9;if paramName ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;if value ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Update edit buffer&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;editBuffer[paramName]=value&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- In library mode we update current preset too&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if presets[currentPresetNumber] ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;presets[currentPresetNumber][paramName]=value&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if not libraryDirty then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;libraryDirty = true&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;setLibraryFileName()&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;local presetModified = true&#13;&#10;&#9;&#9;&#9;&#9;&#9;if (paramName == &quot;resonance&quot;) or (paramName == &quot;presence&quot;) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if not isLibrary and (powerEqGlobal == 1) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- Preset is not modified since we are in glabal mode&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;presetModified = false&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;if (paramName == &quot;powerSoak&quot;) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (isLibrary or isGm40()) and (powerSoakGlobal == 1) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- Preset is not modified since we are in glabal mode&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;presetModified = false&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;if presetModified then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Set modified status&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;setModified(true)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Highligt modulator&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if compareMode then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;highlight(paramName)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;elseif commandType == 0x40 then&#13;&#10;&#9;&#9;&#9;&#9;--console(&quot;Preset dump&quot;)&#13;&#10; &#9;&#9;&#9;&#9;--local now = Time.getMillisecondCounterHiRes()&#13;&#10;&#9;&#9;&#9;&#9;--if now &gt; (lastStateChangeTime + 10000) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- reset state&#13;&#10;&#9;&#9;&#9;&#9;--&#9;state = 0&#13;&#10;&#9;&#9;&#9;&#9;--end&#13;&#10;&#9;&#9;&#9;&#9;local preset = readPreset(midiData)&#13;&#10;&#9;&#9;&#9;&#9;if state == 1 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Request for a full presets dump (wait 500 ms to give time for the GM36 to boot)&#13;&#10;&#9;&#9;&#9;&#9;&#9;state = 2&#13;&#10;&#9;&#9;&#9;&#9;&#9;timer:startTimer (74, 1000)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;elseif commandType == 0x41 then&#13;&#10;&#9;&#9;&#9;&#9;if midiData:getSize() &gt;= 4108 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- All presets dump (header = 10 bytes, cks + F7 = 2 bytes, 128 * 32 bytes per preset)&#13;&#10;&#9;&#9;&#9;&#9;&#9;local preset&#13;&#10;&#9;&#9;&#9;&#9;&#9;local startIndex = 10&#13;&#10;&#9;&#9;&#9;&#9;&#9;for i=1,128 do&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;preset = readPresetBuffer(i,midiData,startIndex,true)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;startIndex = startIndex + 32&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;setSynced(true)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;if state == 2 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Go to idle mode&#13;&#10;&#9;&#9;&#9;&#9;&#9;state = 3&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;elseif commandType == 0x4F then&#13;&#10;&#9;&#9;&#9;&#9;-- Ack or Nack&#13;&#10;&#9;&#9;&#9;&#9;local status = midiData:getByte(10)&#13;&#10;&#9;&#9;&#9;&#9;if status == 0x7F then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Ack&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Ack received...&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;PTSI =&quot;..presetsToSendIndex)&#13;&#10;&#9;&#9;&#9;&#9;&#9;if presetsToSend ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;presetsToSendIndex = presetsToSendIndex+1&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;updateProgressWindow()&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if presetsToSendIndex &lt;= presetsToSendSize then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;sendPresetBufferDump(presetsToSend[presetsToSendIndex],false)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;presetsToSend = nil&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;presetsToSendIndex = 0&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;presetsToSendSize = 0&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;else &#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Nak =&gt; try to send again&#13;&#10;&#9;&#9;&#9;&#9;&#9;if presetsToSend ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if presetsToSendIndex &lt;= presetsToSendSize then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;sendPresetBufferDump(presetsToSend[presetsToSendIndex],false)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;--console(&quot;Something went wrong !...&quot;)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;elseif commandType == 0x50 then&#13;&#10;&#9;&#9;&#9;&#9;-- System config dump&#13;&#10;&#9;&#9;&#9;&#9;-- Detect amp type&#13;&#10;&#9;&#9;&#9;&#9;local ampId = midiData:getByte(7)&#13;&#10;&#9;&#9;&#9;&#9;if ampId == 0x0A then&#13;&#10;&#9;&#9;&#9;&#9;&#9;switchAmpType(&quot;GM40&quot;)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;switchAmpType(&quot;GM36&quot;)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;local midi = midiData:getByte(10)&#13;&#10;&#9;&#9;&#9;&#9;mutes = midiData:getByte(11)&#13;&#10;&#9;&#9;&#9;&#9;local mode = midiData:getByte(12)&#13;&#10;&#9;&#9;&#9;&#9;local configState = midiData:getByte(13)&#13;&#10;&#9;&#9;&#9;&#9;omniMode=(math.floor(midi/16) % 2)&#13;&#10;&#9;&#9;&#9;&#9;midiChannel=((midi % 16)+1)&#13;&#10;&#9;&#9;&#9;&#9;powerEqGlobal=(math.floor(mode/4) % 2)&#13;&#10;&#9;&#9;&#9;&#9;if isGm40() then&#13;&#10;&#9;&#9;&#9;&#9;&#9;powerSoakGlobal=(math.floor(mode/32) % 2)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;midiLearn=(mode % 2)&#13;&#10;&#9;&#9;&#9;&#9;speakerConnected=(configState % 2)&#13;&#10;&#9;&#9;&#9;&#9;modified=(math.floor(configState/2) % 2)&#13;&#10;&#9;&#9;&#9;&#9;fxAccess=(math.floor(configState/4) % 2)&#13;&#10;&#9;&#9;&#9;&#9;-- Update modulators&#13;&#10;&#9;&#9;&#9;&#9;panel:getModulator(&quot;omniMode&quot;):setValue(omniMode,true,true)&#10;&#9;&#9;&#9;&#9;panel:getModulator(&quot;midiChannel&quot;):setValue(midiChannel,true,true)&#10;&#9;&#9;&#9;&#9;panel:getModulator(&quot;powerEqMode&quot;):setValue(powerEqGlobal,true,true)&#13;&#10;&#9;&#9;&#9;&#9;if isGm40() then&#13;&#10;&#9;&#9;&#9;&#9;&#9;panel:getModulator(&quot;powerSoakMode&quot;):setValue(powerSoakGlobal,true,true)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;-- Process mutes&#13;&#10;&#9;&#9;&#9;&#9;local fxMute = (mutes % 2)&#13;&#10;&#9;&#9;&#9;&#9;local delayMute = (math.floor(mutes/2) % 2)&#13;&#10;&#9;&#9;&#9;&#9;local reverbMute = (math.floor(mutes/4) % 2)&#13;&#10;&#9;&#9;&#9;&#9;local globalMute = (math.floor(mutes/8) % 2)&#13;&#10;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;globalMute&quot;,globalMute)&#13;&#10;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;modulationStatus&quot;,opposite(fxMute))&#13;&#10;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;delayStatus&quot;,opposite(delayMute))&#13;&#10;&#9;&#9;&#9;&#9;setStatusModulatorValue(&quot;reverbStatus&quot;,opposite(reverbMute))&#13;&#10;&#9;&#9;&#9;&#9;-- Send id request now&#13;&#10;&#9;&#9;&#9;&#9;--sendIdRequest()&#10;&#9;&#9;&#9;&#9;if state == 0 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Request edit buffer after config on connection start&#13;&#10;&#9;&#9;&#9;&#9;&#9;state = 1&#13;&#10;&#9;&#9;&#9;&#9;&#9;sendEditBufferRequest()&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;-- We are connected&#13;&#10;&#9;&#9;&#9;setConnected(true)&#13;&#10;&#9;&#9;elseif midiData:getSize() &gt;= 17 &#13;&#10;&#9;&#9;&#9;and midiData:getByte(0) == 0xF0&#13;&#10;&#9;&#9;&#9;and midiData:getByte(1) == 0x7E&#13;&#10;&#9;&#9;&#9;and midiData:getByte(2) == 0x00&#13;&#10;&#9;&#9;&#9;and midiData:getByte(3) == 0x06&#13;&#10;&#9;&#9;&#9;and midiData:getByte(4) == 0x02&#13;&#10;&#9;&#9;&#9;and midiData:getByte(5) == 0x00&#13;&#10;&#9;&#9;&#9;and midiData:getByte(6) == 0x20&#13;&#10;&#9;&#9;&#9;and midiData:getByte(7) == 0x44&#13;&#10;&#9;&#9;&#9;and midiData:getByte(8) == 0x10&#13;&#10;&#9;&#9;&#9;and midiData:getByte(9) == 0x00&#13;&#10;&#9;&#9;&#9;and midiData:getByte(10) == 0x06&#13;&#10;&#9;&#9;&#9;and midiData:getByte(11) == 0x00 then&#13;&#10;&#9;&#9;&#9;-- Id reply&#13;&#10;&#9;&#9;&#9;setConnected(true)&#13;&#10;&#9;&#9;&#9;local fw1 = midiData:getByte(12) - 0x30&#13;&#10;&#9;&#9;&#9;local fw2 = midiData:getByte(14) - 0x30&#13;&#10;&#9;&#9;&#9;local fw3 = midiData:getByte(15) - 0x30&#13;&#10;&#9;&#9;&#9;firmwareVersion = &quot;&quot;..fw1..&quot;.&quot;..fw2..fw3&#13;&#10;&#9;&#9;&#9;--console(&quot;FW Version = &quot;..firmwareVersion)&#13;&#10;&#9;&#9;&#9;panel:getComponent(&quot;firmwareVersion&quot;):setComponentText(firmwareVersion)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;readPreset = function(midiData)&#13;&#10;&#9;local bankLsb = midiData:getByte(10)&#13;&#10;&#9;local bankMsb = midiData:getByte(11)&#13;&#10;&#9;local number&#13;&#10;&#9;local updateEditBuffer = false&#13;&#10;&#9;local updatePrests = true&#13;&#10;&#9;local isEditBuffer = false&#13;&#10;&#9;if bankLsb == 0x7F and bankMsb == 0x7F then&#13;&#10;&#9;&#9;-- Edit buffer&#13;&#10;&#9;&#9;isEditBuffer = true&#13;&#10;&#9;&#9;if not connected then&#13;&#10;&#9;&#9;&#9;-- First connection =&gt; get amp preset number&#13;&#10; &#9;&#9;&#9;number = midiData:getByte(12)+1&#13;&#10;&#9;&#9;&#9;currentAmpPresetNumber = sanitizePresetNumber(number)&#13;&#10;&#9;&#9;&#9;updateEditBuffer = true&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;-- Edit buffer =&gt; keep current preset numner&#13;&#10; &#9;&#9;&#9;number = currentPresetNumber&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Don't update presets for edit buffer&#13;&#10;&#9;&#9;updatePrests = false&#13;&#10;&#9;else&#13;&#10;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;-- We receive a preset number while in library mode (use of the FSM) =&gt; switch to amp mode&#13;&#10;&#9;&#9;&#9;setPresetMode(1,false)&#13;&#10;&#9;&#9;&#9;changePresetMode(false,false)&#13;&#10;&#9;&#9;end&#13;&#10; &#9;&#9;number = midiData:getByte(12)+1&#13;&#10;&#9;&#9;updateEditBuffer = true&#13;&#10;&#9;end&#13;&#10;&#9;local preset = readPresetBuffer(number,midiData,13,updatePrests)&#13;&#10;&#9;if updateEditBuffer then&#13;&#10;&#9;&#9;-- Update edit buffer&#13;&#10;&#9;&#9;editBuffer = copyPreset(preset)&#13;&#10;&#9;&#9;originalBuffer = copyPreset(preset)&#13;&#10;&#9;end&#13;&#10;&#9;if isEditBuffer then&#13;&#10;&#9;&#9;if isGm40() and (powerSoakGlobal == 1) then&#13;&#10;&#9;&#9;&#9;-- Get globalPowerSoakValue from edit buffer&#13;&#10;&#9;&#9;&#9;globalPowerSoakValue = preset[&quot;powerSoak&quot;]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;loadPreset(preset,updateEditBuffer)&#13;&#10;&#9;return preset&#13;&#10;end&#13;&#10;&#13;&#10;readPresetBuffer = function(number,midiData,startIndex,updatePresets)&#13;&#10;&#9;local preset = {}&#13;&#10;&#9;-- Number&#13;&#10;&#9;preset[&quot;number&quot;]=number&#13;&#10;&#9;-- Restore name&#13;&#10;&#9;preset[&quot;name&quot;]=computePresetName(number)&#13;&#10;&#9;-- Gain&#13;&#10;&#9;local value = convertToInt(midiData:getByte(startIndex),midiData:getByte(startIndex+1))&#13;&#10;&#9;preset[&quot;gain&quot;]=value&#13;&#10;&#9;-- Bass&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+2),midiData:getByte(startIndex+3))&#13;&#10;&#9;preset[&quot;bass&quot;]=value&#13;&#10;&#9;-- Mid&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+4),midiData:getByte(startIndex+5))&#13;&#10;&#9;preset[&quot;mid&quot;]=value&#13;&#10;&#9;-- Volume&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+6),midiData:getByte(startIndex+7))&#13;&#10;&#9;preset[&quot;volume&quot;]=value&#13;&#10;&#9;-- Treble&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+8),midiData:getByte(startIndex+9))&#13;&#10;&#9;preset[&quot;treble&quot;]=value&#13;&#10;&#9;-- Resonance&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+10),midiData:getByte(startIndex+11))&#13;&#10;&#9;preset[&quot;resonance&quot;]=value&#13;&#10;&#9;-- Presence&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+12),midiData:getByte(startIndex+13))&#13;&#10;&#9;preset[&quot;presence&quot;]=value&#13;&#10;&#9;-- Reverb&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+14),midiData:getByte(startIndex+15))&#13;&#10;&#9;preset[&quot;reverb&quot;]=value&#13;&#10;&#9;-- Delay level&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+16),midiData:getByte(startIndex+17))&#13;&#10;&#9;preset[&quot;delayLevel&quot;]=value&#13;&#10;&#9;-- Delay Time&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+18),midiData:getByte(startIndex+19))&#13;&#10;&#9;preset[&quot;delayTime&quot;]=value&#13;&#10;&#9;-- Delay Feedback&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+20),midiData:getByte(startIndex+21))&#13;&#10;&#9;preset[&quot;delayFeedback&quot;]=value&#13;&#10;&#9;-- Mod intensity&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+22),midiData:getByte(startIndex+23))&#13;&#10;&#9;preset[&quot;modIntensity&quot;]=value&#13;&#10;&#9;-- This is global setting, not preset&#13;&#10;&#9;-- setStatusModulatorValue(&quot;modulationStatus&quot;,value)&#13;&#10;&#9;-- Mod type&#13;&#10;&#9;value = convertToInt(midiData:getByte(startIndex+24),midiData:getByte(startIndex+25))&#13;&#10;&#9;preset[&quot;modType&quot;]=value&#13;&#10;&#9;local qqByte = midiData:getByte(startIndex+30)&#13;&#10;&#9;local rrByte = midiData:getByte(startIndex+31)&#13;&#10;&#9;-- Preamp channel&#13;&#10;&#9;value = (rrByte % 4) * 42&#13;&#10;&#9;preset[&quot;channelType&quot;]=value&#13;&#10;&#9;-- Pream boost&#13;&#10;&#9;value = (math.floor(rrByte/4) % 2) * 127&#13;&#10;&#9;preset[&quot;channelBoost&quot;]=value&#13;&#10;&#9;-- Fx loop&#13;&#10;&#9;value = (math.floor(rrByte/8) % 2) * 127&#13;&#10;&#9;preset[&quot;fxLoop&quot;]=value&#13;&#10;&#9;-- Power soak&#13;&#10;&#9;value = (math.floor(rrByte/16) % 8) * 31&#13;&#10;&#9;preset[&quot;powerSoak&quot;]=value&#13;&#10;&#9;-- Noise Gate&#13;&#10;&#9;value = (qqByte % 2) * 127&#13;&#10;&#9;preset[&quot;noiseGate&quot;]=value&#13;&#10;&#9;if updatePresets then&#13;&#10;&#9;&#9;presets[number]=preset&#13;&#10;&#9;end&#13;&#10;&#9;return preset&#13;&#10;end&#13;&#10;&#13;&#10;computePresetName = function(presetNumber)&#13;&#10;&#9;local result&#13;&#10;&#9;if presets[presetNumber] ~= nil and presets[presetNumber][&quot;name&quot;] ~= nil then&#13;&#10;&#9;&#9;result = presets[presetNumber][&quot;name&quot;]&#13;&#10;&#9;else&#13;&#10;&#9;&#9;result = &quot;Preset &quot;..presetNumber&#13;&#10;&#9;end&#13;&#10;&#9;return result&#13;&#10;end&#13;&#10;&#13;&#10;loadPreset = function(preset,setNumber)&#13;&#10;&#9;-- Sanity check&#13;&#10;&#9;if preset == nil then return end&#13;&#10;&#9;-- Preset Number&#13;&#10;&#9;local value = preset[&quot;number&quot;]&#13;&#10;&#9;--console(&quot;Load preset &quot;..value)&#13;&#10;&#9;if setNumber then&#13;&#10;&#9;&#9;setPresetNumber(value)&#13;&#10;&#9;end&#13;&#10;&#9;-- Gain&#13;&#10;&#9;value = preset[&quot;gain&quot;]&#13;&#10;&#9;setModulatorValue(&quot;channelGain&quot;,value,false,true)&#13;&#10;&#9;-- Bass&#13;&#10;&#9;value = preset[&quot;bass&quot;]&#13;&#10;&#9;setModulatorValue(&quot;preampBass&quot;,value,false,true)&#13;&#10;&#9;-- Mid&#13;&#10;&#9;value = preset[&quot;mid&quot;]&#13;&#10;&#9;setModulatorValue(&quot;preampMid&quot;,value,false,true)&#13;&#10;&#9;-- Volume&#13;&#10;&#9;value = preset[&quot;volume&quot;]&#13;&#10;&#9;setModulatorValue(&quot;channelVolume&quot;,value,false,true)&#13;&#10;&#9;-- Treble&#13;&#10;&#9;value = preset[&quot;treble&quot;]&#13;&#10;&#9;setModulatorValue(&quot;preampTreble&quot;,value,false,true)&#13;&#10;&#9;-- Resonance&#13;&#10;&#9;value = preset[&quot;resonance&quot;]&#13;&#10;&#9;setModulatorValue(&quot;powerResonance&quot;,value,false,true)&#13;&#10;&#9;-- Presence&#13;&#10;&#9;value = preset[&quot;presence&quot;]&#13;&#10;&#9;setModulatorValue(&quot;powerPresence&quot;,value,false,true)&#13;&#10;&#9;-- Reverb&#13;&#10;&#9;value = preset[&quot;reverb&quot;]&#13;&#10;&#9;setModulatorValue(&quot;reverbLevel&quot;,value,false,true)&#13;&#10;&#9;-- This is global setting, not preset&#13;&#10;&#9;--setStatusModulatorValue(&quot;reverbStatus&quot;,value)&#13;&#10;&#9;-- Delay level&#13;&#10;&#9;value = preset[&quot;delayLevel&quot;]&#13;&#10;&#9;setModulatorValue(&quot;delayLevel&quot;,value,false,true)&#13;&#10;&#9;-- This is global setting, not preset&#13;&#10;&#9;-- setStatusModulatorValue(&quot;delayStatus&quot;,value)&#13;&#10;&#9;-- Delay Time&#13;&#10;&#9;value = preset[&quot;delayTime&quot;]&#13;&#10;&#9;setDelayTime(value,true,true,false,true)&#13;&#10;&#9;-- Delay Feedback&#13;&#10;&#9;value = preset[&quot;delayFeedback&quot;]&#13;&#10;&#9;setModulatorValue(&quot;delayFeedback&quot;,value,false,true)&#13;&#10;&#9;-- Mod intensity&#13;&#10;&#9;value = preset[&quot;modIntensity&quot;]&#13;&#10;&#9;setModulatorValue(&quot;modulationIntensity&quot;,value,false,true)&#13;&#10;&#9;-- This is global setting, not preset&#13;&#10;&#9;-- setStatusModulatorValue(&quot;modulationStatus&quot;,value)&#13;&#10;&#9;-- Mod type&#13;&#10;&#9;value = preset[&quot;modType&quot;]&#13;&#10;&#9;setModulation(value,false,true)&#13;&#10;&#9;-- Preamp channel&#13;&#10;&#9;value = preset[&quot;channelType&quot;]&#13;&#10;&#9;setModulatorValue(&quot;channelType&quot;,value,false,false)&#13;&#10;&#9;-- Pream boost&#13;&#10;&#9;value = preset[&quot;channelBoost&quot;]&#13;&#10;&#9;setStatusModulatorValue(&quot;channelBoost&quot;,value)&#13;&#10;&#9;-- Fx loop&#13;&#10;&#9;value = preset[&quot;fxLoop&quot;]&#13;&#10;&#9;setStatusModulatorValue(&quot;fxLoopStatus&quot;,value)&#13;&#10;&#9;-- Power soak&#13;&#10;&#9;if (isLibrary or isGm40()) and (powerSoakGlobal == 1) then&#13;&#10;&#9;&#9;value = globalPowerSoakValue&#13;&#10;&#9;else&#13;&#10;&#9;&#9;value = preset[&quot;powerSoak&quot;]&#13;&#10;&#9;end&#13;&#10;&#9;setModulatorValue(&quot;powerSoak&quot;,value,false,false)&#13;&#10;&#9;-- Noise Gate&#13;&#10;&#9;value = preset[&quot;noiseGate&quot;]&#13;&#10;&#9;setStatusModulatorValue(&quot;noiseGateStatus&quot;,value)&#13;&#10;&#9;--console(&quot;Load preset done&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;convertToInt = function(msb,lsb)&#13;&#10;&#9;local value = 128*msb+lsb&#13;&#10;&#9;return value&#13;&#10;end&#13;&#10;&#13;&#10;setModulatorValue = function(modulatorName, modulatorValue, sendMidi, animate)&#13;&#10;&#9;local modulator = panel:getModulator(modulatorName)&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;--console(&quot;Set &quot;..modulatorName..&quot;: Value = &quot;..modulatorValue)&#13;&#10;&#9;&#9;if animate then&#13;&#10;&#9;&#9;&#9;local currentValue = modulator:getValue()&#13;&#10;&#9;&#9;&#9;animations[modulatorName] = {modulator,currentValue,modulatorValue,sendMidi}&#13;&#10;&#9;&#9;&#9;if not timer:isTimerRunning(69) then&#13;&#10;&#9;&#9;&#9;&#9;animationEndTime = Time.getMillisecondCounterHiRes() + animationDuration&#13;&#10;&#9;&#9;&#9;&#9;lastAnimationTimerCall = 0&#13;&#10;&#9;&#9;&#9;&#9;timer:startTimer (69, 1)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;modulator:setValue(modulatorValue,true,not sendMidi)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Modulator not found for &quot;..modulatorName)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;setStatusModulatorValue = function(modulatorName, modulatorValue)&#13;&#10;&#9;local modulator = panel:getModulator(modulatorName)&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;if modulatorValue ~= 0 then&#13;&#10;&#9;&#9;&#9;modulatorValue = 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;--console(&quot;Set &quot;..modulatorName..&quot;: Value = &quot;..modulatorValue)&#13;&#10;&#9;&#9;modulator:setValue(modulatorValue,true,true)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Modulator not found for &quot;..modulatorName)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;setModulation = function(modulationValue,sendMidi,animate)&#13;&#10;&#9;--console(&quot;Modulation value&quot;..modulationValue)&#13;&#10;&#9;local modulationTypeModulator = panel:getModulator(&quot;modulationType&quot;)&#13;&#10;&#9;local type = math.floor(modulationValue / 64)&#13;&#10;&#9;if modulationTypeModulator ~= nil then&#13;&#10;&#9;&#9;--console(&quot;Set modulation type Value = &quot;..type)&#13;&#10;&#9;&#9;modulationTypeModulator:setValue(type,true,true)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Modulator not found modulation type&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;local modulationRateModulator = panel:getModulator(&quot;modulationRate&quot;)&#13;&#10;&#9;local rate&#13;&#10;&#9;if modulationValue == 255 then&#13;&#10;&#9;&#9;rate = 64&#13;&#10;&#9;else&#13;&#10;&#9;&#9;rate = (modulationValue % 64)&#13;&#10;&#9;end&#13;&#10;&#9;setModulatorValue(&quot;modulationRate&quot;,rate,sendMidi,animate)&#13;&#10;end&#13;&#10;&#13;&#10;function rotateTimerCallback (timerId)&#13;&#10;&#9;--console(&quot;timer id: &quot;..timerId..&quot; step: &quot;..timerStep)&#13;&#10;&#9;if timerId ~= 69 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if animations == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;--what(animations)&#13;&#10;&#13;&#10;&#9;local now = Time.getMillisecondCounterHiRes()&#13;&#10;&#9;local timerDuration&#13;&#10;&#9;if lastAnimationTimerCall &gt; 0 then&#13;&#10;&#9;&#9;timerDuration = now - lastAnimationTimerCall&#13;&#10;&#9;else&#13;&#10;&#9;&#9;timerDuration = 1&#13;&#10;&#9;end&#13;&#10;&#9;local remainingSteps = (animationEndTime - now) / timerDuration&#13;&#10;&#9;lastAnimationTimerCall = now&#13;&#10;&#9;if remainingSteps &gt; 0 then&#13;&#10;&#9;&#9;for k,v in pairs(animations) do&#13;&#10;&#9;&#9;&#9;local currentValue = v[2]&#13;&#10;&#9;&#9;&#9;local finalValue = v[3]&#13;&#10;&#9;&#9;&#9;local increment = (finalValue - currentValue) / remainingSteps&#13;&#10;&#9;&#9;&#9;local newValue = currentValue + increment&#13;&#10; &#9;&#9;&#9;v[1]:setValue(math.floor(newValue),true,true)&#13;&#10;&#9;&#9;&#9;v[2] = newValue&#13;&#10;&#9;&#9;&#9;if increment &gt; 0 then&#13;&#10;&#9;&#9;&#9;&#9;if newValue &gt;= finalValue then&#13;&#10;&#9;&#9;&#9;&#9;&#9;animations[k] = nil&#13;&#10;&#9;&#9;&#9;&#9;&#9;v[1]:setValue(finalValue,true,not v[4])&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;if newValue &lt;= finalValue then&#13;&#10;&#9;&#9;&#9;&#9;&#9;animations[k] = nil&#13;&#10;&#9;&#9;&#9;&#9;&#9;v[1]:setValue(finalValue,true,not v[4])&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;timer:stopTimer(timerId)&#13;&#10;&#9;&#9;timerStep = 0&#13;&#10;&#9;&#9;for k,v in pairs(animations) do&#13;&#10;&#9;&#9;&#9;local finalValue = v[3]&#13;&#10; &#9;&#9;&#9;v[1]:setValue(finalValue,true,not v[4])&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;animations = {}&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;setConnected = function(value)&#13;&#10;&#9;if connected ~= value then&#13;&#10;&#9;&#9;connected = value&#13;&#10;&#9;&#9;setLedModulatorValue(&quot;connectedLed&quot;,connected)&#13;&#10;&#9;&#9;if not connected then&#13;&#10;&#9;&#9;&#9;synced = false&#13;&#10;&#9;&#9;&#9;setLedModulatorValue(&quot;syncedLed&quot;,false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;local component = panel:getComponent(&quot;presetMode&quot;)&#13;&#10;&#9;&#9;local component2 = panel:getComponent(&quot;presetModeLibrary&quot;)&#13;&#10;&#9;&#9;local component3 = panel:getComponent(&quot;presetModeAmp&quot;)&#13;&#10;&#9;&#9;if connected then&#13;&#10;&#9;&#9;&#9;-- Hack to prevent sending preset dump on init : we mute preset combo change until timer triggers or connection is established&#13;&#10;&#9;&#9;&#9;mutePresetKomboChange = false&#13;&#10;&#9;&#9;&#9;-- Stop connection timer&#13;&#10;&#9;&#9;&#9;timer:stopTimer(70)&#13;&#10;&#9;&#9;&#9;-- Enable presetMode controller&#13;&#10;&#9;&#9;&#9;component:setEnabled(true)&#13;&#10;&#9;&#9;&#9;component:setPropertyString(&quot;uiImageButtonResource&quot;,&quot;switch-toggle-led&quot;)&#13;&#10;&#9;&#9;&#9;component2:setEnabled(true)&#13;&#10;&#9;&#9;&#9;component3:setEnabled(true)&#13;&#10;&#9;&#9;&#9;-- Swicth to amp&#13;&#10;&#9;&#9;&#9;setPresetMode(1,false)&#13;&#10;&#9;&#9;&#9;changePresetMode(false,false)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;-- Switch to library&#13;&#10;&#9;&#9;&#9;setPresetMode(0,false)&#13;&#10;&#9;&#9;&#9;changePresetMode(true,false)&#13;&#10;&#9;&#9;&#9;-- Disable preset mode controller&#13;&#10;&#9;&#9;&#9;component:setEnabled(false)&#13;&#10;&#9;&#9;&#9;component:setPropertyString(&quot;uiImageButtonResource&quot;,&quot;switch-toggle-led-dis&quot;)&#13;&#10;&#9;&#9;&#9;component2:setEnabled(false)&#13;&#10;&#9;&#9;&#9;component3:setEnabled(false)&#13;&#10;&#9;&#9;&#9;-- Start connection timer&#13;&#10;&#9;&#9;&#9;timer:startTimer(70,1000)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;setSynced = function(value)&#13;&#10;&#9;if synced ~= value then&#13;&#10;&#9;&#9;synced = value&#13;&#10;&#9;&#9;setLedModulatorValue(&quot;syncedLed&quot;,synced)&#13;&#10;&#9;&#9;local component = panel:getComponent(&quot;ampBackup&quot;)&#13;&#10;&#9;&#9;if synced then&#13;&#10;&#9;&#9;&#9;-- Enable amp backup button&#13;&#10;&#9;&#9;&#9;component:setEnabled(true)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;-- Disable amp backup button&#13;&#10;&#9;&#9;&#9;component:setEnabled(false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;setPresetMode = function(value,sendMidi)&#13;&#10;&#9;local modulator = panel:getModulator(&quot;presetMode&quot;)&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;if value ~= 0 then&#13;&#10;&#9;&#9;&#9;value = 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;modulator:setValue(value,true,not sendMidi)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Preset mode modulator not found&quot;)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;setLedModulatorValue = function(modulatorName,value)&#13;&#10;&#9;local modulator = panel:getModulator(modulatorName)&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;--console(&quot;Set &quot;..modulatorName..&quot;: Value = &quot;..modulatorValue)&#13;&#10;&#9;&#9;local modValue&#13;&#10; &#9;&#9;if value then &#13;&#10;&#9;&#9;&#9;modValue = 1&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;modValue = 0&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;--modulator:setValue(modValue,true,true)&#13;&#10;&#9;&#9;modulator:setPropertyInt(&quot;modulatorValue&quot;,modValue)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Led modulator not found for &quot;..modulatorName)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;getLedModulatorValue = function(modulatorName)&#13;&#10;&#9;local modulator = panel:getModulator(modulatorName)&#13;&#10;&#9;local result&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;--console(&quot;Set &quot;..modulatorName..&quot;: Value = &quot;..modulatorValue)&#13;&#10;&#9;&#9;result = modulator:getValue()&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Led modulator not found for &quot;..modulatorName)&#13;&#10;&#9;&#9;result = 0&#13;&#10;&#9;end&#13;&#10;&#9;if result == 1 then&#13;&#10;&#9;&#9;return true&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return false&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;blinkMidiInLed = function(modulatorName)&#13;&#10;&#9;setLedModulatorValue(&quot;midiInLed&quot;,true)&#13;&#10;&#9;timer:startTimer (71, 100)&#13;&#10;end&#13;&#10;&#13;&#10;blinkMidiOutLed = function(modulatorName)&#13;&#10;&#9;setLedModulatorValue(&quot;midiOutLed&quot;,true)&#13;&#10;&#9;timer:startTimer (72, 100)&#13;&#10;end&#13;&#10;&#13;&#10;function blinkMidiInLedTimerCallback(timerId)&#13;&#10;&#9;--console(&quot;timer id: &quot;..timerId..&quot; step: &quot;..timerStep)&#13;&#10;&#9;if timerId ~= 71 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;setLedModulatorValue(&quot;midiInLed&quot;,false)&#13;&#10;&#9;timer:stopTimer(timerId)&#13;&#10;end&#13;&#10;&#13;&#10;function blinkMidiOutLedTimerCallback(timerId)&#13;&#10;&#9;--console(&quot;timer id: &quot;..timerId..&quot; step: &quot;..timerStep)&#13;&#10;&#9;if timerId ~= 72 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;setLedModulatorValue(&quot;midiOutLed&quot;,false)&#13;&#10;&#9;timer:stopTimer(timerId)&#13;&#10;end&#13;&#10;&#13;&#10;function opposite(value)&#13;&#10;&#9;if value == 1 then&#13;&#10;&#9;&#9;return 0&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return 1&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaPanelMidiReceived" luaMethodSource="0"
                 uuid="fe0f6f8c52574676b326ed7f33c93f71" luaMethodValid="1"/>
      <luaMethod luaMethodName="setPresetName" luaMethodCode="function changePresetNumber(presetNumber)&#13;&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;setPresetNumber(presetNumber)&#13;&#10;&#9;if editBuffer ~= nil then&#13;&#10;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;sendEditBufferDump()&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;sendPresetChangeRequest(presetNumber)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if not connected then&#13;&#10;&#9;&#9;&#9;loadPreset(editBuffer,false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function setPresetNumber(presetNumber,force)&#13;&#10;&#9;if (panel:getBootstrapState() or panel:getRestoreState()) and not force then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;presetNumber = sanitizePresetNumber(presetNumber)&#13;&#10;&#9;setModulatorValue(&quot;presetStep&quot;,presetNumber,false)&#13;&#10;&#9;--console(&quot;Preset number = &quot;..presetNumber)&#13;&#10;&#9;currentPresetNumber = presetNumber&#13;&#10;&#9;editBuffer = copyPreset(presets[presetNumber])&#13;&#10;&#9;originalBuffer = copyPreset(presets[presetNumber])&#13;&#10;&#9;hideCompare()&#13;&#10;&#9;if libraryDirty then&#13;&#10;&#9;&#9;-- Remeber that we are really dirty (even after restore original)&#13;&#10;&#9;&#9;lastPresetDirty = true&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local component = panel:getComponent(&quot;presetName&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;local presetName&#13;&#10;&#9;&#9;if editBuffer ~= nil then&#13;&#10;&#9;&#9;&#9;presetName = editBuffer[&quot;name&quot;]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if presetName == nil then&#13;&#10;&#9;&#9;   presetName = &quot;Preset &quot;..presetNumber&#13;&#10;&#9;&#9;   console(&quot;No name found for preset &quot;..presetNumber)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if presetName ~= nil then&#13;&#10;&#9;&#9;&#9;component:setComponentText(presetName)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;   console(&quot;Modulator not found: presetName&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;component = panel:getComponent(&quot;presetNumber&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setComponentText(&quot;&quot;..presetNumber)&#13;&#10;&#9;else&#13;&#10;&#9;   console(&quot;Modulator not found: presetNumber&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;-- Set value for bank&#13;&#10;&#9;setBankValue(presetNumber)&#13;&#10;&#9;-- Update combo selection&#13;&#10;&#9;setComboSelection()&#13;&#10;end&#13;&#10;&#13;&#10;function setBankValue(presetNumber)&#13;&#10;&#9;local component = panel:getComponent(&quot;bankNumber&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;local bank = math.floor((presetNumber-1)/4)+1&#13;&#10;&#9;&#9;local patchNumber = (presetNumber-1)%4&#13;&#10;&#9;&#9;local patchText&#13;&#10;&#9;&#9;if(patchNumber &lt;= 0) then&#13;&#10;&#9;&#9;&#9;patchText = &quot;A&quot;&#13;&#10;&#9;&#9;elseif(patchNumber &lt;= 1) then&#13;&#10;&#9;&#9;&#9;patchText = &quot;B&quot;&#13;&#10;&#9;&#9;elseif(patchNumber &lt;= 2) then&#13;&#10;&#9;&#9;&#9;patchText = &quot;C&quot;&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;patchText = &quot;D&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;component:setComponentText(&quot;&quot;..bank..&quot; - &quot;..patchText)&#13;&#10;&#9;else&#13;&#10;&#9;   console(&quot;Modulator not found: bankNumber&quot;)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;"
                 luaMethodLinkedProperty="" luaMethodSource="0" uuid="baa52baca75f4df8903e95882d042c74"
                 luaMethodValid="1"/>
      <luaMethod luaMethodName="tapTempo" luaMethodCode="currentDelayValue = 0&#13;&#10;--&#10;--&#10;--&#10;tapTempo = function(modulator, numericModulatorValue)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator)  then&#13;&#10;&#9;&#9;return numericModulatorValue&#13;&#10;&#9;end&#13;&#10;&#9;newTapTime = Time.getMillisecondCounterHiRes()&#13;&#10;&#9;if lastTapTime ~= nil then&#13;&#10;&#9;&#9;delayTime = newTapTime - lastTapTime&#13;&#10;&#9;&#9;if delayTime &gt;= 51 and delayTime &lt;= 1360 then&#13;&#10;&#9;&#9;&#9;delayValue = (delayTime - 51) / 5.13333&#13;&#10;&#9;&#9;&#9;-- Round it for 7bit version&#13;&#10;&#9;&#9;&#9;delayValue = (math.floor(delayValue / 2))*2&#13;&#10;&#9;&#9;&#9;setDelayTime(delayValue,true,true,true,true)&#13;&#10;&#9;&#9;end&#9;&#9;&#13;&#10;&#9;end&#13;&#10;&#9;lastTapTime = Time.getMillisecondCounterHiRes()&#13;&#10;&#9;return numericModulatorValue&#10;end&#13;&#10;&#13;&#10;setDelayTime = function(delayValue,updateModulator,updateDisplay,sendMidi,animate)&#10;&#9;--console(&quot;Delay value = &quot;..delayValue)&#13;&#10;&#9;if delayValue &lt; 0 then&#13;&#10;&#9;&#9;delayValue = 0&#13;&#10;&#9;elseif delayValue &gt; 255 then&#13;&#10;&#9;&#9;delayValue = 255&#13;&#10;&#9;end&#13;&#10;&#9;currentDelayValue = delayValue&#13;&#10;&#9;if updateModulator then&#13;&#10;&#9;&#9;setModulatorValue(&quot;delayTime&quot;,delayValue,sendMidi,animate)&#13;&#10;&#9;end&#13;&#10;&#9;if updateDisplay then&#13;&#10;&#9;&#9;delayTime = math.floor((delayValue * 5.13333) + 51.5)&#13;&#10;&#9;&#9;bpm = math.floor(60000 / delayTime)&#13;&#10;&#9;&#9;--console(&quot;BPM = &quot;..bpm)&#13;&#10;&#9;&#9;setBpm(bpm)&#13;&#10;&#9;&#9;setDelayTimeMs(delayTime)&#13;&#10;&#9;end&#10;end&#13;&#10;&#13;&#10;setBpm = function(bpmValue)&#13;&#10;&#9;component = panel:getComponent(&quot;delayBpm&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;--console(&quot;Set bpm Value = &quot;..bpmValue)&#13;&#10;&#9;&#9;stopBpmValueChangePropagation = true&#13;&#10;&#9;&#9;component:setComponentText(&quot;&quot;..bpmValue)&#13;&#10;&#9;&#9;stopBpmValueChangePropagation = false&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Modulator not found delayBpm&quot;)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;setDelayTimeMs = function(timeValue)&#13;&#10;&#9;component = panel:getComponent(&quot;delayTimeMsLabel&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;--console(&quot;Set delay time ms Value = &quot;..timeValue)&#13;&#10;&#9;&#9;component:setComponentText(&quot;&quot;..timeValue..&quot; ms&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Modulator not found delayBpm&quot;)&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorGetValueForMIDI" luaMethodSource="0"
                 uuid="86e85cf1bf0449b5935b6408ac7a32d4" luaMethodValid="1"/>
      <luaMethod luaMethodName="updateDelayTime" luaMethodCode="--&#10;--&#10;--&#10;updateDelayTime = function(modulator, numericModulatorValue)&#13;&#10;&#9;--console(&quot;Update delay time&quot;)&#13;&#10;&#9;setDelayTime(numericModulatorValue,false,true,false)&#13;&#10;&#9;generateMidi(modulator,numericModulatorValue)&#10;&#9;return numericModulatorValue&#10;end"
                 luaMethodLinkedProperty="luaModulatorGetValueForMIDI" luaMethodSource="0"
                 uuid="972446e2525c41abaa3c317b37e6af82" luaMethodValid="1"/>
      <luaMethod luaMethodName="storePreset" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;storePreset = function(mod, value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod)  then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if isLibrary then&#13;&#10;&#9;&#9;-- Update amp preset&#13;&#10;&#9;&#9;currentAmpPreset = currentPresetNumber&#13;&#10;&#9;&#9;local presetToStore&#13;&#10;&#9;&#9;if showOriginal then&#13;&#10;&#9;&#9;&#9;presetToStore = originalBuffer&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;presetToStore = editBuffer&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;ampPresets[currentPresetNumber] = copyPreset(presetToStore)&#13;&#10;&#9;&#9;sendPresetBufferDump(presetToStore,false)&#13;&#10;&#9;&#9;if connected then&#13;&#10;&#9;&#9;&#9;-- Switch to amp&#13;&#10;&#9;&#9;&#9;setPresetMode(1,false)&#13;&#10;&#9;&#9;&#9;changePresetMode(false,false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;sendStoreRequest(currentPresetNumber)&#13;&#10;&#9;end&#13;&#10;&#9;originalBuffer = copyPreset(editBuffer)&#13;&#10;&#9;hideCompare()&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="935aec0ac3d84bc1b655117025d3d1b5" luaMethodValid="1"/>
      <luaMethod luaMethodName="initPanel" luaMethodCode="-- Globals&#13;&#10;animations = {}&#13;&#10;animationDuration = 400&#13;&#10;animationEndTime = 0&#13;&#10;lastAnimationTimerCall = 0&#13;&#10;ingoredVersionUpdate = nil&#13;&#10;&#13;&#10;factoryPresetNamesGm36 =&#13;&#10;{&quot;Super Clean&quot;,&#10;&quot;Fat Clean&quot;,&#10;&quot;Bluesy Clean&quot;,&#10;&quot;Crunchy Clean&quot;,&#10;&quot;Clean Brett&quot;,&#10;&quot;Rhythn Crunch&quot;,&#10;&quot;Fat Crunch&quot;,&#10;&quot;Boosted Crunch&quot;,&#10;&quot;Low Gain Classic Lead&quot;,&#10;&quot;Boosted Classic Lead&quot;,&#10;&quot;Fat Classic Lead&quot;,&#10;&quot;High Gain Classic Lead&quot;,&#10;&quot;Classic Metal&quot;,&#10;&quot;High Gain Metal&quot;,&#10;&quot;Modern Metal&quot;,&#10;&quot;Deep Metal&quot;,&#10;&quot;Chorus Clean&quot;,&#10;&quot;Rotor Chorus Clean&quot;,&#10;&quot;Clean Flanger&quot;,&#10;&quot;Clean Phaser&quot;,&#10;&quot;Space Crunch 1&quot;,&#10;&quot;Space Crunch 2&quot;,&#10;&quot;Flanged Lead&quot;,&#10;&quot;World of Lead&quot;,&#10;&quot;Sixties Tremolo Crunch&quot;,&#10;&quot;British Tremolo Crunch&quot;,&#10;&quot;Shine on Like Crazy&quot;,&#10;&quot;Crunchy Flanger&quot;,&#10;&quot;Ultra Power Chord&quot;,&#10;&quot;Ultra Modulation&quot;,&#10;&quot;Small Ultra Deep&quot;,&#10;&quot;Ultra Deep Space&quot;,&#10;&quot;Dream Bell&quot;,&#10;&quot;Warm Cave&quot;,&#10;&quot;Funda Mental&quot;,&#10;&quot;Spirit&quot;,&#10;&quot;Fat Clean Drive (Single Coil)&quot;,&#10;&quot;Voxx Like  (Single Coil)&quot;,&#10;&quot;Country Boy 1 (Single Coil)&quot;,&#10;&quot;Country Boy 2 (Single Coil)&quot;,&#10;&quot;Running on the Moon (Single Coil)&quot;,&#10;&quot;You Too (Single Coil)&quot;,&#10;&quot;Volume Swell Pad (Single Coil)&quot;,&#10;&quot;Arpeggio Rick Chords (Single Coil)&quot;,&#10;&quot;My Tremolo&quot;,&#10;&quot;My Chorus&quot;,&#10;&quot;Funky phaser&quot;,&#10;&quot;Clean Flanger&quot;,&#10;&quot;Crunch!&quot;,&#10;&quot;Hot Crunch 1&quot;,&#10;&quot;Hot Crunch 2&quot;,&#10;&quot;Classic 2nd&quot;,&#10;&quot;Classic Lead&quot;,&#10;&quot;High Gain Solo 1&quot;,&#10;&quot;High Gain Solo 2&quot;,&#10;&quot;Ultra High Gain Solo&quot;,&#10;&quot;Modern Metal Rhythm&quot;,&#10;&quot;Modern Metal Lead&quot;,&#10;&quot;Paradise Clean&quot;,&#10;&quot;Paradise Rhythm&quot;,&#10;&quot;Paradise Lead&quot;,&#10;&quot;Black Hole Clean&quot;,&#10;&quot;Black Hole Weird&quot;,&#10;&quot;Bombtrack&quot;,&#10;&quot;Good Love&quot;,&#10;&quot;Love Solo&quot;,&#10;&quot;Modern Rock Rhythm&quot;,&#10;&quot;Modern Rock Lead&quot;}&#13;&#10;&#13;&#10;factoryPresetNamesGm40 =&#13;&#10;{&quot;Airey Clean&quot;,&#13;&#10;&quot;Dry Crunch&quot;,&#13;&#10;&quot;Rhythm Lead&quot;,&#13;&#10;&quot;Ultra Solo&quot;,&#13;&#10;&quot;Pumped Clean&quot;,&#13;&#10;&quot;Jim Crunch&quot;,&#13;&#10;&quot;Old Skool Lead&quot;,&#13;&#10;&quot;Luke Solo&quot;,&#13;&#10;&quot;Sound Of The Police&quot;,&#13;&#10;&quot;Chicken Slap&quot;,&#13;&#10;&quot;Comfortably Dump&quot;,&#13;&#10;&quot;Metalicious&quot;,&#13;&#10;&quot;Tremolo Solo&quot;,&#13;&#10;&quot;Chrunchy Bite&quot;,&#13;&#10;&quot;Jazzy Mumph&quot;,&#13;&#10;&quot;Deep Metal&quot;,&#13;&#10;&quot;Slowly Chorus Groove&quot;,&#13;&#10;&quot;The Truth In Crunch&quot;,&#13;&#10;&quot;Neck Pick Crunch No. 1&quot;,&#13;&#10;&quot;A 60s Classic Cloud&quot;,&#13;&#10;&quot;Lead By Dutch&quot;,&#13;&#10;&quot;Latin Rock Of The 70s&quot;,&#13;&#10;&quot;Fat Clean Drive&quot;,&#13;&#10;&quot;Voxx Like&quot;,&#13;&#10;&quot;Country Boy 1&quot;,&#13;&#10;&quot;Country Boy 2&quot;,&#13;&#10;&quot;Running on the Moon&quot;,&#13;&#10;&quot;You too&quot;,&#13;&#10;&quot;Volume Swell Pad&quot;,&#13;&#10;&quot;Arpeggio Rick Chords&quot;,&#13;&#10;&quot;My Tremolo&quot;,&#13;&#10;&quot;My Chorus&quot;,&#13;&#10;&quot;Funky Phaser&quot;,&#13;&#10;&quot;Clean Flanger&quot;,&#13;&#10;&quot;Crunch!&quot;,&#13;&#10;&quot;Hot Crunch 1&quot;,&#13;&#10;&quot;Hot Crunch 2&quot;,&#13;&#10;&quot;Classic 2nd&quot;,&#13;&#10;&quot;Classic Lead&quot;,&#13;&#10;&quot;High Gain Solo 1&quot;,&#13;&#10;&quot;High Gain Solo 2&quot;,&#13;&#10;&quot;Ultra High Gain Solo&quot;,&#13;&#10;&quot;Modern Metal Rhythm&quot;,&#13;&#10;&quot;Modern Metal Lead&quot;,&#13;&#10;&quot;Paradise Clean&quot;,&#13;&#10;&quot;Paradise Rhythm&quot;,&#13;&#10;&quot;Paradise Lead&quot;,&#13;&#10;&quot;Black Hole Clean&quot;,&#13;&#10;&quot;Black Hole Weird&quot;,&#13;&#10;&quot;Bombtrack&quot;,&#13;&#10;&quot;Good Love&quot;,&#13;&#10;&quot;Love Solo&quot;,&#13;&#10;&quot;Modern Rock Rhythm&quot;,&#13;&#10;&quot;Modern Rock Lead&quot;,&#13;&#10;&quot;Super Clean&quot;,&#13;&#10;&quot;Fat Clean&quot;,&#13;&#10;&quot;Bluesy Clean&quot;,&#13;&#10;&quot;Crunchy Clean&quot;,&#13;&#10;&quot;Clean Brett&quot;,&#13;&#10;&quot;Rhythm Crunch&quot;,&#13;&#10;&quot;Fat Crunch&quot;,&#13;&#10;&quot;Boosted Crunch&quot;,&#13;&#10;&quot;Low Gain Classic Lead&quot;,&#13;&#10;&quot;Boosted Classic Lead&quot;,&#13;&#10;&quot;Fat Classic Lead&quot;,&#13;&#10;&quot;High Gain Classic Lead&quot;,&#13;&#10;&quot;Classic Metal&quot;,&#13;&#10;&quot;High Gain Metal&quot;,&#13;&#10;&quot;Modern Metal&quot;,&#13;&#10;&quot;Deep Metal&quot;,&#13;&#10;&quot;Chorus Clean&quot;,&#13;&#10;&quot;Rotor Chorus Clean&quot;,&#13;&#10;&quot;Clean Flanger&quot;,&#13;&#10;&quot;Clean Phaser&quot;,&#13;&#10;&quot;Space Crunch 1&quot;,&#13;&#10;&quot;Space Crunch 2&quot;,&#13;&#10;&quot;Flanged Lead&quot;,&#13;&#10;&quot;World of Lead&quot;,&#13;&#10;&quot;Sixties Tremolo Clean&quot;,&#13;&#10;&quot;British Tremolo Crunch&quot;,&#13;&#10;&quot;Shine on like crazy&quot;,&#13;&#10;&quot;Crunchy Flanger&quot;,&#13;&#10;&quot;Ultra Power Chord&quot;,&#13;&#10;&quot;Ultra Modulation&quot;,&#13;&#10;&quot;Small Ultra Deep&quot;,&#13;&#10;&quot;Ultra Deep Space&quot;,&#13;&#10;&quot;Dream Bell&quot;,&#13;&#10;&quot;Warm Cave&quot;,&#13;&#10;&quot;Funda Mental&quot;,&#13;&#10;&quot;Free Spirit&quot;}&#13;&#10;&#13;&#10;factoryPresetNames = factoryPresetNamesGm36&#13;&#10;&#13;&#10;controllers = {&#13;&#10;[1]=&quot;modIntensity&quot;,&#13;&#10;[4]=&quot;delayTime&quot;,&#13;&#10;[12]=&quot;modType&quot;,&#13;&#10;[21]=&quot;bass&quot;,&#13;&#10;[22]=&quot;mid&quot;,&#13;&#10;[23]=&quot;treble&quot;,&#13;&#10;[24]=&quot;resonance&quot;,&#13;&#10;[25]=&quot;presence&quot;,&#13;&#10;[27]=&quot;delayFeedback&quot;,&#13;&#10;[28]=&quot;delayLevel&quot;,&#13;&#10;[29]=&quot;reverb&quot;,&#13;&#10;[30]=&quot;powerSoak&quot;,&#13;&#10;[31]=&quot;channelType&quot;,&#13;&#10;[55]=&quot;fxLoop&quot;,&#13;&#10;[56]=&quot;gain&quot;,&#13;&#10;[57]=&quot;volume&quot;,&#13;&#10;[63]=&quot;noiseGate&quot;,&#13;&#10;[64]=&quot;channelBoost&quot;&#13;&#10;}&#13;&#10;&#13;&#10;-- Preset data&#13;&#10;presets = {}&#13;&#10;libraryPresets = {}&#13;&#10;externalPresets = {}&#13;&#10;ampPresets = {}&#13;&#10;-- Presets to send&#13;&#10;presetsToSend = nil&#13;&#10;presetsToSendIndex = 0&#13;&#10;presetsToSendSize = 0&#13;&#10;uploadFinishedCallback = nil&#13;&#10;-- Current Preset numbers&#13;&#10;currentPresetNumber = 1&#13;&#10;currentAmpPresetNumber = 1&#13;&#10;currentLibraryPresetNumber = 1&#13;&#10;-- System config data&#13;&#10;omniMode=0&#13;&#10;midiChannel=1&#13;&#10;mutes=0x00&#13;&#10;powerEqGlobal=0&#13;&#10;powerSoakGlobal=0&#13;&#10;globalPowerSoakValue=127 -- Default to 36W&#13;&#10;midiLearn=0&#13;&#10;speakerConnected=0&#13;&#10;modified=0&#13;&#10;fxAccess=0&#13;&#10;&#13;&#10;-- Edit buffer data&#13;&#10;editBuffer = {}&#13;&#10;originalBuffer = {}&#13;&#10;&#13;&#10;-- Current library file&#13;&#10;currentLibraryFile = nil&#13;&#10;&#13;&#10;-- State&#13;&#10;-- 0 = wait for config&#13;&#10;-- 1 = wait for edit buffer&#13;&#10;-- 2 = wait for all presets&#13;&#10;-- 3 = idle&#13;&#10;-- lastStateChangeTime = 0&#13;&#10;state = 0&#13;&#10;&#13;&#10;-- Connected state&#13;&#10;connected = true&#13;&#10;-- Synced state&#13;&#10;synced = true&#13;&#10;-- Library / Amp&#13;&#10;isLibrary = true&#13;&#10;&#13;&#10;libraryDirty = false&#13;&#10;lastPresetDirty = false&#13;&#10;&#13;&#10;ampType = &quot;?&quot;&#13;&#10;&#13;&#10;firmwareVersion = &quot;?&quot;&#13;&#10;&#13;&#10;-- Panel version&#13;&#10;versionMajor = 0&#10;versionMinor = 0&#13;&#10;version = &quot;?&quot;&#13;&#10;&#13;&#10;-- Compare mode management&#13;&#10;presetChanged = false&#13;&#10;compareMode = false&#13;&#10;showOriginal = false&#13;&#10;&#13;&#10;-- Library editor globals&#13;&#10;libraryEditorBoxes = {}&#13;&#10;librarySelectionStart = 1&#13;&#10;librarySelectionEnd = 1&#13;&#10;libraryCursorPosition = 1&#13;&#10;libraryChanged = false&#13;&#10;libraryClipboard = {}&#13;&#10;libraryClipboardSourceIsLib = true&#13;&#10;libraryClipboardStart = 0&#13;&#10;libraryClipboardEnd = 0&#13;&#10;libraryCliboardEmpty = true&#13;&#10;libraryUndoContent = {}&#13;&#10;libraryUndoEmpty = true&#13;&#10;libraryUndoStart = 0&#13;&#10;libraryListenPressed = false&#13;&#10;libraryEditorPresets = {}&#13;&#10;-- Current external file&#13;&#10;currentExternalFile = nil&#13;&#10;externalPresetsLoaded = false&#13;&#10;libraryEditorExternal = false&#13;&#10;&#13;&#10;&#13;&#10;--&#10;-- Called when the panel has finished loading&#10;--&#10;initPanel = function()&#13;&#10;&#9;&#13;&#10;&#9;if currentLibraryFile == nil or currentLibraryFile == &quot;&quot; then&#13;&#10;&#9;&#9;-- Set default library file&#13;&#10;&#9;&#9;currentLibraryFile = File.getSpecialLocation(File.userHomeDirectory):getFullPathName()..&quot;/gm36/factory.gm36&quot;&#13;&#10;&#9;end&#13;&#10;&#9;&#9;-- Init preset numbers&#13;&#10;&#9;currentPresetNumber = 1&#13;&#10;&#9;currentAmpPresetNumber = 1&#13;&#10;&#9;currentLibraryPresetNumber = 1&#13;&#10;&#9;-- Restore currentPresetNumber&#13;&#10;&#9;local modulator = panel:getModulator(&quot;presetStep&quot;)&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;currentPresetNumber = sanitizePresetNumber(modulator:getValue())&#13;&#10;&#9;end&#13;&#10;&#9;-- Global power soak value&#13;&#10;&#9;local modulator = panel:getModulator(&quot;powerSoakMode&quot;)&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;powerSoakGlobal = modulator:getValue()&#13;&#10;&#9;end&#13;&#10;&#9;-- Init presets&#13;&#10;&#9;initPresets()&#13;&#10;&#9;-- Hack to prevent sending preset dump on init : we mute preset combo change until timer triggers or connection is established&#13;&#10;&#9;mutePresetComboChange = true&#13;&#10;&#9;-- Init timers&#13;&#10;&#9;timer:setCallback(69, rotateTimerCallback)&#13;&#10;&#9;timer:setCallback(70, connectedTimerCallback)&#13;&#10;&#9;timer:setCallback(71, blinkMidiInLedTimerCallback)&#13;&#10;&#9;timer:setCallback(72, blinkMidiOutLedTimerCallback)&#13;&#10;&#9;timer:setCallback(73, checkForUpdateTimerCallback)&#13;&#10;&#9;timer:setCallback(74, syncedTimerCallback)&#13;&#10;&#9;-- Update modulators with current preset&#13;&#10;&#9;loadPreset(editBuffer,true)&#13;&#10;&#9;-- Make sure leds are off&#13;&#10;&#9;setLedModulatorValue(&quot;connectedLed&quot;,false)&#13;&#10;&#9;setLedModulatorValue(&quot;syncedLed&quot;,false)&#13;&#10;&#13;&#10;&#9;-- Init library editor &#13;&#10;&#9;local currentListBoxName&#13;&#10;&#9;for i=1,32 do&#13;&#10;&#9;&#9;currentListBoxName = &quot;bank&quot;..i..&quot;ListBox&quot;&#13;&#10;&#9;&#9;libraryEditorBoxes[i]=panel:getComponent(currentListBoxName)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Init ui&#13;&#10;&#9;initUi()&#13;&#10;&#13;&#10;&#9;-- Init synced state&#13;&#10;&#9;setSynced(false)&#13;&#10;&#9;-- Arm connection timer&#13;&#10;&#9;setConnected(false)&#13;&#10;&#13;&#10;&#9;-- Start check for update timer&#13;&#10;&#9;timer:startTimer(73,2000)&#13;&#10;&#9;-- Read panel version&#13;&#10;&#9;readVersion()&#13;&#10;end&#13;&#10;&#13;&#10;function initPresets()&#13;&#10;&#9;ampPresets = loadAmpFromFile()&#13;&#10;&#9;libraryPresets = loadLibraryFromFile()&#13;&#10;&#9;-- current presets are library presets until we are connected&#13;&#10;&#9;presets = libraryPresets&#13;&#10;&#9;-- Point library editor to library presets&#13;&#10;&#9;libraryEditorPresets = libraryPresets&#13;&#10;&#9;setLibraryExternalToggle(libraryEditorExternal)&#13;&#10;&#9;initPresetCombo()&#13;&#10;end&#13;&#10;&#13;&#10;function initUi()&#13;&#10;&#9;-- Force library file name update&#13;&#10;&#9;libraryDirty = false&#13;&#10;&#9;setLibraryFileName(true)&#13;&#10;&#9;-- Init amp type&#13;&#10;&#9;panel:getComponent(&quot;ampType&quot;):setComponentText(ampType)&#13;&#10;&#9;-- Init firmware version&#13;&#10;&#9;panel:getComponent(&quot;firmwareVersion&quot;):setComponentText(firmwareVersion)&#13;&#10;&#9;-- Init power soak values&#13;&#10;&#9;setPowerSoakLabels()&#13;&#10;end&#13;&#10;&#13;&#10;initPresetCombo = function()&#13;&#10;&#9;local combo = getPresetCombo()&#13;&#10;&#9;if combo ~= nil then&#13;&#10;&#9;&#9;-- Amp mode =&gt; fill all 128 presets&#13;&#10;&#9;&#9;combo = modulator:getOwnedComboBox()&#13;&#10;&#9;&#9;combo:clear(0)&#13;&#10;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;local size = 1&#13;&#10;&#9;&#9;&#9;-- Library mode =&gt; only setup available presets&#13;&#10;&#9;&#9;&#9;local presetName&#13;&#10;&#9;&#9;&#9;for i,v in ipairs(presets) do&#13;&#10;&#9;&#9;&#9;&#9;if v[&quot;name&quot;] ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;presetName = v[&quot;name&quot;]&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;presetName = &quot;Preset &quot;..size&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;combo:addItem(&quot;&quot;..i..&quot; - &quot;..presetName,size)&#13;&#10;&#9;&#9;&#9;&#9;size = size+1&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;local size = 1&#13;&#10;&#9;&#9;&#9;while size &lt;= 128 do&#13;&#10;&#9;&#9;&#9;&#9;local presetName&#13;&#10;&#9;&#9;&#9;&#9;if presets[size] == nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;if factoryPresetNames[size] ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;presetName = factoryPresetNames[size]&#13;&#10;&#9;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;presetName = &quot;Preset &quot;..size&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;presetName = presets[size][&quot;name&quot;]&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;combo:addItem(&quot;&quot;..size..&quot; - &quot;..presetName,size)&#13;&#10;&#9;&#9;&#9;&#9;size = size+1&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Modulator not found for presetCombo&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;-- Update preset&#13;&#10;&#9;setPresetNumber(currentPresetNumber,true)&#13;&#10;end&#13;&#10;&#13;&#10;getPresetCombo = function()&#13;&#10;&#9;modulator = panel:getComboComponent(&quot;presetCombo&quot;)&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;combo = modulator:getOwnedComboBox()&#13;&#10;&#9;&#9;return combo&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return nil&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function connectedTimerCallback (timerId)&#13;&#10;&#9;--console(&quot;timer id: &quot;..timerId..&quot; step: &quot;..timerStep)&#13;&#10;&#9;if timerId ~= 70 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Hack to prevent sending preset dump on init : we mute preset combo change until timer triggers or connection is established&#13;&#10;&#9;mutePresetComboChange = false&#13;&#10;&#9;if not connected then&#13;&#10;&#9;&#9;--sendIdRequest()&#13;&#10;&#9;&#9;--sendEditBufferRequest()&#13;&#10;&#9;&#9;sendSystemConfigRequest()&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;firstSyncedTimerCall = true&#13;&#10;function syncedTimerCallback (timerId)&#13;&#10;&#9;--console(&quot;timer id: &quot;..timerId..&quot; step: &quot;..timerStep)&#13;&#10;&#9;if timerId ~= 74 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if firstSyncedTimerCall then&#13;&#10;&#9;&#9;firstSyncedTimerCall = false&#13;&#10;&#9;else&#13;&#10;&#9;&#9;sendAllPresetsRequest()&#13;&#10;&#9;&#9;timer:stopTimer(timerId)&#13;&#10;&#9;&#9;firstSyncedTimerCall = true&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function readVersion()&#13;&#10;&#9;versionMajor = panel:getPropertyInt(&quot;panelVersionMajor&quot;)&#10;&#9;versionMinor = panel:getPropertyInt(&quot;panelVersionMinor&quot;)&#13;&#10;&#9;version = versionMajor..&quot;.&quot;..versionMinor&#13;&#10;&#9;panel:getComponent(&quot;versionLabel&quot;):setComponentText(&quot;Version &quot;..version)&#13;&#10;end&#13;&#10;&#13;&#10;function checkForUpdateTimerCallback (timerId)&#13;&#10;&#9;--console(&quot;timer id: &quot;..timerId..&quot; step: &quot;..timerStep)&#13;&#10;&#9;if timerId ~= 73 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Only check once per session&#13;&#10;&#9;timer:stopTimer(timerId)&#13;&#10;&#9;-- Call update url&#13;&#10;&#9;local url = URL(&quot;http://ctrlr.org/?ddownload=37209&quot;)&#13;&#10;&#9;latestVersionString = url:readEntireTextStream(false)&#13;&#10;&#9;if latestVersionString ~= nil then&#13;&#10;&#9;&#9;local latestVersion = tonumber(latestVersionString)&#13;&#10;&#9;&#9;if latestVersion ~= nil then&#13;&#10;&#9;&#9;&#9;local versionMajor = panel:getPropertyInt(&quot;panelVersionMajor&quot;)&#10;&#9;&#9;&#9;local versionMinor = panel:getPropertyInt(&quot;panelVersionMinor&quot;)&#13;&#10;&#9;&#9;&#9;local version = versionMajor..&quot;.&quot;..versionMinor&#13;&#10;&#9;&#9;&#9;local currentVersion = tonumber(version)&#13;&#10;&#9;&#9;&#9;--console(&quot;Current version = &quot;..currentVersion)&#13;&#10;&#9;&#9;&#9;--console(&quot;Latest version = &quot;..latestVersion)&#13;&#10;&#9;&#9;&#9;if latestVersion &gt; currentVersion then&#13;&#10;&#9;&#9;&#9;&#9;-- Check if this version has been marked ignored&#13;&#10;&#9;&#9;&#9;&#9;if latestVersionString == ingoredVersionUpdate then&#13;&#10;&#9;&#9;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;-- Ask user&#13;&#10;&#9;&#9;&#9;&#9;updateWindow = AlertWindow(&quot;A new version is available !&quot;, &quot;Go to download page ?&quot;, AlertWindow.QuestionIcon)&#13;&#10;&#9;&#9;&#9;&#9;updateWindow:addButton(&quot;OK&quot;, 1, KeyPress(KeyPress.returnKey), KeyPress())&#13;&#10;&#9;&#9;&#9;&#9;updateWindow:addButton(&quot;Later&quot;, 0, KeyPress(KeyPress.escapeKey), KeyPress())&#13;&#10;&#9;&#9;&#9;&#9;updateWindow:addButton(&quot;Never&quot;, 2, KeyPress(), KeyPress())&#13;&#10;&#9;&#9;&#9;&#9;updateWindow:setModalHandler(updateWindowCallback)&#13;&#10;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;--  Never let Lua delete this window (3rd parameter), enter modal state&#13;&#10;&#9;&#9;&#9;&#9;updateWindow:runModalLoop()&#13;&#10;&#9;&#9;&#9;end&#13;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function updateWindowCallback(result, window)&#13;&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;window:setVisible (false)&#13;&#10;&#9;--console(&quot;\n\nwindowCallback result=&quot;..result)&#13;&#10;&#9;if result == 1 then&#13;&#10;&#9;&#9;local url = URL(&quot;http://ctrlr.org/hughes-kettner-grandmeister-36/&quot;)&#13;&#10;&#9;&#9;url:launchInDefaultBrowser()&#13;&#10;&#9;elseif result == 2 then&#13;&#10;&#9;&#9;-- TODO Update last checked version&#13;&#10;&#9;&#9;ingoredVersionUpdate = latestVersionString&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function notMouseOver(mod)&#13;&#10;&#9;local comp = mod:getComponent()&#13;&#10;&#9;local childComp = comp:getChildComponent(0)&#13;&#10;&#9;--what(comp)&#13;&#10;&#9;--what(childComp)&#13;&#10;&#9;--if (mod == nil or comp == nil or childComp == nil or (not childComp:isMouseOver(true) and not comp:isMouseOver(true))) then&#13;&#10;&#9;--&#9;console(&quot;Is mouse over false&quot;)&#13;&#10;&#9;--else&#13;&#10;&#9;--&#9;console(&quot;Is mouse over true&quot;)&#13;&#10;&#9;--end&#13;&#10;&#9;return (mod == nil or comp == nil or childComp == nil or (not childComp:isMouseOver(true)))&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;function switchToEditorTab()&#13;&#10;&#9;switchToTab(0)&#13;&#10;&#9;setSettingsVisible(true)&#13;&#10;end&#13;&#10;&#13;&#10;function switchToLibraryEditorTab()&#13;&#10;&#9;switchToTab(1)&#13;&#10;&#9;setSettingsVisible(false)&#13;&#10;&#9;setLibraryEditorPresets()&#13;&#10;&#9;initLibraryEditor()&#13;&#10;end&#13;&#10;&#13;&#10;function switchToProgressTab()&#13;&#10;&#9;switchToTab(2)&#13;&#10;&#9;setSettingsVisible(false)&#13;&#10;end&#13;&#10;&#13;&#10;function switchToSettingsTab()&#13;&#10;&#9;switchToTab(3)&#13;&#10;&#9;setSettingsVisible(false)&#13;&#10;end&#13;&#10;&#13;&#10;function switchToHelpTab()&#13;&#10;&#9;switchToTab(4)&#13;&#10;&#9;setSettingsVisible(false)&#13;&#10;end&#13;&#10;&#13;&#10;function switchToTab(value)&#13;&#10;&#9;panel:getComponent(&quot;tabs&quot;):setProperty (&quot;uiTabsCurrentTab&quot;, value, false)&#13;&#10;end&#13;&#10;&#13;&#10;function setSettingsVisible(visible)&#13;&#10;&#9;panel:getComponent(&quot;settings&quot;):setVisible(visible)&#13;&#10;&#9;panel:getComponent(&quot;libraryEditor&quot;):setVisible(visible)&#13;&#10;end&#13;&#10;&#13;&#10;function initPreset(presetNumber)&#13;&#10;&#9;local preset = {}&#13;&#10;&#9;preset[&quot;number&quot;]=presetNumber&#13;&#10;&#9;if factoryPresetNames[presetNumber] ~= nil then&#13;&#10;&#9;&#9;preset[&quot;name&quot;] = factoryPresetNames[presetNumber]&#13;&#10;&#9;else&#13;&#10;&#9;&#9;preset[&quot;name&quot;] = &quot;Preset &quot;..presetNumber&#13;&#10;&#9;end&#13;&#10;&#9;for kk, vv in pairs(controllers) do&#13;&#10;&#9;&#9;preset[vv]=0&#13;&#10;&#9;end&#13;&#10;&#9;return preset&#13;&#10;end&#13;&#10;&#13;&#10;function sanitizePresetNumber(presetNumber)&#13;&#10;&#9;if not (type(presetNumber) == 'number') then&#13;&#10;&#9;&#9;presetNumber = tonumber(presetNumber)&#13;&#10;&#9;end&#13;&#10;&#9;if presetNumber == nil or presetNumber &lt; 1 or presetNumber &gt; 128 then&#13;&#10;&#9;&#9;presetNumber = 1&#13;&#10;&#9;end&#13;&#10;&#9;return presetNumber&#13;&#10;end&#13;&#10;&#13;&#10;function initLibraryEditor()&#13;&#10;&#9;-- Init list box labels&#13;&#10;&#9;local currentPresetIndex = 1&#13;&#10;&#9;local currentListBoxContent&#13;&#10;&#9;for i,currentListBox in ipairs(libraryEditorBoxes) do&#13;&#10;&#9;&#9;currentListBoxContent = &quot;&quot;&#13;&#10;&#9;&#9;for j=1,4 do&#13;&#10;&#9;&#9;&#9;currentListBoxContent = currentListBoxContent..libraryEditorPresets[currentPresetIndex][&quot;name&quot;]&#13;&#10;&#9;&#9;&#9;if j &lt; 4 then&#13;&#10;&#9;&#9;&#9;&#9;currentListBoxContent = currentListBoxContent..&quot;\n&quot;&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;currentPresetIndex = currentPresetIndex + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;currentListBox:setProperty (&quot;uiListBoxContent&quot;, currentListBoxContent, false)&#13;&#10;&#9;end&#13;&#10;&#9;updateLibraryEditorSelection()&#13;&#10;end&#13;&#10;&#13;&#10;function updateLibraryEditorSelection()&#13;&#10;&#9;local currentSelectionIndex = 1&#13;&#10;&#9;for i,currentListBox in ipairs(libraryEditorBoxes) do&#13;&#10;&#9;&#9;currentListBox:deselectAllRows()&#13;&#10;&#9;&#9;for j=0,3 do&#13;&#10;&#9;&#9;&#9;if ((currentSelectionIndex &gt;= librarySelectionStart) and (currentSelectionIndex &lt;= librarySelectionEnd)) then&#13;&#10;&#9;&#9;&#9;&#9;-- grow selection&#13;&#10;&#9;&#9;&#9;&#9;currentListBox:selectRow(j,true,false)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;currentSelectionIndex = currentSelectionIndex + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;updateLibraryControllers()&#13;&#10;&#9;updateLibraryClipboard()&#13;&#10;&#9;updateExternalModeDisplay()&#13;&#10;&#9;giveFocusToKeyLogger()&#10;end&#13;&#10;&#13;&#10;function updateLibraryControllers()&#13;&#10;&#9;if librarySelectionStart == librarySelectionEnd then&#13;&#10;&#9;&#9;-- Single selection&#13;&#10;&#9;&#9;local currentPreset = libraryEditorPresets[librarySelectionStart]&#13;&#10;&#9;&#9;if currentPreset ~= nil then&#13;&#10;&#9;&#9;&#9;-- Set name&#13;&#10;&#9;&#9;&#9;local component = panel:getComponent(&quot;libraryPresetName&quot;)&#13;&#10;&#9;&#9;&#9;if component ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;component:setComponentText(currentPreset[&quot;name&quot;])&#13;&#10;&#9;&#9;&#9;&#9;component:setPropertyString(&quot;uiLabelTextColour&quot;,&quot;FF409FCB&quot;)&#13;&#10;&#9;&#9;&#9;&#9;if libraryEditorExternal then&#13;&#10;&#9;&#9;&#9;&#9;&#9;component:setPropertyString(&quot;uiLabelEditOnSingleClick&quot;,&quot;false&quot;)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;component:setPropertyString(&quot;uiLabelEditOnSingleClick&quot;,&quot;true&quot;)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;local modulator&#13;&#10;&#9;&#9;&#9;for k,v in pairs(controllers) do&#13;&#10;&#9;&#9;&#9;&#9;modulator = panel:getModulator(&quot;library-&quot;..v)&#13;&#10;&#9;&#9;&#9;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator:setValue(currentPreset[v],true,true)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;-- Multiple selection&#13;&#10;&#9;&#9;-- Set name&#13;&#10;&#9;&#9;local component = panel:getComponent(&quot;libraryPresetName&quot;)&#13;&#10;&#9;&#9;if component ~= nil then&#13;&#10;&#9;&#9;&#9;local selectionText&#13;&#10;&#9;&#9;&#9;if libraryEditorExternal then&#13;&#10;&#9;&#9;&#9;&#9;selectionText=&quot;Presets &quot;..librarySelectionStart..&quot; - &quot;..librarySelectionEnd&#13;&#10;&#9;&#9;&#9;&#9;component:setPropertyString(&quot;uiLabelTextColour&quot;,&quot;FF409FCB&quot;)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;selectionText=&quot;Bulk edit &quot;..librarySelectionStart..&quot; - &quot;..librarySelectionEnd&#13;&#10;&#9;&#9;&#9;&#9;component:setPropertyString(&quot;uiLabelTextColour&quot;,&quot;FFFF0000&quot;)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;component:setComponentText(selectionText)&#13;&#10;&#9;&#9;&#9;component:setPropertyString(&quot;uiLabelEditOnSingleClick&quot;,&quot;false&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;for k,v in pairs(controllers) do&#13;&#10;&#9;&#9;&#9;-- See if value is the same for all selection&#13;&#10;&#9;&#9;&#9;local currentValue = libraryEditorPresets[librarySelectionStart][v]&#13;&#10;&#9;&#9;&#9;local allSame = true&#13;&#10;&#9;&#9;&#9;for i=(librarySelectionStart+1),librarySelectionEnd do&#13;&#10;&#9;&#9;&#9;&#9;if libraryEditorPresets[i][v]~=currentValue then&#13;&#10;&#9;&#9;&#9;&#9;&#9;allSame = false&#13;&#10;&#9;&#9;&#9;&#9;&#9;break&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;local modulator = panel:getModulator(&quot;library-&quot;..v)&#13;&#10;&#9;&#9;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;if allSame then&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator:setValue(currentValue,true,true)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;modulator:setValue(0,true,true)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;component = modulator:getComponent()&#13;&#10;&#9;&#9;&#9;&#9;-- Disable for external file&#13;&#10;&#9;&#9;&#9;&#9;if component ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;component:setEnabled(not libraryEditorExternal)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;-- Listen button state&#13;&#10;&#9;local component = panel:getComponent(&quot;libraryEditorListen&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled(connected and (librarySelectionStart == librarySelectionEnd))&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function updateLibraryClipboard()&#13;&#10;&#9;-- Set clipboard content label&#13;&#10;&#9;local component = panel:getComponent(&quot;libraryClipboardContent&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;local libraryClipboardLabel&#13;&#10;&#9;&#9;if libraryCliboardEmpty then&#13;&#10;&#9;&#9;&#9;libraryClipboardLabel = &quot;Empty&quot;&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;if libraryClipboardSourceIsLib then&#13;&#10;&#9;&#9;&#9;&#9;libraryClipboardLabel = &quot;Library &quot;&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;libraryClipboardLabel = &quot;Extern &quot;&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;libraryClipboardLabel = libraryClipboardLabel..libraryClipboardStart&#13;&#10;&#9;&#9;&#9;if libraryClipboardEnd &gt; libraryClipboardStart then&#13;&#10;&#9;&#9;&#9;&#9;libraryClipboardLabel = libraryClipboardLabel..&quot; - &quot;..libraryClipboardEnd&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;libraryClipboardLabel = libraryClipboardLabel..&quot; : &quot;..libraryClipboard[1][&quot;name&quot;]&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;component:setComponentText(libraryClipboardLabel)&#13;&#10;&#9;end&#13;&#10;&#9;-- Enable / disable paste button&#13;&#10;&#9;local component = panel:getComponent(&quot;libraryEditorPaste&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled((not libraryCliboardEmpty) and (librarySelectionStart == librarySelectionEnd) and (not libraryEditorExternal))&#13;&#10;&#9;end&#13;&#10;&#9;-- Enable / disable undo button&#13;&#10;&#9;local component = panel:getComponent(&quot;libraryEditorUndo&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled(not libraryUndoEmpty and not libraryEditorExternal)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function updateExternalModeDisplay()&#13;&#10;&#9;-- Enable / disable edit buttons&#13;&#10;&#9;local component = panel:getComponent(&quot;libraryEditorDec4&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled(not libraryEditorExternal)&#13;&#10;&#9;end&#13;&#10;&#9;component = panel:getComponent(&quot;libraryEditorDec1&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled(not libraryEditorExternal)&#13;&#10;&#9;end&#13;&#10;&#9;component = panel:getComponent(&quot;libraryEditorInc1&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled(not libraryEditorExternal)&#13;&#10;&#9;end&#13;&#10;&#9;component = panel:getComponent(&quot;libraryEditorInc4&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled(not libraryEditorExternal)&#13;&#10;&#9;end&#13;&#10;&#9;-- Enable / disable toggle&#13;&#10;&#9;component = panel:getComponent(&quot;libraryExternalToggle&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled(externalPresetsLoaded)&#13;&#10;&#9;end&#13;&#10;&#9;component = panel:getComponent(&quot;libraryExternalToggleLabel&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;component:setEnabled(externalPresetsLoaded)&#13;&#10;&#9;end&#13;&#10;&#9;-- Set file name&#13;&#10;&#9;component = panel:getComponent(&quot;libraryExternalFile&quot;)&#13;&#10;&#9;if component ~= nil then&#13;&#10;&#9;&#9;local externalFileName&#13;&#10;&#9;&#9;if externalPresetsLoaded then&#13;&#10;&#9;&#9;&#9;externalFileName = currentExternalFile&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;externalFileName = &quot;&lt;?&gt;&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;component:setComponentText(externalFileName)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function giveFocusToKeyLogger()&#13;&#10;&#9;panel:getComponent(&quot;keyLogger&quot;):grabKeyboardFocus()&#10;end&#13;&#10;&#13;&#10;function isGm40()&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10; &#9;&#9;return true&#13;&#10;&#9;else&#13;&#10; &#9;&#9;return false&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function getAmpTypeExtension()&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10;&#9;&#9;return &quot;*.gm40&quot;&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return &quot;*.gm36&quot;&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function switchAmpType(newAmpType)&#13;&#10;&#9;if newAmpType ~= ampType then&#13;&#10;&#9;&#9;ampType = newAmpType&#13;&#10;&#9;&#9;panel:getComponent(&quot;ampType&quot;):setComponentText(ampType)&#13;&#10;&#9;&#9;-- Update factory preset names&#13;&#10;&#9;&#9;local originalLibraryFile = currentLibraryFile&#13;&#10;&#9;&#9;if isGm40() then&#13;&#10;&#9;&#9;&#9;factoryPresetNames = factoryPresetNamesGm40&#13;&#10;&#9;&#9;&#9;currentLibraryFile = string.gsub(currentLibraryFile,&quot;/gm36/factory%.gm36&quot;,&quot;/gm40/factory.gm40&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;factoryPresetNames = factoryPresetNamesGm36&#13;&#10;&#9;&#9;&#9;currentLibraryFile = string.gsub(currentLibraryFile,&quot;/gm40/factory%.gm40&quot;,&quot;/gm36/factory.gm36&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Update library if needed&#13;&#10;&#9;&#9;--console(&quot;Current &quot;..currentLibraryFile..&quot; original &quot;..originalLibraryFile)&#13;&#10;&#9;&#9;if currentLibraryFile ~= originalLibraryFile then&#13;&#10;&#9;&#9;&#9;libraryPresets = loadLibraryFromFile()&#13;&#10;&#9;&#9;&#9;ampPresets = loadAmpFromFile()&#13;&#10;&#9;&#9;&#9;setLibraryFileName()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Update combo&#13;&#10;&#9;&#9;initPresetCombo()&#13;&#10;&#9;&#9;-- Update Power Soak labels&#13;&#10;&#9;&#9;setPowerSoakLabels()&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function setPowerSoakLabels()&#13;&#10;&#9;if isGm40() then&#13;&#10;&#9;&#9;panel:getComponent(&quot;powerSoakHalf&quot;):setComponentText(&quot;20W&quot;)&#13;&#10;&#9;&#9;panel:getComponent(&quot;powerSoakFull&quot;):setComponentText(&quot;40W&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;panel:getComponent(&quot;powerSoakHalf&quot;):setComponentText(&quot;18W&quot;)&#13;&#10;&#9;&#9;panel:getComponent(&quot;powerSoakFull&quot;):setComponentText(&quot;36W&quot;)&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaPanelLoaded" luaMethodSource="0"
                 uuid="3d2b3d9d1e7f40159d61b00c4ce8d3a9" luaMethodValid="1"/>
      <luaMethod luaMethodName="setPresetCombo" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;setPresetCombo = function(mod, value)&#10;&#9;if panel:getBootstrapState()  or panel:getRestoreState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;--console(&quot;Set preset combo = &quot;..value)&#13;&#10;&#9;if not mutePresetComboChange then&#13;&#10;&#9;&#9;-- TODO understand why this is called on prog startup...&#13;&#10;&#9;&#9;changePresetNumber(value+1)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;mutePresetComboChange = true&#13;&#10;&#13;&#10;setComboSelection = function()&#13;&#10;&#9;combo = getPresetCombo()&#13;&#10;&#9;if combo ~= nil then&#13;&#10;&#9;&#9;mutePresetComboChange = true&#13;&#10;&#9;&#9;combo:setSelectedId(currentPresetNumber,0)&#13;&#10;&#9;&#9;mutePresetComboChange = false&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="f97b9a79f96d438b9738382657074618" luaMethodValid="1"/>
      <luaMethod luaMethodName="presetNameChanged" luaMethodCode="--&#10;-- Called when the contents of a Label are changed&#10;-- @label&#10;-- @newContent    a string that the label now contains&#10;--&#10;&#10;presetNameChanged = function(label, newContent)&#13;&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Get the presetsName array value for the current presetNumber&#13;&#10;&#9;local presetName&#13;&#10;&#9;if presets[currentPresetNumber] ~= nil then&#13;&#10;&#9;&#9;presetName = presets[currentPresetNumber][&quot;name&quot;]&#13;&#10;&#9;else&#13;&#10;&#9;&#9;presets[currentPresetNumber] = {}&#13;&#10;&#9;end&#13;&#10;&#9;if newContent ~= presetName then&#13;&#10;&#9;&#9;-- Preset name was edited =&gt; update the presetNames array&#13;&#10;&#9;&#9;--console(&quot;Preset name updated for index &quot;..currentPresetNumber)&#13;&#10;&#9;&#9;-- Update edit buffer&#13;&#10;&#9;&#9;editBuffer[&quot;name&quot;] = newContent&#13;&#10;&#9;&#9;-- And current preset&#13;&#10;&#9;&#9;presets[currentPresetNumber][&quot;name&quot;] = newContent&#13;&#10;&#9;&#9;-- And update combo content&#13;&#10;&#9;&#9;combo = getPresetCombo()&#13;&#10;&#9;&#9;if combo ~= nil then&#13;&#10;&#9;&#9;&#9;combo:changeItemText(currentPresetNumber,&quot;&quot;..currentPresetNumber..&quot; - &quot;..newContent)&#13;&#10;&#9;&#9;&#9;setComboSelection()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Update dirty state&#13;&#10;&#9;&#9;if isLibrary and not libraryDirty then&#13;&#10;&#9;&#9;&#9;libraryDirty = true&#13;&#10;&#9;&#9;&#9;setLibraryFileName()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#10;end"
                 luaMethodLinkedProperty="uiLabelChangedCbk" luaMethodSource="0"
                 uuid="eba94a811f8547e78e7fd00f274c09ff" luaMethodValid="1"/>
      <luaMethod luaMethodName="bpmValueChanged" luaMethodCode="--&#10;-- Called when the contents of a Label are changed&#10;-- @label&#10;-- @newContent    a string that the label now contains&#10;--&#10;&#13;&#10;-- Global flag used to disable this callback when value is changed programmatically&#13;&#10;stopBpmValueChangePropagation = false&#13;&#10;&#10;bpmValueChanged = function(label, newContent)&#13;&#10;&#9;if stopBpmValueChangePropagation or panel:getBootstrapState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local newDelayValue = currentDelayValue&#13;&#10;&#9;--console(&quot;currentDelayValue&quot;..currentDelayValue)&#13;&#10;&#9;if newContent ~= &quot;&quot; then&#13;&#10;&#9;&#9;local value = tonumber(newContent)&#13;&#10;&#9;&#9;if value &gt;= 44 and value &lt;= 750 then&#13;&#10;&#9;&#9;&#9;--console(&quot;BPM&quot;..value)&#13;&#10;&#9;&#9;&#9;delayTime = 60000 / value&#13;&#10;&#9;&#9;&#9;--console(&quot;Delay time ms &quot;..delayTime)&#13;&#10;&#9;&#9;&#9;newDelayValue = math.floor((delayTime-51) / 5.13333)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;setDelayTime(newDelayValue,true,true,true,true)&#13;&#10;end"
                 luaMethodLinkedProperty="uiLabelChangedCbk" luaMethodSource="0"
                 uuid="2ea78ad93e2a43998e345f23553e4c84" luaMethodValid="1"/>
      <luaMethod luaMethodName="saveData" luaMethodCode="--&#10;-- Called when data needs saving&#10;--&#10;saveData = function(stateData)&#13;&#10;&#9;stateData:setProperty(&quot;currentPresetNumber&quot;,currentPresetNumber,nil)&#13;&#10;&#9;stateData:setProperty(&quot;currentLibraryFile&quot;,currentLibraryFile,nil)&#13;&#10;&#9;stateData:setProperty(&quot;ingoredVersionUpdate&quot;,ingoredVersionUpdate,nil)&#13;&#10;&#9;stateData:setProperty(&quot;globalPowerSoak&quot;,globalPowerSoakValue,nil)&#13;&#10;&#9;stateData:setProperty(&quot;currentExternalFile&quot;,currentExternalFile,nil)&#13;&#10;&#9;stateData:setProperty(&quot;ampType&quot;,ampType,nil)&#13;&#10;&#13;&#10;&#9;-- TODO save on store and presetNameChanged instead&#13;&#10;&#9;saveAmpToFile()&#13;&#10;&#9;-- Save library if dirty&#13;&#10;&#9;if libraryDirty then&#13;&#10;&#9;&#9;local backupLibraryFileName = currentLibraryFile&#13;&#10;&#9;&#9;backupLibraryFileName = string.gsub(backupLibraryFileName,&quot;%.gm36&quot;,&quot;.backup.gm36&quot;)&#13;&#10;&#9;&#9;backupLibraryFileName = string.gsub(backupLibraryFileName,&quot;%.gm40&quot;,&quot;.backup.gm40&quot;)&#13;&#10;&#9;&#9;savePresetsToFile(backupLibraryFileName,libraryPresets)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;saveAmpToFile = function()&#13;&#10;&#9;if isGm40() then&#13;&#10;&#9;&#9;savePresetsToFile(File.getSpecialLocation(File.userHomeDirectory):getFullPathName()..&quot;/gm40/amp.store&quot;,ampPresets)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;savePresetsToFile(File.getSpecialLocation(File.userHomeDirectory):getFullPathName()..&quot;/gm36/amp.store&quot;,ampPresets)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;saveLibraryToFile = function()&#13;&#10;&#9;savePresetsToFile(currentLibraryFile,libraryPresets)&#13;&#10;&#9;libraryDirty = false&#13;&#10;&#9;lastPresetDirty = false&#13;&#10;&#9;setLibraryFileName()&#13;&#10;end&#13;&#10;&#13;&#10;saveLibraryAs = function(newFilePath)&#13;&#10;&#9;currentLibraryFile = newFilePath&#13;&#10;&#9;savePresetsToFile(newFilePath,libraryPresets)&#13;&#10;&#9;libraryDirty = false&#13;&#10;&#9;lastPresetDirty = false&#13;&#10;&#9;setLibraryFileName()&#13;&#10;end&#13;&#10;&#13;&#10;saveLibraryForIpad = function(newFilePath)&#13;&#10;&#9;saveToBinary(newFilePath,libraryPresets)&#13;&#10;end&#13;&#10;&#13;&#10;savePresetsToFile = function(path,presetsToSave)&#13;&#10;&#9;--if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;--&#9;return&#13;&#10;&#9;--end&#13;&#10;&#9;--console(&quot;Saving...&quot;)&#13;&#10;&#9;local file = File(path)&#13;&#10;&#9;-- Create parent dir if needed&#13;&#10;&#9;local parent = file:getParentDirectory()&#13;&#10;&#9;if not parent:exists() then&#13;&#10;&#9;&#9;parent:createDirectory()&#13;&#10;&#9;end&#13;&#10;&#9;local content = &quot;&quot;&#13;&#10;&#9;local presetName = &quot;&quot;&#13;&#10;&#9;for i,v in ipairs(presetsToSave) do&#13;&#10;&#9;&#9;content = content..&quot;[preset]\n&quot;&#13;&#10;&#9;&#9;-- First save preset number&#13;&#10;&#9;&#9;content = content..&quot;number&quot;..&quot;=&quot;..(v[&quot;number&quot;])..&quot;\n&quot;&#13;&#10;&#9;&#9;-- Then preset name&#13;&#10;&#9;&#9;if v[&quot;name&quot;] ~= nil then&#13;&#10;&#9;&#9;&#9;presetName = v[&quot;name&quot;]&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;presetName = &quot;Preset &quot;..i&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;content = content..&quot;name&quot;..&quot;=&quot;..presetName..&quot;\n&quot;&#13;&#10;&#9;&#9;-- And finally iterate on controllers&#13;&#10;&#9;&#9;for kk, vv in pairs(controllers) do&#13;&#10;&#9;&#9;&#9;content = content..vv..&quot;=&quot;..(v[vv])..&quot;\n&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;if content ~= &quot;&quot; then&#13;&#10;&#9;&#9;--console(content)&#13;&#10;&#9;&#9;if file:replaceWithText (content, false, false) == false then&#13;&#10;&#9;&#9;&#9;utils.warnWindow (&quot;File write&quot;, &quot;Failed to write data to file: &quot;..file:getFullPathName())&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;end&#13;&#10;&#13;&#10;&#13;&#10;-- Save bp list code&#13;&#10;&#13;&#10;&#13;&#10;function saveToBinary(path,presetsToSave)&#13;&#10;&#9;--console(&quot;Saving...&quot;)&#13;&#10;&#9;local file = File(path)&#13;&#10;&#9;-- Create parent dir if needed&#13;&#10;&#9;local parent = file:getParentDirectory()&#13;&#10;&#9;if not parent:exists() then&#13;&#10;&#9;&#9;parent:createDirectory()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Get library name from file path&#13;&#10;&#9;local libraryName = file:getFileName()&#13;&#10;&#9;if libraryName ~= nil then&#13;&#10;&#9;&#9;libraryName = string.gsub(libraryName, &quot;%.gm36memory&quot;, &quot;&quot;)&#13;&#10;&#9;&#9;libraryName = string.gsub(libraryName, &quot;%.gm40memory&quot;, &quot;&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;libraryName = &quot;Desktop remote library&quot;&#13;&#10;&#9;end&#13;&#10;&#9;-- write object&#13;&#10;&#9;if file:replaceWithData(MemoryBlock(convertToBinary(presetsToSave,libraryName))) == false then&#13;&#10;&#9;&#9;utils.warnWindow (&quot;File write&quot;, &quot;Failed to write data to file: &quot;..file:getFullPathName())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;end&#13;&#10;&#13;&#10;-- Global buffer and counter&#13;&#10;entries = {}&#13;&#10;reversedEntries = {}&#13;&#10;entriesIndex = 0&#13;&#10;data = {0}&#13;&#10;dataIndex = 0&#13;&#10;idSizeInBytes = 0&#13;&#10;offsetSizeInBytes = 0&#13;&#10;offsets = {}&#13;&#10;&#13;&#10;function convertToBinary(presetsToSave,libraryName)&#13;&#10;&#9;local rootDict = convertToDict(presetsToSave,libraryName)&#13;&#10;&#9;return serializeDict(rootDict)&#13;&#10;end&#13;&#10;&#13;&#10;function convertToDict(presetsToSave,libraryName)&#13;&#10;&#13;&#10;&#9;local rootDict = {}&#13;&#10;&#9;local rootDictObjects = {}&#13;&#10;&#9;local rootObjectsIndex = 1&#13;&#10;&#9;rootDict[&quot;$version&quot;] = 100000&#13;&#10;&#9;rootDict[&quot;$objects&quot;] = rootDictObjects&#13;&#10;&#9;rootDict[&quot;$archiver&quot;] = &quot;NSKeyedArchiver&quot;&#13;&#10;&#9;local topDict = {}&#13;&#10;&#9;topDict[&quot;root&quot;] = {}&#13;&#10; &#9;topDict[&quot;root&quot;]=Uid(1)&#13;&#10;&#9;rootDict[&quot;$top&quot;] = topDict&#13;&#10;&#9;-- Add nil string [0]&#13;&#10;&#9;rootDictObjects[rootObjectsIndex]=&quot;$null&quot;&#13;&#10;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;-- Add gm36memory object [1]&#13;&#10;&#9;local gmMemory = {}&#13;&#10;&#9;rootDictObjects[rootObjectsIndex]=gmMemory&#13;&#10;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;-- Add presets array [2]&#13;&#10;&#9;local presetsArrayObject = {}&#13;&#10;&#9;rootDictObjects[rootObjectsIndex]=presetsArrayObject&#13;&#10;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;-- Add Class to objects : GM36Preset [3] / NSMutableArray [4] / GM36Memory [5]&#13;&#10;&#9;-- TODO handle GM40 format ?&#13;&#10;&#9;rootDictObjects[rootObjectsIndex]=createClass(&quot;GM36Preset&quot;,&quot;NSObject&quot;)&#13;&#10;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;rootDictObjects[rootObjectsIndex]=createClass(&quot;NSMutableArray&quot;,&quot;NSArray&quot;, &quot;NSObject&quot;)&#13;&#10;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;rootDictObjects[rootObjectsIndex]=createClass(&quot;GM36Memory&quot;,&quot;NSObject&quot;)&#13;&#10;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;-- Add library name [6]&#13;&#10;&#9;rootDictObjects[rootObjectsIndex]=libraryName&#13;&#10;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;-- Build GM36 memory object&#13;&#10;&#9;gmMemory[&quot;presets&quot;]=Uid(2)&#13;&#10;&#9;gmMemory[&quot;$class&quot;]=Uid(5)&#13;&#10;&#9;gmMemory[&quot;readOnly&quot;]=false&#13;&#10;&#9;gmMemory[&quot;name&quot;]=Uid(6)&#13;&#10;&#9;gmMemory[&quot;activePresetNumber&quot;]=0&#13;&#10;&#9;gmMemory[&quot;version&quot;]=1&#13;&#10;&#9;-- Build ns array object&#13;&#10;&#9;presetsArrayObject[&quot;$class&quot;]=Uid(4)&#13;&#10;&#9;local presetsArray = {}&#13;&#10;&#9;presetsArrayObject[&quot;NS.objects&quot;]= presetsArray&#13;&#10;&#9;-- Build presets array&#13;&#10;&#9;local presetNameIndex&#13;&#10;&#9;local presetIndex&#13;&#10;&#9;local currentPreset&#13;&#10;&#9;for i,preset in ipairs(presetsToSave) do&#13;&#10;&#9;&#9;--if i &gt; 125 then break end&#13;&#10;&#9;&#9;presetNameIndex = rootObjectsIndex-1&#13;&#10;&#9;&#9;-- Add preset name to objects&#13;&#10;&#9;&#9;rootDictObjects[rootObjectsIndex]=preset[&quot;name&quot;]&#13;&#10;&#9;&#9;presetIndex = rootObjectsIndex&#13;&#10;&#9;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;&#9;-- Add preset to objects&#13;&#10;&#9;&#9;currentPreset = {}&#13;&#10;&#9;&#9;presetsArray[i]=Uid(presetIndex)&#13;&#10;&#9;&#9;rootDictObjects[rootObjectsIndex]=currentPreset&#13;&#10;&#9;&#9;rootObjectsIndex = rootObjectsIndex+1&#13;&#10;&#9;&#9;-- Pream boost&#13;&#10;&#9;&#9;value = convertDictValue2(preset[&quot;channelBoost&quot;])&#10;&#9;&#9;currentPreset[&quot;boost&quot;]=value&#10;&#9;&#9;-- Delay Time&#13;&#10;&#9;&#9;-- Min val = 51, max val = 1360 =&gt; range = 1309&#13;&#10;&#9;&#9;value = (((preset[&quot;delayTime&quot;]*1309)/255)+51)&#10;&#9;&#9;currentPreset[&quot;delayTime&quot;]=Float(value)&#10;&#9;&#9;-- Volume&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;volume&quot;])&#10;&#9;&#9;currentPreset[&quot;volume&quot;]=value&#10;&#9;&#9;-- Bass&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;bass&quot;])&#10;&#9;&#9;currentPreset[&quot;bass&quot;]=value&#10;&#9;&#9;-- Presence&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;presence&quot;])&#10;&#9;&#9;currentPreset[&quot;presence&quot;]=value&#10;&#9;&#9;-- Mid&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;mid&quot;])&#10;&#9;&#9;currentPreset[&quot;mid&quot;]=value&#10;&#9;&#9;-- Speaker off&#13;&#10;&#9;&#9;if preset[&quot;powerSoak&quot;]==0 then&#13;&#10;&#9;&#9;&#9;currentPreset[&quot;speakerOff&quot;] = true&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;currentPreset[&quot;speakerOff&quot;] = false&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Resonance&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;resonance&quot;])&#10;&#9;&#9;currentPreset[&quot;resonance&quot;]=value&#10;&#9;&#9;-- Preset number&#13;&#10;&#9;&#9;currentPreset[&quot;presetNumber&quot;]=preset[&quot;number&quot;]-1&#13;&#10;&#9;&#9;-- Class&#13;&#10;&#9;&#9;currentPreset[&quot;$class&quot;]=Uid(3)&#13;&#10;&#9;&#9;-- Preamp channel&#13;&#10;&#9;&#9;value = convertDictValue4(preset[&quot;channelType&quot;])&#10;&#9;&#9;currentPreset[&quot;soundChannel&quot;]=value&#10;&#9;&#9;-- Reverb&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;reverb&quot;])&#10;&#9;&#9;currentPreset[&quot;reverbLevel&quot;]=value&#13;&#10;&#9;&#9;-- Version&#10;&#9;&#9;currentPreset[&quot;version&quot;]=1&#13;&#10;&#9;&#9;-- Preset name&#13;&#10;&#9;&#9;currentPreset[&quot;name&quot;]=Uid(presetNameIndex)&#13;&#10;&#9;&#9;-- Mod rate&#13;&#10;&#9;&#9;value = convertDictValue63(preset[&quot;modType&quot;]%64)&#10;&#9;&#9;currentPreset[&quot;modRate&quot;]=value&#10;&#9;&#9;-- Fx loop&#13;&#10;&#9;&#9;value = convertDictValue2(preset[&quot;fxLoop&quot;])&#10;&#9;&#9;currentPreset[&quot;fxLoop&quot;]=value&#10;&#9;&#9;-- Treble&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;treble&quot;])&#10;&#9;&#9;currentPreset[&quot;treble&quot;]=value&#10;&#9;&#9;-- Mod rate / type&#13;&#10;&#9;&#9;value = math.floor(preset[&quot;modType&quot;]/64)&#10;&#9;&#9;currentPreset[&quot;modType&quot;]=value&#10;&#9;&#9;-- Delay level&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;delayLevel&quot;])&#10;&#9;&#9;currentPreset[&quot;delayLevel&quot;]=value&#10;&#9;&#9;-- Preset bank&#13;&#10;&#9;&#9;currentPreset[&quot;presetBank&quot;]=127&#13;&#10;&#9;&#9;-- Noise Gate&#13;&#10;&#9;&#9;value = convertDictValue2(preset[&quot;noiseGate&quot;])&#10;&#9;&#9;currentPreset[&quot;noiseGate&quot;]=value&#13;&#10;&#9;&#9;-- Power soak&#13;&#10;&#9;&#9;if preset[&quot;powerSoak&quot;]==0 then&#13;&#10;&#9;&#9;&#9;currentPreset[&quot;speakerPower&quot;] = 3&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;currentPreset[&quot;speakerPower&quot;] = convertDictValue5(preset[&quot;powerSoak&quot;]-1)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Gain&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;gain&quot;])&#13;&#10;&#9;&#9;currentPreset[&quot;gain&quot;]=value&#13;&#10;&#9;&#9;-- Delay Feedback&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;delayFeedback&quot;])&#10;&#9;&#9;currentPreset[&quot;delayFeedback&quot;]=value&#10;&#9;&#9;-- Mod intensity&#13;&#10;&#9;&#9;value = convertDictValue255(preset[&quot;modIntensity&quot;])&#10;&#9;&#9;currentPreset[&quot;modIntensity&quot;]=value&#10;&#9;&#9;--currentPreset[&quot;author&quot;]=Uid(presetNameIndex)&#13;&#10;&#9;&#9;currentPreset[&quot;author&quot;]=Uid(0)&#13;&#10;&#9;end&#13;&#10;&#9;return rootDict&#13;&#10;end&#13;&#10;&#13;&#10;function convertDictValue255(value)&#13;&#10;&#9;return Float(value*100/255)&#13;&#10;end&#13;&#10;&#13;&#10;function convertDictValue63(value)&#13;&#10;&#9;return Float(value*100/63)&#13;&#10;end&#13;&#10;&#13;&#10;function convertDictValue4(value)&#13;&#10;&#9;return math.floor(value/42)&#13;&#10;end&#13;&#10;&#13;&#10;function convertDictValue5(value)&#13;&#10;&#9;return math.floor(value/31)&#13;&#10;end&#13;&#10;&#13;&#10;function convertDictValue2(value)&#13;&#10;&#9;if value &gt;= 63 then&#13;&#10;&#9;&#9;return true&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return false&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;function createClass(className,parentClassName,grandParentClassName)&#13;&#10;&#9;local classDict = {}&#13;&#10;&#9;if grandParentClassName == nil then&#13;&#10;&#9;&#9;classDict[&quot;$classes&quot;] = {className , parentClassName}&#13;&#10;&#9;else&#13;&#10;&#9;&#9;classDict[&quot;$classes&quot;] = {className , parentClassName, grandParentClassName}&#13;&#10;&#9;end&#13;&#10;&#9;classDict[&quot;$classname&quot;] = className&#13;&#10;&#9;return classDict&#13;&#10;end&#13;&#10;&#13;&#10;function serializeDict(rootDict)&#13;&#10;&#9;-- Init globals&#13;&#10;&#9;entries = {}&#13;&#10;&#9;reversedEntries = {}&#13;&#10;&#9;entriesIndex = 1&#13;&#10;&#9;data = {0x62, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x30, 0x30}&#13;&#10;&#9;dataIndex = 9&#13;&#10;&#9;idSizeInBytes = 0&#13;&#10;&#9;offsetSizeInBytes = 0&#13;&#10;&#9;offsets = {}&#13;&#10;&#13;&#10;&#9;dictToEntry(rootDict)&#13;&#10;&#13;&#10;&#9;idSizeInBytes = computeIdSizeInBytes(entriesIndex)&#13;&#10;&#13;&#10;&#9;for i,entry in ipairs(entries) do&#13;&#10;&#9;&#9;--console(&quot;wrinting entry &quot;..i)&#13;&#10;&#9;&#9;offsets[i] = dataIndex-1&#13;&#10;&#9;&#9;writeEntry(entry)&#13;&#10;&#9;end&#13;&#10; &#9;&#13;&#10;&#9;--console(&quot;Write offsetTable&quot;)&#13;&#10;&#9;writeOffsetTable()&#13;&#10;&#9;--console(&quot;Write trailer&quot;)&#13;&#10;&#9;writeTrailer()&#13;&#10;&#9;&#13;&#10;&#9;return data&#13;&#10;end&#13;&#10;&#13;&#10;function toEntries(object)&#13;&#10;&#9;if type(object) == 'table' then&#13;&#10;&#9;&#9;if object.isFloat then&#13;&#10;&#9;&#9;&#9;return addEntry(object)&#13;&#10;&#9;&#9;elseif object.isUid then&#13;&#10;&#9;&#9;&#9;return addEntry(object)&#13;&#10;&#9;&#9;elseif isArray(object) then&#13;&#10;      &#9;&#9;return arrayToEntry(object)&#13;&#10;&#9;&#9;else&#13;&#10;      &#9;&#9;return dictToEntry(object)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;elseif type(object) == 'string' then&#13;&#10;      return addEntry(object)&#13;&#10;&#9;elseif type(object) == 'number' then&#13;&#10;      return addEntry(object);&#13;&#10;&#9;elseif type(object) == 'boolean' then&#13;&#10;      return addEntry(object);&#13;&#10;&#9;else&#13;&#10;      return addEntry(object);&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function isArray(table)&#13;&#10;&#9;for k,v in pairs(table) do&#13;&#10;&#9;&#9;-- Acceptable approximation : a table with a numeric key is an array&#13;&#10;&#9;&#9;if type(k) == 'number' then&#13;&#10;&#9;&#9;&#9;return true&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;return false&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;return true&#13;&#10;end&#13;&#10;&#13;&#10;function dictToEntry(dict)&#13;&#10;&#9;local dictEntry = {}&#13;&#10;&#9;local dictIndex = addEntry(dictEntry)&#13;&#10;&#9;for k,v in pairs(dict) do&#13;&#10;&#9;&#9;local kIndex = addEntry(k)&#13;&#10;&#9;&#9;local vIndex = toEntries(v)&#13;&#10;      &#9;dictEntry[kIndex]=vIndex&#13;&#10;&#9;&#9;--console(&quot;Adding key &quot;..kIndex..&quot; value &quot;..vIndex)&#13;&#10;&#9;end&#13;&#10;&#9;return dictIndex&#13;&#10;end&#13;&#10;&#13;&#10;function arrayToEntry(array)&#13;&#10;&#9;--console(&quot;Adding array &quot;)&#13;&#10;&#9;local arrayEntry = {}&#13;&#10;&#9;setmetatable(arrayEntry, {__isarray = true})&#13;&#10;&#9;local arrayIndex = addEntry(arrayEntry)&#13;&#10;&#9;for i,v in ipairs(array) do&#13;&#10;&#9;&#9;local vIndex = toEntries(v)&#13;&#10;      &#9;arrayEntry[i]=vIndex&#13;&#10;&#9;&#9;--console(&quot;Adding array item &quot;..i)&#13;&#10;&#9;end&#13;&#10;&#9;return arrayIndex&#13;&#10;end&#13;&#10;&#13;&#10;function addEntry(entry)&#13;&#10;&#9;--console(&quot;Add entry &quot;..entriesIndex..&quot; of type &quot;..type(entry))&#13;&#10;&#9;local previousIndex = reversedEntries[entry]&#13;&#10;&#9;if previousIndex ~= nil then&#13;&#10;&#9;&#9;return previousIndex&#13;&#10;&#9;else&#13;&#10;&#9;&#9;local entryIndex = entriesIndex - 1&#13;&#10;&#9;&#9;entries[entriesIndex] = entry&#13;&#10;&#9;&#9;reversedEntries[entry] = entryIndex&#13;&#10;&#9;&#9;entriesIndex = entriesIndex + 1&#13;&#10;&#9;&#9;return entryIndex&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function writeEntry(entry)&#13;&#10;&#9;if type(entry) == 'table' then&#13;&#10;&#9;&#9;if (getmetatable(entry) ~= nil and getmetatable(entry).__isarray) then&#13;&#10;&#9;&#9;&#9;--console(&quot;write array entry&quot;)&#13;&#10;      &#9;&#9;writeArray(entry)&#13;&#10;&#9;&#9;elseif entry.isFloat then&#13;&#10;&#9;&#9;&#9;--console(&quot;write float&quot;)&#13;&#10;      &#9;&#9;writeNumber(entry.floatValue,false);&#13;&#10;&#9;&#9;elseif entry.isUid then&#13;&#10;&#9;&#9;&#9;--console(&quot;write uid&quot;)&#13;&#10;      &#9;&#9;writeUid(entry.uidValue,entry.uidSize);&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;--console(&quot;write dict entry&quot;)&#13;&#10;      &#9;&#9;writeDict(entry)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;elseif type(entry) == 'string' then&#13;&#10;      writeString(entry)&#13;&#10;&#9;elseif type(entry) == 'number' then&#13;&#10;      writeNumber(entry,true);&#13;&#10;&#9;elseif type(entry) == 'boolean' then&#13;&#10;      writeBoolean(entry);&#13;&#10;&#9;else&#13;&#10;      writeData(entry);&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function writeDict(entry)&#13;&#10;    writeIntHeader(0xD, tablelength(entry))&#13;&#10;&#9;for i,v in pairs(entry) do&#13;&#10;      writeID(i)&#13;&#10;&#9;end&#13;&#10;&#9;for i,v in pairs(entry) do&#13;&#10;      writeID(v)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function writeArray(entry)&#13;&#10;    writeIntHeader(0xA, tablelength(entry));&#13;&#10;&#9;for i,v in ipairs(entry) do&#13;&#10;&#9;&#9;--console(&quot;Writing array entry id &quot;..v)&#13;&#10;      writeID(v)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function writeNumber(entry,isInt)&#13;&#10;    if isInt then -- integer case&#13;&#10;      if entry &lt; 0 then&#13;&#10;        writeByte(0x13)&#13;&#10;        writeBytes(entry, 8)&#13;&#10;      elseif (entry &lt;= 0xff) then&#13;&#10;        writeByte(0x10)&#13;&#10;        writeBytes(entry, 1)&#13;&#10;      elseif (entry &lt;= 0xffff) then&#13;&#10;        writeByte(0x11);&#13;&#10;        writeBytes(entry, 2)&#13;&#10;      elseif (entry &lt;= 0xffffffff) then&#13;&#10;        writeByte(0x12)&#13;&#10;        writeBytes(entry, 4)&#13;&#10;      else&#13;&#10;        writeByte(0x13)&#13;&#10;        writeBytes(entry, 8)&#13;&#10;      end&#13;&#10;    else &#13;&#10;      writeByte(0x22);&#13;&#10;      writeFloat(entry)&#13;&#10;    end&#13;&#10;end&#13;&#10;&#13;&#10;function writeUid(entry,size)&#13;&#10;    if size == 1 then&#13;&#10;    &#9;writeIntHeader(0x8, 0x0)&#13;&#10;    elseif size == 2 then&#13;&#10;    &#9;writeIntHeader(0x8, 0x1)&#13;&#10;    elseif size == 4 then&#13;&#10;    &#9;writeIntHeader(0x8, 0x2)&#13;&#10;    else&#13;&#10;    &#9;writeIntHeader(0x8, 0x3)&#13;&#10;    end&#13;&#10;    writeBytes(entry,size)&#13;&#10;end&#13;&#10;&#13;&#10;function writeString(entry)&#13;&#10;&#9;--console(&quot;wrinting string &quot;..entry)&#13;&#10;  &#9;writeIntHeader(0x5, string.len(entry));&#13;&#10;&#9;for i = 1, string.len(entry) do&#13;&#10;    &#9;writeByte(string.byte(entry,i))&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function writeData(entry)&#13;&#10;    writeIntHeader(0x4, tablelength(entry));&#13;&#10;    -- TODObuffer.write(entry.value);&#13;&#10;end&#13;&#10;&#13;&#10;function writeLong(l)&#13;&#10;    writeBytes(l, 8)&#13;&#10;end&#13;&#10;&#13;&#10;function writeByte(b)&#13;&#10;    -- TODO buffer.write(new Buffer([b]));&#13;&#10;&#9;data[dataIndex] = b&#13;&#10;&#9;dataIndex = dataIndex + 1&#13;&#10;&#9;--console(&quot;Writing byte &quot;..b)&#13;&#10;end&#13;&#10;&#13;&#10;function writeFloat(n)&#13;&#10;&#9;--console(&quot;Writing float &quot;..n)&#13;&#10;&#9;if n == 0.0 then &#13;&#10;        writeBytes(0x00,4)&#13;&#10;&#9;else&#13;&#10;    &#9;local sign = 0&#13;&#10;    &#9;if n &lt; 0.0 then&#13;&#10;        &#9;sign = 0x80&#13;&#10;        &#9;n = -n&#13;&#10;    &#9;end&#13;&#10;&#13;&#10;    &#9;local mant, expo = math.frexp(n)&#13;&#10;&#13;&#10;    &#9;if mant ~= mant then&#13;&#10;&#9;&#9;&#9;writeBytes(0xFF800000,4)&#13;&#10;    &#9;elseif mant == math.huge or expo &gt; 0x80 then&#13;&#10;        &#9;if sign == 0 then&#13;&#10;&#9;&#9;&#9;&#9;writeBytes(0x7F800000,4)&#13;&#10;        &#9;else&#13;&#10;&#9;&#9;&#9;&#9;writeBytes(0xFF800000,4)&#13;&#10;        &#9;end&#13;&#10;    &#9;elseif (mant == 0.0 and expo == 0) or expo &lt; -0x7E then&#13;&#10;&#9;&#9;&#9;writeByte(sign)&#13;&#10;&#9;&#9;&#9;writeByte(0x00)&#13;&#10;&#9;&#9;&#9;writeByte(0x00)&#13;&#10;&#9;&#9;&#9;writeByte(0x00)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;--console(&quot;Writing mant &quot;..mant..&quot;expo &quot;..expo)&#13;&#10;        &#9;expo = expo + 0x7E&#13;&#10;        &#9;mant = (mant * 2.0 - 1.0) * math.ldexp(0.5, 24)&#13;&#10;&#9;&#9;&#9;writeByte(sign + math.floor(expo / 0x2))&#13;&#10;&#9;&#9;&#9;writeByte((expo % 0x2) * 0x80 + math.floor(mant / 0x10000))&#13;&#10;&#9;&#9;&#9;writeByte(math.floor(mant / 0x100) % 0x100)&#13;&#10;&#9;&#9;&#9;writeByte(math.floor(mant % 0x100))&#13;&#10;    &#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function writeIntHeader(kind, value)&#13;&#10;    if (value &lt; 15) then&#13;&#10;      &#9;writeByte(bit.lshift(kind, 4) + value)&#13;&#10;    elseif (value &lt; 256) then&#13;&#10;      &#9;writeByte(bit.lshift(kind,4) + 15)&#13;&#10;      &#9;writeByte(0x10)&#13;&#10;      &#9;writeBytes(value, 1)&#13;&#10;    elseif (value &lt; 65536) then&#13;&#10;      &#9;writeByte(bit.lshift(kind,4) + 15)&#13;&#10;      &#9;writeByte(0x11)&#13;&#10;      &#9;writeBytes(value, 2)&#13;&#10;    else&#13;&#10;      &#9;writeByte(bit.lshift(kind,4) + 15)&#13;&#10;      &#9;writeByte(0x12)&#13;&#10;      &#9;writeBytes(value, 4)&#13;&#10;    end&#13;&#10;end&#13;&#10;&#13;&#10;function writeBoolean(entry)&#13;&#10;&#9;if entry then&#13;&#10;    &#9;writeByte(0x09);&#13;&#10;&#9;else&#13;&#10;    &#9;writeByte(0x08);&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function writeID(id)&#13;&#10;    writeBytes(id, idSizeInBytes)&#13;&#10;end&#13;&#10;&#13;&#10;function writeBytes(value, bytes)&#13;&#10;&#9;-- write low-order bytes big-endian style&#13;&#10;&#9;local byteIndex = bytes - 1&#13;&#10;    -- doesn't handle large numbers&#13;&#10;&#9;for i=1,bytes do&#13;&#10;&#9;&#9;if byteIndex &gt;= 4 then&#13;&#10;&#9;&#9;&#9;writeByte(0x00)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;writeByte(bit.band(bit.rshift(value,(8 * byteIndex)), 0xFF))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;byteIndex =  byteIndex-1&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function tablelength(T)&#13;&#10;  local count = 0&#13;&#10;  for _ in pairs(T) do count = count + 1 end&#13;&#10;  return count&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;function computeOffsetSizeInBytes(maxOffset) &#13;&#10;&#9;-- console(&quot;Max offset = &quot;..maxOffset)&#13;&#10;  if (maxOffset &lt; 256) then&#13;&#10;    return 1&#13;&#10;  end&#13;&#10;  if (maxOffset &lt; 65536) then&#13;&#10;    return 2&#13;&#10;  end&#13;&#10;  if (maxOffset &lt; 4294967296) then&#13;&#10;    return 4&#13;&#10;  end&#13;&#10;  return 8&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;function computeIdSizeInBytes(numberOfIds) &#13;&#10;  -- console(&quot;Num of ids = &quot;..numberOfIds)&#13;&#10;  if (numberOfIds &lt; 256) then&#13;&#10;    return 1&#13;&#10;  end&#13;&#10;  if (numberOfIds &lt; 65536) then&#13;&#10;    return 2&#13;&#10;  end&#13;&#10;  return 4&#13;&#10;end&#13;&#10;&#13;&#10;function writeTrailer()&#13;&#10;    -- 6 null bytes&#13;&#10;&#9;--console(&quot;write nulls&quot;)&#13;&#10;&#9;writeByte(0)&#13;&#10;&#9;writeByte(0)&#13;&#10;&#9;writeByte(0)&#13;&#10;&#9;writeByte(0)&#13;&#10;&#9;writeByte(0)&#13;&#10;&#9;writeByte(0)&#13;&#10;&#13;&#10;&#9;--console(&quot;write offsetsize&quot;)&#13;&#10;    -- size of an offset&#13;&#10;    writeByte(offsetSizeInBytes);&#13;&#10;&#13;&#10;&#9;--console(&quot;write ref size&quot;)&#13;&#10;    -- size of a ref&#13;&#10;    writeByte(idSizeInBytes);&#13;&#10;&#13;&#10;&#9;--console(&quot;write obj numbers :&quot;..tablelength(entries))&#13;&#10;    -- number of objects&#13;&#10;    writeLong(tablelength(entries));&#13;&#10;&#13;&#10;&#9;--console(&quot;write top object&quot;)&#13;&#10;    -- top object&#13;&#10;    writeLong(0);&#13;&#10;&#13;&#10;&#9;--console(&quot;write offsetTableOfset &quot;..offsetTableOffset)&#13;&#10;    -- offset table offset&#13;&#10;    writeLong(offsetTableOffset);&#13;&#10;end&#13;&#10;&#13;&#10;function writeOffsetTable()&#13;&#10;    offsetTableOffset = dataIndex - 1&#13;&#10;    offsetSizeInBytes = computeOffsetSizeInBytes(offsetTableOffset)&#13;&#10;&#9;--console(&quot;offsetTableOfset = &quot;..offsetTableOffset..&quot; in bytes &quot;..offsetSizeInBytes)&#13;&#10;&#9;for i,offset in ipairs(offsets) do&#13;&#10; &#9;&#9;writeBytes(offset, offsetSizeInBytes)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function Float(value)&#13;&#10;  local self = { isFloat=true, floatValue=value }&#13;&#10;  -- return the instance&#13;&#10;  return self&#13;&#10;end&#13;&#10;&#13;&#10;function Uid(value, size)&#13;&#10;&#9;size = size or 2&#13;&#10;  &#9;local self = { isUid=true, uidValue=value, uidSize=size}&#13;&#10;  &#9;-- return the instance&#13;&#10;  &#9;return self&#13;&#10;end&#13;&#10;"
                 luaMethodLinkedProperty="luaPanelSaveState" luaMethodSource="0"
                 uuid="687de20c34cb487d9b0022df180389fd" luaMethodValid="1"/>
      <luaMethod luaMethodName="loadData" luaMethodCode="--&#10;-- Called when data is restored&#10;--&#10;loadData = function(stateData)&#13;&#10;&#9;local value = stateData:getProperty(&quot;currentPresetNumber&quot;)&#13;&#10;&#9;if value ~= nil and value ~= &quot;&quot; then&#13;&#10;&#9;&#9;currentPresetNumber = sanitizePresetNumber(value)&#13;&#10;&#9;end&#13;&#10;&#9;value = stateData:getProperty(&quot;ingoredVersionUpdate&quot;)&#13;&#10;&#9;if value ~= nil and value ~= &quot;&quot; then&#13;&#10;&#9;&#9;ingoredVersionUpdate = value&#13;&#10;&#9;end&#13;&#10;&#9;local value = stateData:getProperty(&quot;globalPowerSoak&quot;)&#13;&#10;&#9;if value ~= nil and value ~= &quot;&quot; then&#13;&#10;&#9;&#9;globalPowerSoakValue = tonumber(value)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;currentLibraryFile = stateData:getProperty(&quot;currentLibraryFile&quot;)&#13;&#10;&#9;currentExternalFile = stateData:getProperty(&quot;currentLibraryFile&quot;)&#13;&#10;&#9;-- Restore ampType if available&#13;&#10;&#9;local value = stateData:getProperty(&quot;ampType&quot;)&#13;&#10;&#9;if value ~= nil and value ~= &quot;&quot; then&#13;&#10;&#9;&#9;ampType = value&#13;&#10;&#9;end&#13;&#10;&#9;--loadFromFile(presets)&#13;&#10;&#9;&#13;&#10;&#9;-- Init presets and ui again now that we have restored data (we need to do it twice since load data is not called on first launch&#13;&#10;&#9;initPresets()&#13;&#10;&#9;initUi()&#13;&#10;end&#13;&#10;&#13;&#10;loadAmpFromFile = function()&#13;&#10;&#9;if isGm40() then&#13;&#10;&#9;&#9;return loadFromFile(File.getSpecialLocation(File.userHomeDirectory):getFullPathName()..&quot;/gm40/amp.store&quot;,false)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return loadFromFile(File.getSpecialLocation(File.userHomeDirectory):getFullPathName()..&quot;/gm36/amp.store&quot;,false)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;loadLibraryFromFile = function()&#13;&#10;&#9;return loadFromFile(currentLibraryFile,true)&#13;&#10;end&#13;&#10;&#13;&#10;loadFromFile = function(path,saveIfBinary)&#13;&#10;&#9;local data&#13;&#10;&#9;local isBinary = false&#13;&#10;&#9;local file = File(path)&#13;&#10;&#9;local shouldSave = false&#13;&#10;&#9;if file:exists() then&#13;&#10;&#9;&#9;if string.ends(path,&quot;.gm36memory&quot;) or string.ends(path,&quot;.gm40memory&quot;) then&#13;&#10;&#9;&#9;&#9;data = MemoryBlock(file:getSize())&#13;&#10;&#9;&#9;&#9;file:loadFileAsData(data)&#13;&#10;&#9;&#9;&#9;isBinary = true&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;-- Load from default location&#13;&#10;&#9;&#9;&#9;data = file:loadFileAsString()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;-- Load factory&#13;&#10;&#9;&#9;local factoryResource&#13;&#10;&#9;&#9;if isGm40() then&#13;&#10;&#9;&#9;&#9;factoryResource = resources:getResource(&quot;factory40&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;factoryResource = resources:getResource(&quot;factory&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;data = factoryResource:getFile():loadFileAsString()&#13;&#10;&#9;&#9;shouldSave = true&#13;&#10;&#9;end&#13;&#10;&#9;local result&#13;&#10;&#9;if isBinary then&#13;&#10;&#9;&#9;result = loadFromBinary(data)&#13;&#10;&#9;&#9;if ((result ~= nil) and saveIfBinary) then&#13;&#10;&#9;&#9;&#9;-- Binary is only for library&#13;&#10;&#9;&#9;&#9;currentLibraryFile = string.gsub(currentLibraryFile,&quot;%.gm36memory&quot;,&quot;.gm36&quot;)&#13;&#10;&#9;&#9;&#9;currentLibraryFile = string.gsub(currentLibraryFile,&quot;%.gm40memory&quot;,&quot;.gm40&quot;)&#13;&#10;&#9;&#9;&#9;savePresetsToFile(currentLibraryFile,result)&#13;&#10;&#9;&#9;&#9;libraryDirty = false&#13;&#10;&#9;&#9;&#9;lastPresetDirty = false&#13;&#10;&#9;&#9;&#9;setLibraryFileName()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;if data:starts(&quot;{&quot;) then&#13;&#10;&#9;&#9;&#9;result = loadFromJSon(data)&#13;&#10;&#9;&#9;else&#13;&#10; &#9;&#9;&#9;result = loadFromText(data)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;if shouldSave then&#13;&#10;&#9;&#9;savePresetsToFile(path,result)&#13;&#10;&#9;end&#13;&#10;&#9;return result&#13;&#10;end&#13;&#10;&#13;&#10;loadFromText = function(data)&#13;&#10;&#9;local myPresets = {}&#13;&#10;&#9;--console(data)&#13;&#10;&#9;local myPreset = nil&#13;&#10;&#9;local myPresetNumnber = nil&#13;&#10;&#9;for line in data:gmatch(&quot;[&#94;\r\n]+&quot;) do &#13;&#10;&#9;&#9;--console(&quot;Processing line: &quot;..line)&#13;&#10;&#9;&#9;if line:starts(&quot;[preset]&quot;) then&#13;&#10;&#9;&#9;&#9;--console(&quot;Found preset !&quot;)&#13;&#10;&#9;&#9;&#9;if myPreset ~= nil and myPresetNumber ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;--console(&quot;Stored preset &quot;..myPresetNumber..&quot; name = &quot;..myPresets[myPresetNumber][&quot;name&quot;])&#13;&#10;&#9;&#9;&#9;&#9;myPresets[myPresetNumber]=myPreset&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;myPreset = {}&#13;&#10;&#9;&#9;&#9;myPresetNumber = nil&#13;&#10;&#9;&#9;elseif line:starts(&quot;#&quot;) then&#13;&#10;&#9;&#9;&#9;-- Comment =&gt; ignore&#13;&#10;&#9;&#9;elseif myPreset ~= nil then&#13;&#10;&#9;&#9;&#9;-- Split with &quot;=&quot;&#13;&#10;&#9;&#9;&#9;local kvp = line:split(&quot;=&quot;)&#13;&#10;&#9;&#9;&#9;local key = kvp[1]&#13;&#10;&#9;&#9;&#9;local value = kvp[2]&#13;&#10;&#9;&#9;&#9;if key ~= nil and value ~= nil then&#13;&#10;&#9;&#9;&#9;--console(&quot;Kvp : &quot;..key..&quot; = &quot;..value)&#13;&#10;&#9;&#9;&#9;&#9;if key == &quot;name&quot; then&#13;&#10;&#9;&#9;&#9;&#9;&#9;myPreset[key]=value&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- For backward compatiblity..&#13;&#10;&#9;&#9;&#9;&#9;&#9;if key == &quot;treeble&quot; then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;key = &quot;treble&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;myPreset[key]=tonumber(value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;if key == &quot;number&quot; then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPresetNumber = tonumber(value)&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;if myPreset ~= nil and myPresetNumber ~= nil then&#13;&#10;&#9;--&#9;console(&quot;Storing preset &quot;..myPresetNumber)&#13;&#10;&#9;&#9;myPresets[myPresetNumber]=myPreset&#13;&#10;&#9;end&#13;&#10;&#9;-- Fill in the blanks&#13;&#10;&#9;for i=1,128 do&#13;&#10;&#9;&#9;if myPresets[i] == nil then&#13;&#10;&#9;&#9;&#9;myPresets[i] = initPreset(i)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;return myPresets&#13;&#10;end&#13;&#10;&#13;&#10;function string.starts(String,Start)&#13;&#10;   return string.sub(String,1,string.len(Start))==Start&#13;&#10;end&#13;&#10;&#13;&#10;function string:split(sep)&#13;&#10;&#9;local sep, fields = sep or &quot;:&quot;, {}&#13;&#10;    local pattern = string.format(&quot;([&#94;%s]+)&quot;, sep)&#13;&#10;    self:gsub(pattern, function(c) fields[#fields+1] = c end)&#13;&#10;    return fields&#13;&#10;end&#13;&#10;&#13;&#10;function copyPresets(t)&#13;&#10;&#9;if t == nil then&#13;&#10;&#9;&#9;return nil&#13;&#10;&#9;end&#13;&#10;&#9;local u = { }&#13;&#10;&#9;for k, v in pairs(t) do &#13;&#10;&#9;&#9;u[k] = copyPreset(v) &#13;&#10;&#9;end&#13;&#10;&#9;return setmetatable(u, getmetatable(t))&#13;&#10;end&#13;&#10;&#13;&#10;function copyPreset(t)&#13;&#10;&#9;if t == nil then&#13;&#10;&#9;&#9;return nil&#13;&#10;&#9;end&#13;&#10;&#9;local u = { }&#13;&#10;&#9;for k, v in pairs(t) do &#13;&#10;&#9;&#9;u[k] = v &#13;&#10;&#9;end&#13;&#10;&#9;return setmetatable(u, getmetatable(t))&#13;&#10;end&#13;&#10;&#13;&#10;function setLibraryFileName(force)&#13;&#10;&#9;if currentLibraryFile ~= nil then&#13;&#10;&#9;&#9;local component = panel:getComponent(&quot;libraryFileName&quot;)&#13;&#10;&#9;&#9;if component ~= nil then&#13;&#10;&#9;&#9;&#9;local value = currentLibraryFile:gsub(&quot;\\&quot;,&quot;/&quot;)&#13;&#10;&#9;&#9;&#9;if libraryDirty and not force then&#13;&#10;&#9;&#9;&#9;&#9;value = value..&quot; (*)&quot;&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;component:setComponentText(value)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;   &#9;&#9;console(&quot;Modulator not found: libraryFileName&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function string.starts(String,Start)&#13;&#10;   return string.sub(String,1,string.len(Start))==Start&#13;&#10;end&#13;&#10;&#13;&#10;function string.ends(String,End)&#13;&#10;   return End=='' or string.sub(String,-string.len(End))==End&#13;&#10;end&#13;&#10;&#13;&#10;-- Load bp list code&#13;&#10;&#13;&#10;offsetTable = {}&#13;&#10;offsetSize = 0&#13;&#10;objectRefSize = 0&#13;&#10;numObjects = 0&#13;&#10;topObject = 0&#13;&#10;offsetTableOffset = 0&#13;&#10;&#13;&#10;&#13;&#10;function loadFromBinary(data)&#13;&#10;&#9;local magic = data:getRange(0,8)&#13;&#10;&#9;local magicString = magic:toString()&#13;&#10;&#9;-- console(&quot;Magic :&quot;..magicString)&#13;&#10;&#9;if not string.starts(magicString,&quot;bplist&quot;) then&#13;&#10;&#9;&#9;return nil&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local myPresets = {}&#13;&#10;&#9;local myPreset = nil&#13;&#10;&#9;local myPresetNumnber = nil&#13;&#10;&#13;&#10;    -- trailer is last 32 bytes of data&#13;&#10;&#9;local trailer = data:getRange(data:getSize()-32,32)&#13;&#10;&#13;&#10;&#9;-- console(&quot;trailer &quot;..trailer:toHexString(2))&#13;&#10;&#13;&#10;&#9;offsetTable = {}&#13;&#10;    offsetSize = extractByte(trailer,6)&#13;&#10;    objectRefSize = extractByte(trailer, 7)&#13;&#10;    numObjects = extractLong(trailer,8)&#13;&#10;    topObject = extractLong(trailer,16)&#13;&#10;    offsetTableOffset = extractLong(trailer,24)&#13;&#10;&#13;&#10;&#9;--console(&quot;offsetSize = &quot;..offsetSize)&#13;&#10;&#9;--console(&quot;objectRefSize = &quot;..objectRefSize)&#13;&#10;&#9;--console(&quot;Num objects = &quot;..numObjects)&#13;&#10;&#9;--console(&quot;topObject = &quot;..topObject)&#13;&#10;&#9;--console(&quot;offsetTableOffset = &quot;..offsetTableOffset)&#13;&#10;    &#13;&#10;    for i = 0, numObjects, 1 do&#13;&#10;      local offsetBytes = extractData(data,offsetTableOffset + i * offsetSize, offsetSize)&#13;&#10;      offsetTable[i] = offsetBytes;&#13;&#10;&#9;  --console(&quot;Objec &quot;..i..&quot; = &quot;..offsetBytes)&#13;&#10;    end&#13;&#10;&#13;&#10;    local t = parseObject(data,topObject)&#13;&#10;&#13;&#10;    -- build_tree(t)&#13;&#10;&#9;-- Get $objects from root dictionnary and iterate on it&#13;&#10;&#9;-- console(&quot;type t &quot;..type(t))&#13;&#10;&#9;if type(t) == 'table' then&#13;&#10;&#9;&#9;local top = t['$top']&#13;&#10;&#9;if top ~= nil then&#13;&#10;&#9;&#9;local rootIndex = top['root']&#13;&#10;&#9;&#9;-- console(&quot;Root : &quot;..rootIndex)&#13;&#10;&#9;if rootIndex ~= nil then&#13;&#10;&#9;&#9;local objects = t['$objects']&#13;&#10;&#9;&#9;-- console(&quot;type objects &quot;..type(objects))&#13;&#10;&#9;&#9;if objects ~= nil and type(objects) == 'table' then&#13;&#10;&#9;&#9;&#9;-- Get root dict&#13;&#10;&#9;&#9;&#9;local rootDict = objects[rootIndex+1]&#13;&#10;&#9;&#9;&#9;--console(&quot;type rootDict &quot;..type(rootDict))&#13;&#10;&#9;&#9;&#9;-- Get preset dict&#13;&#10;&#9;&#9;&#9;local presetIndex = rootDict['presets']&#13;&#10;&#9;&#9;if presetIndex ~= nil then&#13;&#10;&#9;&#9;&#9;local presetsDict = objects[presetIndex+1]&#13;&#10;&#9;&#9;if presetsDict ~= nil and type(presetsDict) == 'table' then&#13;&#10;&#9;&#9;&#9;local presetsArray = presetsDict[&quot;NS.objects&quot;]&#13;&#10;&#9;&#9;if presetsArray ~= nil and type(presetsArray) == 'table' then&#13;&#10;&#9;&#9;&#9;-- console(&quot;Found presets !&quot;)&#13;&#10;&#9;&#9;&#9;-- Iterate on objects&#13;&#10;&#9;&#9;&#9;for i,v in ipairs(presetsArray) do&#13;&#10;&#9;&#9;&#9;&#9;-- console(&quot;Found preset index &quot;..v)&#13;&#10;&#9;&#9;&#9;&#9;local presetDict = objects[v+1]&#13;&#10;    &#9;&#9;&#9;if presetDict ~= nil and type(presetDict) == 'table' then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Is this a preset ?&#13;&#10;&#9;&#9;&#9;&#9;&#9;myPresetNumnber = presetDict[&quot;presetNumber&quot;]&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- console(&quot;Found preset dict for number&quot;..myPresetNumnber)&#13;&#10;&#9;&#9;&#9;&#9;&#9;if myPresetNumnber ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- This is a preset&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset = {}&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPresetNumnber = tonumber(myPresetNumnber)+1&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;number&quot;]=myPresetNumnber&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Try and get preset name&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;local name = nil&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;local nameIndex = presetDict[&quot;name&quot;]&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if nameIndex ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;name = objects[nameIndex+1]&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if name == nil or not (type(name) == &quot;string&quot;) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;name = &quot;Preset &quot;..myPresetNumnber&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;name&quot;]=name&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- console(&quot;Preset(&quot;..myPresetNumnber..&quot;)= &quot;..name)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Gain&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;local value = convertValue255(presetDict[&quot;gain&quot;])&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;gain&quot;]=value&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Bass&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;bass&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;bass&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Mid&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;mid&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;mid&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Volume&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;volume&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;volume&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Treble&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;treble&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;treble&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Resonance&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;resonance&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;resonance&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Presence&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;presence&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;presence&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Reverb&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;reverbLevel&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;reverb&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Delay level&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;delayLevel&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;delayLevel&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Delay Time&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Min val = 51, max val = 1360 =&gt; range = 1309&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = math.floor(((presetDict[&quot;delayTime&quot;]-51)*255/1309)+0.5)&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;delayTime&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Delay Feedback&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;delayFeedback&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;delayFeedback&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Mod intensity&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue255(presetDict[&quot;modIntensity&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;modIntensity&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Mod rate / type&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = presetDict[&quot;modType&quot;]*64+convertValue63(presetDict[&quot;modRate&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;modType&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Preamp channel&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue4(presetDict[&quot;soundChannel&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;channelType&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Pream boost&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue2(presetDict[&quot;boost&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;channelBoost&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Fx loop&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue2(presetDict[&quot;fxLoop&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;fxLoop&quot;]=value&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Power soak&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if presetDict[&quot;speakerOff&quot;] then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;powerSoak&quot;]=0&#10;&#9;&#9;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;powerSoak&quot;]=convertValue5(presetDict[&quot;speakerPower&quot;]+1)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Noise Gate&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;value = convertValue2(presetDict[&quot;noiseGate&quot;])&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPreset[&quot;noiseGate&quot;]=value&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;-- Store preset&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;myPresets[myPresetNumnber]=myPreset&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;  &#9;&#9;&#9;end&#13;&#10;&#9;&#9;end -- presetsArray&#13;&#10;&#9;&#9;end -- presetsIndex&#13;&#10;&#9;&#9;end -- presets&#13;&#10;&#9;&#9;end -- objects&#13;&#10;&#9;end -- root&#13;&#10;&#9;end -- top&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;-- Fill in the blanks&#13;&#10;&#9;for i=1,128 do&#13;&#10;&#9;&#9;if myPresets[i] == nil then&#13;&#10;&#9;&#9;&#9;-- console(&quot;init preset #&quot;..i)&#13;&#10;&#9;&#9;&#9;myPresets[i] = initPreset(i)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;return myPresets&#13;&#10;end&#13;&#10;&#13;&#10;function convertValue255(value)&#13;&#10;&#9;return math.floor((value*255/100)+0.5)&#13;&#10;end&#13;&#10;&#13;&#10;function convertValue63(value)&#13;&#10;&#9;return math.floor((value*63/100)+0.5)&#13;&#10;end&#13;&#10;&#13;&#10;function convertValue4(value)&#13;&#10;&#9;return value*42&#13;&#10;end&#13;&#10;&#13;&#10;function convertValue5(value)&#13;&#10;&#9;return value*31&#13;&#10;end&#13;&#10;&#13;&#10;function convertValue2(value)&#13;&#10;&#9;if value then&#13;&#10;&#9;&#9;return 127&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return 0&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;function extractData(data,start,length)&#13;&#10;&#9;if length &lt;= 1 then&#13;&#10;&#9;&#9;return extractByte(data,start)&#13;&#10;&#9;elseif length &lt;= 2 then&#13;&#10;&#9;&#9;return extractChar(data,start)&#13;&#10;&#9;elseif length &lt;= 4 then&#13;&#10;&#9;&#9;return extractInt(data,start)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return extractLong(data,start)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function extractReal(data,start,length)&#13;&#10;&#9;if length &lt;= 4 then&#13;&#10;&#9;&#9;return extractFloat(data,start)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;-- Double not supported for now&#13;&#10;&#9;&#9;return 0&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function extractByte(data,start)&#13;&#10;&#9;local result = data:getByte(start)&#13;&#10;&#9;return result&#13;&#10;end&#13;&#10;&#13;&#10;function extractChar(data,start)&#13;&#10;&#9;local result = data:getByte(start)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 1)&#13;&#10;&#9;return result&#13;&#10;end&#13;&#10;&#13;&#10;function extractInt(data,start)&#13;&#10;&#9;local result = data:getByte(start)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 1)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 2)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 3)&#13;&#10;&#9;return result&#13;&#10;end&#13;&#10;&#13;&#10;function extractLong(data,start)&#13;&#10;&#9;local result = data:getByte(start)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 1)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 2)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 3)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 4)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 5)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 6)&#13;&#10;&#9;result = result * 256&#13;&#10;&#9;result = result + data:getByte(start + 7)&#13;&#10;&#9;return result&#13;&#10;end&#13;&#10;&#13;&#10;function extractFloat(data,start)&#13;&#10;  -- Change to b4,b3,b2,b1 to unpack an LSB float&#13;&#10;  local b1 = data:getByte(start)&#13;&#10;  local b2 = data:getByte(start+1)&#13;&#10;  local b3 = data:getByte(start+2)&#13;&#10;  local b4 = data:getByte(start+3)&#13;&#10;  local exponent = (b1 % 128) * 2 + math.floor(b2 / 128)&#13;&#10;  if exponent == 0 then return 0 end&#13;&#10;  local sign = (b1 &gt; 127) and -1 or 1&#13;&#10;  local mantissa = ((b2 % 128) * 256 + b3) * 256 + b4&#13;&#10;  mantissa = (math.ldexp(mantissa, -23) + 1) * sign&#13;&#10;  return math.ldexp(mantissa, exponent - 127)&#13;&#10;end&#13;&#10;&#13;&#10;  function parseObject(data,tableOffset)&#13;&#10;&#13;&#10;    local startPos = offsetTable[tableOffset];&#13;&#10;&#9;--console(&quot;Start pos = &quot;..startPos)&#13;&#10;&#9;--console(&quot;Data = &quot;..data:getRange(startPos-4,16):toHexString(1))&#13;&#10;&#13;&#10;  -- each table entry starts with single byte header, indicating type and extra info&#13;&#10;    local typeData = extractByte(data,startPos)&#13;&#10;    local objType = bit.rshift(typeData, 4) &#13;&#10;    local objInfo = bit.band(typeData, 0x0F)&#13;&#10;&#9;--console(&quot;type = &quot;..type)&#13;&#10;&#9;--console(&quot;objType = &quot;..objType)&#13;&#10;&#9;--console(&quot;objInfo = &quot;..objInfo)&#13;&#10;&#13;&#10;-- null&#13;&#10;    if objType == 0x0 and objInfo == 0x0 then -- null&#13;&#10;      return nil&#13;&#10;&#13;&#10;-- false          &#13;&#10;    elseif objType == 0x0 and objInfo == 0x8 then -- false&#13;&#10;      return false&#13;&#10;&#13;&#10;-- true          &#13;&#10;    elseif objType == 0x0 and objInfo == 0x9 then -- true&#13;&#10;      return true&#13;&#10;&#13;&#10;-- filler          &#13;&#10;    elseif objType == 0x0 and objInfo == 0xF then -- filler byte&#13;&#10;      return nil&#13;&#10;&#13;&#10;-- integer&#13;&#10;-- UID&#13;&#10;    elseif objType == 0x1 or&#13;&#10;           objType == 0x8 then&#13;&#10;      local length = 2 &#94; objInfo&#13;&#10;      return extractData(data,startPos + 1, length)&#13;&#10;&#13;&#10;-- real        &#13;&#10;    elseif objType == 0x2 then -- real&#13;&#10;      local length = 2 &#94; objInfo&#13;&#10;      return extractReal(data,startPos + 1, length)&#13;&#10;&#13;&#10;-- date        &#13;&#10;    elseif objType == 0x3 then -- date&#13;&#10;      if (objInfo ~= 0x3) then&#13;&#10;          console(&quot;Error: Unknown date type :&quot;..objInfo)&#13;&#10;      end&#13;&#10;    return extractFloat(data,startPos + 1) -- TODO: Format correctly&#13;&#10;&#13;&#10;-- data        &#13;&#10;    elseif objType == 0x4 then -- data&#13;&#10;      local length = objInfo&#13;&#10;      local dataOffset = 1&#13;&#10;      if(objInfo == 0xF) then -- 1111&#13;&#10;        local int_type = extractByte(data,startPos + 1)&#13;&#10;        local intType = bit.band(int_type, 0xF0) / 0x10;&#13;&#10;        if intType ~= 0x1 then&#13;&#10;          console(&quot;Error : 0x6 Unexpected length - int-type&quot;..intType)&#13;&#10;        end&#13;&#10;        intInfo = bit.band(int_type, 0x0F)&#13;&#10;        intLength = 2 &#94; intInfo&#13;&#10;        dataOffset = 2 + intLength&#13;&#10;        length = extractData(data,startPos + 2, intLength)&#13;&#10;      end&#13;&#10;&#13;&#10;-- how to determine which one to use?        &#13;&#10;--        print(buffer(startPos + dataOffset, length):bytes())&#13;&#10;-- 0x7B is {&#13;&#10;--      print(&quot;===== data ===== &quot;, buffer(startPos + dataOffset, length):string())&#13;&#10;      return data:getRange(startPos + dataOffset, length):toString()&#13;&#10;&#13;&#10;-- ASCII String        &#13;&#10;    elseif objType == 0x5 then -- ASCII&#13;&#10;      local length = objInfo&#13;&#10;      local strOffset = 1&#13;&#10;      if(objInfo == 0xF) then -- 1111&#13;&#10;        local int_type = extractByte(data,startPos + 1)&#13;&#10;        local intType = bit.band(int_type, 0xF0) / 0x10;&#13;&#10;        if intType ~= 0x1 then&#13;&#10;          console(&quot;Error : 0x6 Unexpected length - int-type&quot;..intType)&#13;&#10;        end&#13;&#10;        intInfo = bit.band(int_type, 0x0F)&#13;&#10;        intLength = 2 &#94; intInfo&#13;&#10;        strOffset = 2 + intLength&#13;&#10;        length = extractData(data,startPos + 2, intLength)&#13;&#10;      end&#13;&#10;      return data:getRange(startPos + strOffset, length):toString()&#13;&#10;&#13;&#10;-- UTF16 String        &#13;&#10;    elseif objType == 0x6 then -- UTF-16&#13;&#10;      local length = objInfo&#13;&#10;      local strOffset = 1&#13;&#10;      if(objInfo == 0xF) then -- 1111&#13;&#10;        local int_type = extractByte(data,startPos + 1)&#13;&#10;        local intType = bit.band(int_type, 0xF0) / 0x10;&#13;&#10;        if intType ~= 0x1 then&#13;&#10;          console(&quot;Error : 0x6 Unexpected length - int-type&quot;..intType)&#13;&#10;        end&#13;&#10;        intInfo = bit.band(int_type, 0x0F)&#13;&#10;        intLength = 2 &#94; intInfo&#13;&#10;        strOffset = 2 + intLength&#13;&#10;        length = extractData(data,startPos + 2, intLength)&#13;&#10;      end&#13;&#10;      length = length * 2&#13;&#10;--      print(&quot;===== UTF16 String =====&quot;)&#13;&#10;--      print(&quot;length: &quot;, length)&#13;&#10;--      print(buffer(startPos + strOffset, length):len())&#13;&#10;--      print(buffer(startPos + strOffset, length):ustring())&#13;&#10;--      return &quot;UTF16String&quot;&#13;&#10;&#13;&#10;      return data:getRange(startPos + strOffset, length):toString()&#13;&#10;&#13;&#10;-- UTF8 String        &#13;&#10;    elseif objType == 0x7 then -- UTF-8&#13;&#10;      local length = objInfo&#13;&#10;      local strOffset = 1&#13;&#10;      if(objInfo == 0xF) then -- 1111&#13;&#10;        local int_type = extractByte(data,startPos + 1)&#13;&#10;        local intType = bit.band(int_type, 0xF0) / 0x10;&#13;&#10;        if intType ~= 0x1 then&#13;&#10;          console(&quot;Error : 0x6 Unexpected length - int-type&quot;..intType)&#13;&#10;        end&#13;&#10;        intInfo = bit.band(int_type, 0x0F)&#13;&#10;        intLength = 2 &#94; intInfo&#13;&#10;        strOffset = 2 + intLength&#13;&#10;        length = extractData(data,startPos + 2, intLength)&#13;&#10;      end&#13;&#10;&#13;&#10;      return data:getRange(startPos + strOffset, length):toString()&#13;&#10;&#13;&#10;-- Array        &#13;&#10;    elseif objType == 0xA then&#13;&#10;      local length = objInfo&#13;&#10;      local arrayOffset = 1&#13;&#10;      if(objInfo == 0xF) then -- 1111&#13;&#10;        local int_type = extractByte(data,startPos + 1)&#13;&#10;        local intType = bit.band(int_type, 0xF0) / 0x10;&#13;&#10;        if intType ~= 0x1 then&#13;&#10;          console(&quot;Error : 0xA Unexpected length - int-type&quot;..intType)&#13;&#10;        end&#13;&#10;        intInfo = bit.band(int_type, 0x0F)&#13;&#10;        intLength = 2 &#94; intInfo&#13;&#10;        arrayOffset = 2 + intLength&#13;&#10;        length = extractData(data,startPos + 2, intLength)&#13;&#10;      end&#13;&#10;      local array = {}&#13;&#10;      for i = 0, length - 1, 1 do&#13;&#10;        objRef = extractData(data,startPos + arrayOffset + i * objectRefSize, objectRefSize)&#13;&#10;        array[i+1] = parseObject(data,objRef)&#13;&#10;      end&#13;&#10;      return array&#13;&#10;&#13;&#10;-- Set&#13;&#10;    elseif objType == 0xC then&#13;&#10;--      print(&quot;===== Set =====&quot;)  &#13;&#10;      return &quot;TODO: Add in Set!!!&quot; -- TODO&#13;&#10;&#13;&#10;-- Dictionary        &#13;&#10;    elseif objType == 0xD then&#13;&#10;      local length = objInfo&#13;&#10;      local dictOffset = 1&#13;&#10;      if(objInfo == 0xF) then -- 1111&#13;&#10;        local int_type = extractByte(data,startPos + 1)&#13;&#10;        local intType = bit.band(int_type, 0xF0) / 0x10;&#13;&#10;        if intType ~= 0x1 then&#13;&#10;          console(&quot;Error : 0xD Unexpected length - int-type&quot;..intType)&#13;&#10;        end&#13;&#10;        intInfo = bit.band(int_type, 0x0F)&#13;&#10;        intLength = 2 &#94; intInfo&#13;&#10;        dictOffset = 2 + intLength&#13;&#10;        length = extractData(data,startPos + 2, intLength)&#13;&#10;      end&#13;&#10;      local dict = {}&#13;&#10;      for i = 0, length - 1, 1 do&#13;&#10;        local keyRef = extractData(data,(startPos + dictOffset) + (i * objectRefSize), objectRefSize)&#13;&#10;        local valRef = extractData(data,(startPos + dictOffset + (length * objectRefSize)) + (i * objectRefSize), objectRefSize)&#13;&#10;        local key = parseObject(data,keyRef);&#13;&#10;        local val = parseObject(data,valRef);&#13;&#10;&#9;&#9;--console(&quot;StartPos = &quot;..startPos)&#13;&#10;&#9;&#9;--console(&quot;DictOffset = &quot;..dictOffset)&#13;&#10;&#9;&#9;--console(&quot;keyRef = &quot;..keyRef)&#13;&#10;&#9;&#9;--console(&quot;valRef = &quot;..valRef)&#13;&#10;        --console(&quot;key: &quot;..key)&#13;&#10;&#9;&#9;--console(&quot;type: &quot;..type(val))&#13;&#10;&#9;&#9;--if type(val) == &quot;string&quot; then&#13;&#10;        --&#9;console(&quot;val: &quot;..val)&#13;&#10;&#9;&#9;--end&#13;&#10;        dict[key] = val&#13;&#10;      end&#13;&#10;      return dict&#13;&#10;    end&#13;&#10;&#13;&#10;-- Unkown type return error message&#13;&#10;    return &quot;Error : Unknown object type - &quot; .. objType&#13;&#10;&#13;&#10;  end&#13;&#10;&#13;&#10;&#13;&#10;loadFromJSon = function(data)&#13;&#10;&#9;local myPresets = {}&#13;&#10;&#9;local myPreset = nil&#13;&#10;&#9;local myPresetNumnber = nil&#13;&#10;&#9;local jSonPreset&#13;&#10;&#9;for line in data:gmatch(&quot;[&#94;\r\n]+&quot;) do &#13;&#10;&#9;&#9;jSonPreset = json.decode(line)&#13;&#10;&#9;&#9;myPreset = {}&#13;&#10;&#9;&#9;myPresetNumnber = tonumber(jSonPreset[&quot;nr&quot;])+1&#13;&#10;&#9;&#9;--console(&quot;Processing preset: &quot;..myPresetNumnber.. &quot; / &quot;..jSonPreset[&quot;name&quot;])&#13;&#10;&#9;&#9;myPreset[&quot;number&quot;]=myPresetNumnber&#13;&#10;&#9;&#9;myPreset[&quot;name&quot;]=jSonPreset[&quot;name&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;modIntensity&quot;]=jSonPreset[&quot;modIntensity&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;delayTime&quot;]=jSonPreset[&quot;delTime&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;modType&quot;]=jSonPreset[&quot;modRate&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;bass&quot;]=jSonPreset[&quot;peqBass&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;mid&quot;]=jSonPreset[&quot;peqMid&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;treble&quot;]=jSonPreset[&quot;peqTreble&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;resonance&quot;]=jSonPreset[&quot;paeResonance&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;presence&quot;]=jSonPreset[&quot;paePresence&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;delayFeedback&quot;]=jSonPreset[&quot;delFeedback&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;delayLevel&quot;]=jSonPreset[&quot;delLevel&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;reverb&quot;]=jSonPreset[&quot;revLevel&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;powerSoak&quot;]=jSonPreset[&quot;power4state&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;channelType&quot;]=jSonPreset[&quot;cha4state&quot;]&#13;&#10;&#9;&#9;if jSonPreset[&quot;fxloop&quot;] then&#13;&#10;&#9;&#9;&#9;myPreset[&quot;fxLoop&quot;]=127&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;myPreset[&quot;fxLoop&quot;]=0&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;myPreset[&quot;gain&quot;]=jSonPreset[&quot;chaGain&quot;]&#13;&#10;&#9;&#9;myPreset[&quot;volume&quot;]=jSonPreset[&quot;chaVolume&quot;]&#13;&#10;&#9;&#9;if jSonPreset[&quot;noisegate&quot;] then&#13;&#10;&#9;&#9;&#9;myPreset[&quot;noiseGate&quot;]=127&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;myPreset[&quot;noiseGate&quot;]=0&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if jSonPreset[&quot;boost&quot;] then&#13;&#10;&#9;&#9;&#9;myPreset[&quot;channelBoost&quot;]=127&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;myPreset[&quot;channelBoost&quot;]=0&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;myPresets[myPresetNumnber]=myPreset&#13;&#10;&#9;end&#13;&#10;&#9;-- Fill in the blanks&#13;&#10;&#9;for i=1,128 do&#13;&#10;&#9;&#9;if myPresets[i] == nil then&#13;&#10;&#9;&#9;&#9;myPresets[i] = initPreset(i)&#13;&#10;&#9;&#9;&#9;console(&quot;Initing preset : &quot;..i)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;return myPresets&#13;&#10;end&#13;&#10;&#13;&#10;"
                 luaMethodLinkedProperty="luaPanelRestoreState" luaMethodSource="0"
                 uuid="c290c4451b214e599b93fc2aaa92ff82" luaMethodValid="1"/>
      <luaMethod luaMethodName="presetStepChanged" luaMethodCode="--&#10;--&#10;--&#13;&#10;presetStepChanged = function(modulator, numericModulatorValue)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return numericModulatorValue&#13;&#10;&#9;end&#13;&#10;&#9;--console(&quot;Preset step changed = &quot;..numericModulatorValue)&#13;&#10;&#9;changePresetNumber(numericModulatorValue+1)&#13;&#10;&#9;return numericModulatorValue&#10;end"
                 luaMethodLinkedProperty="luaModulatorGetValueForMIDI" luaMethodSource="0"
                 uuid="effea62480b0443d8c2e9532e8864525" luaMethodValid="1"/>
      <luaMethod luaMethodName="generateMidi" luaMethodCode="--&#10;--&#10;--&#13;&#10;generateMidi = function(modulator, numericModulatorValue)&#13;&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;&#9;return numericModulatorValue&#13;&#10;&#9;end&#13;&#10;&#9;local paramNumber = modulator:getPropertyInt(&quot;modulatorCustomIndex&quot;)&#13;&#10;&#9;--console(&quot;Generate midi for &quot;..paramNumber..&quot; value &quot;..numericModulatorValue)&#13;&#10;&#9;local paramName = controllers[paramNumber]&#13;&#10;&#9;local preventModify = false&#13;&#10;&#9;if paramName ~= nil then&#13;&#10;&#9;&#9;-- Update edit buffer&#13;&#10;&#9;&#9;editBuffer[paramName]=numericModulatorValue&#13;&#10;&#9;&#9;-- Set global power soak if needed&#13;&#10;&#9;&#9;if paramName == &quot;powerSoak&quot; then&#13;&#10;&#9;&#9;&#9;if (isLibrary or isGm40()) and (powerSoakGlobal == 1) then&#13;&#10;&#9;&#9;&#9;&#9;globalPowerSoakValue = numericModulatorValue&#13;&#10;&#9;&#9;&#9;&#9;preventModify = true&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if (paramName == &quot;resonance&quot;) or (paramName == &quot;presence&quot;) then&#13;&#10;&#9;&#9;&#9;if (powerEqGlobal == 1) then&#13;&#10;&#9;&#9;&#9;&#9;preventModify = true&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- In library mode we update current preset too&#13;&#10;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;if not preventModify and (presets[currentPresetNumber] ~= nil) then&#13;&#10;&#9;&#9;&#9;&#9;presets[currentPresetNumber][paramName]=numericModulatorValue&#13;&#10;&#9;&#9;&#9;&#9;if not libraryDirty then&#13;&#10;&#9;&#9;&#9;&#9;&#9;libraryDirty = true&#13;&#10;&#9;&#9;&#9;&#9;&#9;setLibraryFileName()&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if not preventModify then&#13;&#10;&#9;&#9;&#9;-- Set modified status&#13;&#10;&#9;&#9;&#9;setModified(true)&#13;&#10;&#9;&#9;&#9;-- Highligt modulator&#13;&#10;&#9;&#9;&#9;if compareMode then&#13;&#10;&#9;&#9;&#9;&#9;highlight(paramName)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;sendParameter(paramNumber, numericModulatorValue)&#13;&#10;&#9;return numericModulatorValue&#13;&#10;end&#13;&#10;&#13;&#10;sendParameter = function(parameterNumber,parameterValue)&#13;&#10;&#9;local message= {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0xF7 }&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10; &#9;&#9;message[8] = 0x09 &#13;&#10;&#9;end&#13;&#10;&#9;message[11] = parameterNumber&#13;&#10;&#9;local msb = math.floor(parameterValue / 128)&#13;&#10;&#9;local lsb = parameterValue % 128&#13;&#10;&#9;message[12] = msb&#13;&#10;&#9;message[13] = lsb&#13;&#10;&#9;local checksum = 0&#13;&#10;&#9;for i=1,13 do&#13;&#10;&#9;&#9;checksum = (bxor(checksum,message[i]))&#13;&#10;&#9;end&#13;&#10;&#9;message[14] = checksum % 128&#13;&#10;&#9;local storeMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (storeMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;sendAllPresetsRequest = function()&#13;&#10;&#9;local message&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10;&#9;&#9;message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x09, 0x00, 0x01, 0x0C, 0xF7 }&#13;&#10;&#9;else&#13;&#10;&#9;&#9;message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x01, 0x00, 0xF7 }&#13;&#10;&#9;end&#13;&#10;&#9;local requestMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (requestMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;sendPresetRequest = function(presetNumber)&#13;&#10;&#9;local message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF7 }&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10; &#9;&#9;message[8] = 0x09 &#13;&#10;&#9;end&#13;&#10;&#9;message[13] = presetNumber % 128&#13;&#10;&#9;local checksum = 0&#13;&#10;&#9;for i=1,13 do&#13;&#10;&#9;&#9;checksum = (bxor(checksum,message[i]))&#13;&#10;&#9;end&#13;&#10;&#9;message[14] = checksum % 128&#13;&#10;&#9;local requestMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (requestMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;sendEditBufferRequest = function()&#13;&#10;&#9;local message&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10; &#9;&#9;message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x09, 0x00, 0x00, 0x7F, 0x7F, 0x00, 0x0D, 0xF7 } &#13;&#10;&#9;else&#13;&#10; &#9;&#9;message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x7F, 0x7F, 0x00, 0x01, 0xF7 }&#13;&#10;&#9;end&#13;&#10;&#9;local requestMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (requestMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;sendSystemConfigRequest = function()&#13;&#10;&#9;sendSystemConfigRequestForAmpType(&quot;GM36&quot;)&#13;&#10;&#9;sendSystemConfigRequestForAmpType(&quot;GM40&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;sendSystemConfigRequestForAmpType = function(ampTypeToCheck)&#13;&#10;&#9;local message&#13;&#10;&#9;if ampTypeToCheck == &quot;GM40&quot; then&#13;&#10; &#9;&#9;message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x09, 0x00, 0x10, 0x1D, 0xF7 }&#13;&#10;&#9;else&#13;&#10; &#9;&#9;message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x10, 0x11, 0xF7 }&#13;&#10;&#9;end&#13;&#10;&#9;local requestMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (requestMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;sendSystemConfig = function()&#13;&#10;&#9;local message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x50, &#13;&#10;&#9;-- Data&#13;&#10;&#9;0x00, 0x00, 0x00, 0x00,&#13;&#10;&#9;-- Footer&#13;&#10;&#9;0x00, 0xF7 }&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10; &#9;&#9;message[8] = 0x09 &#13;&#10;&#9;end&#13;&#10;&#9;-- Set data&#13;&#10;&#9;message[11] = (midiChannel-1) + (omniMode*16)&#13;&#10;&#9;message[12] = mutes&#13;&#10;&#9;message[13] = midiLearn + (powerEqGlobal*4) + (powerSoakGlobal*32)&#13;&#10;&#9;-- Checksum&#13;&#10;&#9;local checksum = 0&#13;&#10;&#9;for i=1,14 do&#13;&#10;&#9;&#9;checksum = (bxor(checksum,message[i]))&#13;&#10;&#9;end&#13;&#10;&#9;message[15] = checksum % 128&#13;&#10;&#9;local requestMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (requestMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;sendIdRequest = function()&#13;&#10;&#9;local message = {0xF0, 0x7E, 0x7F, 0x06, 0x01, 0xF7 }&#13;&#10;&#9;local requestMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (requestMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;function bxor (a,b)&#13;&#10;&#9;local r = 0&#13;&#10;&#9;for i = 0, 8 do&#13;&#10;&#9;&#9;local x = a / 2 + b / 2&#13;&#10;&#9;&#9;if x ~= floor (x) then&#13;&#10;&#9;&#9;&#9;r = r + 2&#94;i&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;a = floor (a / 2)&#13;&#10;&#9;&#9;b = floor (b / 2)&#13;&#10;&#9;end&#13;&#10;&#9;return r&#13;&#10;end&#13;&#10;&#13;&#10;sendEditBufferDump = function()&#13;&#10;&#9;sendPresetBufferDump(editBuffer,true)&#13;&#10;end&#13;&#10;&#13;&#10;sendOriginalBufferDump = function()&#13;&#10;&#9;sendPresetBufferDump(originalBuffer,true)&#13;&#10;end&#13;&#10;&#13;&#10;sendPresetBufferDump = function(preset,isEditBuffer)&#13;&#10;&#9;-- Header&#13;&#10;&#9;local message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x40,&#13;&#10;&#9;-- Preset number&#13;&#10; &#9;0x00, 0x00, 0x00, &#13;&#10;&#9;-- Data&#13;&#10;&#9;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,&#13;&#10;&#9;-- Footer&#13;&#10;&#9;0x00, 0xF7 }&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10; &#9;&#9;message[8] = 0x09 &#13;&#10;&#9;end&#13;&#10;&#9;-- Write preset number&#13;&#10;&#9;if isEditBuffer then&#13;&#10;&#9;&#9;message[11]=0x7F&#13;&#10;&#9;&#9;message[12]=0x7F&#13;&#10;&#9;&#9;message[13]=0x00&#13;&#10;&#9;else&#13;&#10;&#9;&#9;message[11]=0x00&#13;&#10;&#9;&#9;message[12]=0x00&#13;&#10;&#9;&#9;message[13]=((preset[&quot;number&quot;]-1)%128)&#13;&#10;&#9;end&#13;&#10;&#9;-- Load data&#13;&#10;&#9;writePresetToBuffer(preset,message,14, (isEditBuffer and isLibrary and (powerSoakGlobal == 1)))&#13;&#10;&#9;-- Checksum&#13;&#10;&#9;local checksum = 0&#13;&#10;&#9;for i=1,45 do&#13;&#10;&#9;&#9;--console(&quot;bxor index &quot;..i..&quot; : &quot;..message[i])&#13;&#10;&#9;&#9;checksum = (bxor(checksum,message[i]))&#13;&#10;&#9;end&#13;&#10;&#9;message[46] = checksum % 128&#13;&#10;&#9;local requestMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (requestMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;sendPresetsBufferDump = function(presetsToUpload,callback)&#13;&#10;&#9;if panel:getBootstrapState() then&#13;&#10;    &#9;return false&#13;&#10;&#9;end&#13;&#10;&#9;presetsToSend = {}&#13;&#10;&#9;presetsToSendIndex = 1&#13;&#10;&#9;presetsToSendSize = 1&#13;&#10;&#9;for k, v in pairs(presetsToUpload) do&#13;&#10;&#9;&#9;presetsToSend[presetsToSendSize] = copyPreset(v)&#13;&#10;&#9;&#9;presetsToSendSize = presetsToSendSize+1&#13;&#10;&#9;end&#13;&#10;&#9;presetsToSendSize = presetsToSendSize-1&#13;&#10;&#9;-- Store callback&#13;&#10;&#9;uploadFinishedCallback = callback&#13;&#10;&#9;-- Send first preset&#13;&#10;&#9;sendPresetBufferDump(presetsToSend[presetsToSendIndex],false)&#13;&#10;&#9;-- Show progress dialog&#13;&#10;&#9;startProgress(&quot;Sending presets...&quot;,&quot;Abort&quot;)&#13;&#10;end&#13;&#10;&#13;&#10;function updateProgressWindow()&#13;&#10;&#9;if presetsToSendSize == 0 or presetsToSendIndex == 0 or presetsToSend == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local progressValue = (presetsToSendIndex-1) / presetsToSendSize&#13;&#10;&#9;--progress:setProgress(progressValue)&#13;&#10;&#9;updateProgressValue(progressValue)&#13;&#10;&#9;local currentPreset = presetsToSend[presetsToSendIndex]&#13;&#10;&#9;if currentPreset ~= nil then&#13;&#10;&#9;&#9;local message = &quot;Preset &quot;..currentPreset[&quot;number&quot;]..&quot;: &quot;..currentPreset[&quot;name&quot;]&#13;&#10;&#9;&#9;updateProgressStatus(message)&#13;&#10;&#9;end&#13;&#10;&#9;if presetsToSendIndex &gt; presetsToSendSize then&#13;&#10;&#9;&#9;if uploadFinishedCallback ~= nil then&#13;&#10;&#9;&#9;&#9;uploadFinishedCallback(true)&#13;&#10;&#9;&#9;&#9;uploadFinishedCallback = nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;switchToEditorTab()&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;getMidiOutChannel = function()&#13;&#10;&#9;local midiOutputChannel = panel:getPropertyInt(&quot;panelMidiOutputChannelDevice&quot;)&#13;&#10;&#9;if midiOutputChannel == nil then&#13;&#10;&#9;&#9;midiOutputChannel = 1&#13;&#10;&#9;end&#13;&#10;&#9;return midiOutputChannel&#13;&#10;end&#13;&#10;&#13;&#10;sendPresetChangeRequest = function(presetNumber)&#13;&#10;&#9;-- First send Program Change&#13;&#10;&#9;local presetValue = (presetNumber-1)&#13;&#10;&#9;local firstByte = 0xc0 + (getMidiOutChannel()-1)&#13;&#10;&#9;patchNumberMessage = CtrlrMidiMessage({firstByte, presetValue})&#13;&#10;&#9;panel:sendMidiMessageNow (patchNumberMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;&#9;-- Then send SysEx message for parameter &quot;0x5A&quot; (Preset Number) / device number is always 0x05 for FSM (even if amp is GM40)&#13;&#10;&#9;local message= {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x04, 0x5A, 0x00, 0x00, 0x00, 0xF7 }&#13;&#10;&#9;message[13] = presetValue&#13;&#10;&#9;local checksum = 0&#13;&#10;&#9;for i=1,13 do&#13;&#10;&#9;&#9;checksum = (bxor(checksum,message[i]))&#13;&#10;&#9;end&#13;&#10;&#9;message[14] = checksum % 128&#13;&#10;&#9;local storeMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (storeMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;sendStoreRequest = function(presetNumber)&#13;&#10;&#9;-- Send the store message&#13;&#10;&#9;local message&#13;&#10;&#9;if ampType == &quot;GM40&quot; then&#13;&#10; &#9;&#9;message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x09, 0x00, 0x04, 0x50, 0x00, 0x7F, 0x26, 0xF7 } &#13;&#10;&#9;else&#13;&#10; &#9;&#9;message = {0xF0, 0x00, 0x20, 0x44, 0x00, 0x10, 0x00, 0x05, 0x00, 0x04, 0x50, 0x00, 0x7F, 0x2A, 0xF7 }&#13;&#10;&#9;end&#13;&#10;&#9;storeMessage = CtrlrMidiMessage(message)&#13;&#10;&#9;panel:sendMidiMessageNow (storeMessage)&#13;&#10;&#9;-- Send the patch number&#13;&#10;&#9;-- console(&quot;Patch number: &quot;..presetNumber)&#13;&#10;&#9;local firstByte = 0xc0 + (getMidiOutChannel()-1)&#13;&#10;&#9;patchNumberMessage = CtrlrMidiMessage({firstByte, (presetNumber-1)})&#13;&#10;&#9;panel:sendMidiMessageNow (patchNumberMessage)&#13;&#10;&#9;blinkMidiOutLed()&#13;&#10;end&#13;&#10;&#13;&#10;writePresetToBuffer = function(preset,buffer,startIndex,withGlobalSoak)&#13;&#10;&#9;-- Gain&#13;&#10;&#9;local value = preset[&quot;gain&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex);&#13;&#10;&#9;-- Bass&#13;&#10;&#9;value = preset[&quot;bass&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+2);&#13;&#10;&#9;-- Mid&#13;&#10;&#9;value = preset[&quot;mid&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+4);&#13;&#10;&#9;-- Volume&#13;&#10;&#9;value = preset[&quot;volume&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+6);&#13;&#10;&#9;-- Treble&#13;&#10;&#9;value = preset[&quot;treble&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+8);&#13;&#10;&#9;-- Resonance&#13;&#10;&#9;value = preset[&quot;resonance&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+10);&#13;&#10;&#9;-- Presence&#13;&#10;&#9;value = preset[&quot;presence&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+12);&#13;&#10;&#9;-- Reverb&#13;&#10;&#9;value = preset[&quot;reverb&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+14);&#13;&#10;&#9;-- Delay level&#13;&#10;&#9;value = preset[&quot;delayLevel&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+16);&#13;&#10;&#9;-- Delay Time&#13;&#10;&#9;value = preset[&quot;delayTime&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+18);&#13;&#10;&#9;-- Delay Feedback&#13;&#10;&#9;value = preset[&quot;delayFeedback&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+20);&#13;&#10;&#9;-- Mod intensity&#13;&#10;&#9;value = preset[&quot;modIntensity&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+22);&#13;&#10;&#9;-- Mod type&#13;&#10;&#9;value = preset[&quot;modType&quot;]&#13;&#10;&#9;writeIntToBuffer(value,buffer,startIndex+24);&#13;&#10;&#13;&#10;&#9;local qqByte&#13;&#10;&#9;local rrByte&#13;&#10;&#13;&#10;&#9;-- Preamp channel&#13;&#10;&#9;value = preset[&quot;channelType&quot;]&#13;&#10;&#9;local channelType = math.floor(value/42)&#13;&#10;&#9;-- Pream boost&#13;&#10;&#9;value = preset[&quot;channelBoost&quot;]&#13;&#10;&#9;local channelBoost = math.floor(value/127)&#13;&#10;&#9;-- Fx loop&#13;&#10;&#9;value = preset[&quot;fxLoop&quot;]&#13;&#10;&#9;local fxLoop = math.floor(value/127)&#13;&#10;&#9;-- Power soak&#13;&#10;&#9;if withGlobalSoak then&#13;&#10;&#9;&#9;value = globalPowerSoakValue&#13;&#10;&#9;else&#13;&#10;&#9;&#9;value = preset[&quot;powerSoak&quot;]&#13;&#10;&#9;end&#13;&#10;&#9;local powerSoak = math.floor(value/31)&#13;&#10;&#13;&#10;&#9;rrByte = channelType + (channelBoost*4) + (fxLoop*8) + (powerSoak*16)&#13;&#10;&#13;&#10;&#9;-- Noise Gate&#13;&#10;&#9;value = preset[&quot;noiseGate&quot;]&#13;&#10;&#9;local noiseGate = math.floor(value/127)&#13;&#10;&#9;qqByte = noiseGate&#13;&#10;&#13;&#10;&#9;buffer[startIndex+30]=qqByte&#13;&#10;&#9;buffer[startIndex+31]=rrByte&#13;&#10;end&#13;&#10;&#13;&#10;writeIntToBuffer = function(value,buffer,startIndex)&#13;&#10;&#9;local lsb = value % 128;&#13;&#10;&#9;local msb = math.floor(value / 128);&#13;&#10;&#9;buffer[startIndex]=msb;&#13;&#10;&#9;buffer[startIndex+1]=lsb;&#13;&#10;end&#13;&#10;&#13;&#10;"
                 luaMethodLinkedProperty="luaModulatorGetValueForMIDI" luaMethodSource="0"
                 uuid="3537fc533ede49729492e0c00bc4d423" luaMethodValid="1"/>
      <luaMethod luaMethodName="modulationRateChanged" luaMethodCode="--&#10;--&#10;--&#10;modulationRateChanged = function(modulator, numericModulatorValue)&#13;&#10;&#9;if panel:getBootstrapState() then&#13;&#10;&#9;&#9;return numericModulatorValue&#13;&#10;&#9;end&#13;&#10;&#9;modulationValue = numericModulatorValue&#10;&#9;-- Get modulation type value&#13;&#10;&#9;modulationTypeModulator = panel:getModulator(&quot;modulationType&quot;)&#13;&#10;&#9;if modulationTypeModulator ~= nil then&#13;&#10;&#9;&#9;modulationType = modulationTypeModulator:getValue()&#13;&#10;&#9;&#9;modulationValue = modulationValue + (modulationType * 64)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Modulator not found: modulationType&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;generateMidi(modulator,modulationValue)&#13;&#10;&#9;if compareMode then&#13;&#10;&#9;&#9;highlight(&quot;modRateKnob&quot;)&#13;&#10;&#9;end&#13;&#10;return numericModulatorValue&#10;end"
                 luaMethodLinkedProperty="luaModulatorGetValueForMIDI" luaMethodSource="0"
                 uuid="5ecd5fbf9bf640cd8935e33eb7f3d50d" luaMethodValid="1"/>
      <luaMethod luaMethodName="modulationTypeChanged" luaMethodCode="--&#10;--&#10;--&#10;modulationTypeChanged = function(modulator, numericModulatorValue)&#10;&#9;if panel:getBootstrapState() then&#13;&#10;&#9;&#9;return numericModulatorValue&#13;&#10;&#9;end&#13;&#10;&#9;modulationValue = (numericModulatorValue * 64)&#10;&#9;-- Get modulation type value&#13;&#10;&#9;modulationRateModulator = panel:getModulator(&quot;modulationRate&quot;)&#13;&#10;&#9;if modulationRateModulator ~= nil then&#13;&#10;&#9;&#9;modulationRate = modulationRateModulator:getValue()&#13;&#10;&#9;&#9;modulationValue = modulationValue + modulationRate&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Modulator not found: modulationRate&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;generateMidi(modulator,modulationValue)&#13;&#10;&#9;if compareMode then&#13;&#10;&#9;&#9;highlight(&quot;modTypeKnob&quot;)&#13;&#10;&#9;end&#13;&#10;return numericModulatorValue&#10;end"
                 luaMethodLinkedProperty="luaModulatorGetValueForMIDI" luaMethodSource="0"
                 uuid="84497fb98aaa430c9d2c7bc7ab07ee8c" luaMethodValid="1"/>
      <luaMethod luaMethodName="storePresetAs" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;storePresetAs = function(mod, value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local comboItems = StringArray()&#13;&#10;&#9;local comboPresets&#13;&#10;&#9;for i,v in ipairs(ampPresets) do&#13;&#10;&#9;&#9;comboItems:add (&quot;&quot;..v[&quot;number&quot;]..&quot; - &quot;..v[&quot;name&quot;])&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;modalWindow = AlertWindow(&quot;Location ?&quot;, &quot;Choose a location to store the preset&quot;, AlertWindow.QuestionIcon)&#13;&#10;&#9;modalWindow:addButton(&quot;OK&quot;, 1, KeyPress(KeyPress.returnKey), KeyPress())&#13;&#10;&#9;modalWindow:addButton(&quot;Cancel&quot;, 0, KeyPress(KeyPress.escapeKey), KeyPress())&#13;&#10;&#9;modalWindow:addComboBox (&quot;myCombo&quot;, comboItems, &quot;Preset #&quot;)&#13;&#10;&#9;modalWindow:setModalHandler(windowCallback)&#13;&#10;&#9;&#9;&#13;&#10;&#9;--  Never let Lua delete this window (3rd parameter), enter modal state&#13;&#10;&#9;modalWindow:runModalLoop()&#13;end&#13;&#10;&#13;&#10;function windowCallback(result, window)&#13;&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;window:setVisible (false)&#13;&#10;&#9;--console(&quot;\n\nwindowCallback result=&quot;..result)&#13;&#10;&#9;if result == 1 then&#13;&#10;&#9;&#9;comboBox = window:getComboBoxComponent(&quot;myCombo&quot;)&#13;&#10;&#9;&#9;if comboBox ~= nil then&#13;&#10;&#9;&#9;&#9;if showOriginal then&#13;&#10;&#9;&#9;&#9;&#9;-- restore original buffer&#13;&#10;&#9;&#9;&#9;&#9;editBuffer = copyPreset(originalBuffer)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;local presetNumber = sanitizePresetNumber(comboBox:getSelectedId())&#13;&#10;&#9;&#9;&#9;editBuffer[&quot;number&quot;]=presetNumber&#13;&#10;&#9;&#9;&#9;local updateCombo = true&#13;&#10;&#9;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;&#9;-- Store to amp case&#13;&#10;&#9;&#9;&#9;&#9;updateCombo = false&#13;&#10;&#9;&#9;&#9;&#9;-- Update amp preset&#13;&#10;&#9;&#9;&#9;&#9;currentAmpPresetNumber = presetNumber&#13;&#10;&#9;&#9;&#9;&#9;ampPresets[presetNumber] = copyPreset(editBuffer)&#13;&#10;&#9;&#9;&#9;&#9;sendPresetBufferDump(editBuffer,false)&#13;&#10;&#9;&#9;&#9;&#9;if connected then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Switch to amp&#13;&#10;&#9;&#9;&#9;&#9;&#9;setPresetMode(1,false)&#13;&#10;&#9;&#9;&#9;&#9;&#9;changePresetMode(false,false)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;setPresetNumber(presetNumber)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;-- Amp case =&gt; simply send store command&#13;&#10;&#9;&#9;&#9;&#9;-- Update selected preset&#13;&#10;&#9;&#9;&#9;&#9;presets[presetNumber] = copyPreset(editBuffer)&#13;&#10;&#9;&#9;&#9;&#9;-- Update preset number&#13;&#10;&#9;&#9;&#9;&#9;setPresetNumber(presetNumber)&#13;&#10;&#9;&#9;&#9;&#9;-- Send the store message&#13;&#10;&#9;&#9;&#9;&#9;sendStoreRequest(presetNumber)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;if updateCombo then&#13;&#10;&#9;&#9;&#9;&#9;-- And update combo content&#13;&#10;&#9;&#9;&#9;&#9;local combo = getPresetCombo()&#13;&#10;&#9;&#9;&#9;&#9;if combo ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;combo:changeItemText(presetNumber,&quot;&quot;..presetNumber..&quot; - &quot;..editBuffer[&quot;name&quot;])&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="2411f014f0174d7c823b5d09b1bcdde1" luaMethodValid="1"/>
      <luaMethod luaMethodName="savePresets" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;savePresets = function(mod, value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod)  then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;saveLibraryToFile()&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="7b52e2c96aa94a4da7d1508ebfe6d1af" luaMethodValid="1"/>
      <luaMethod luaMethodName="loadPresets" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;loadPresets = function(mod, value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local fileToRead = utils.openFileWindow(&quot;Load library from disk&quot;, File(&quot;&quot;), &quot;*.gm36;*.gm36memory;*.gm40;*.gm40memory&quot;, true)&#13;&#10;&#13;&#10;&#9;-- Check if the file exists&#13;&#10;&#9;if fileToRead:existsAsFile() then&#13;&#10;&#9;&#9;currentLibraryFile = fileToRead:getFullPathName()&#13;&#10;&#9;&#9;local oldLibraryPresets = libraryPresets&#13;&#10;&#9;&#9;libraryPresets = loadLibraryFromFile()&#13;&#10;&#9;&#9;if libraryPresets == nil then&#13;&#10;&#9;&#9;&#9;-- TODO alert : could not read file&#13;&#10;&#9;&#9;&#9;libraryPresets = oldLibraryPresets&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;updateDisplayAfterLibraryLoad()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Could not open file &quot;..fileToRead:getFullPathName())&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function updateDisplayAfterLibraryLoad()&#13;&#10;&#9;libraryDirty = false&#13;&#10;&#9;lastPresetDirty = false&#13;&#10;&#9;setLibraryFileName()&#13;&#10;&#9;-- Make sure we force the preset mode update&#13;&#10;&#9;if isLibrary then&#13;&#10;&#9;&#9;isLibrary = false&#13;&#10;&#9;&#9;currentLibraryPresetNumber = currentPresetNumber&#13;&#10;&#9;&#9;currentPresetNumber = currentAmpPresetNumber&#13;&#10;&#9;end&#13;&#10;&#9;setPresetMode(0,false)&#13;&#10;&#9;changePresetMode(true,true)&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="27d97b7306de483cbd617b1538b02417" luaMethodValid="1"/>
      <luaMethod luaMethodName="presetModeChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;presetModeChanged = function(mod, value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local newIsLibrary&#13;&#10;&#9;if value == 0 then&#13;&#10;&#9;&#9;newIsLibrary = true&#13;&#10;&#9;else&#13;&#10;&#9;&#9;newIsLibrary = false&#13;&#10;&#9;end&#13;&#10;&#9;changePresetMode(newIsLibrary,true)&#13;&#10;end&#13;&#10;&#13;&#10;changePresetMode = function(value,sendMidi)&#13;&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;--console(&quot;Change preset mode...&quot;)&#13;&#10;&#9;if value ~= isLibrary then&#13;&#10;&#9;&#9;--console(&quot;Change preset mode !&quot;)&#13;&#10;&#9;&#9;local component = panel:getComponent(&quot;presetCopy&quot;)&#13;&#10;&#9;&#9;local component2 = panel:getComponent(&quot;presetMove&quot;)&#13;&#10;&#9;&#9;isLibrary = value&#13;&#10;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;presets = libraryPresets&#13;&#10;&#9;&#9;&#9;-- Switch from amp to library&#13;&#10;&#9;&#9;&#9;currentAmpPresetNumber = currentPresetNumber&#13;&#10;&#9;&#9;&#9;currentPresetNumber = currentLibraryPresetNumber&#13;&#10;&#9;&#9;&#9;-- Enable library buttons&#13;&#10;&#9;&#9;&#9;component:setEnabled(true)&#13;&#10;&#9;&#9;&#9;component2:setEnabled(true)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;presets = ampPresets&#13;&#10;&#9;&#9;&#9;-- Switch from library to amp&#13;&#10;&#9;&#9;&#9;currentLibraryPresetNumber = currentPresetNumber&#13;&#10;&#9;&#9;&#9;currentPresetNumber = currentAmpPresetNumber&#13;&#10;&#9;&#9;&#9;-- Disable library buttons&#13;&#10;&#9;&#9;&#9;component:setEnabled(false)&#13;&#10;&#9;&#9;&#9;component2:setEnabled(false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;editBuffer = copyPreset(presets[currentPresetNumber])&#13;&#10;&#9;&#9;originalBuffer = copyPreset(presets[currentPresetNumber])&#13;&#10;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;loadPreset(editBuffer,true)&#13;&#10;&#9;&#9;&#9;if sendMidi then&#13;&#10;&#9;&#9;&#9;&#9;--console(&quot;Send edit buffer...&quot;)&#13;&#10;&#9;&#9;&#9;&#9;sendEditBufferDump()&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;if sendMidi then&#13;&#10;&#9;&#9;&#9;&#9;--sendEditBufferRequest()&#13;&#10;&#9;&#9;&#9;&#9;sendPresetChangeRequest(currentPresetNumber)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;initPresetCombo()&#13;&#10;&#9;end&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="050d70bf5be543578376eba5ec1fcf25" luaMethodValid="1"/>
      <luaMethod luaMethodName="savePresetsAs" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;savePresetsAs = function(mod, value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local fileToWrite = utils.saveFileWindow(&quot;Save library to disk&quot;, File(currentLibraryFile), getAmpTypeExtension(), true)&#13;&#10;&#13;&#10;&#9;if fileToWrite:isValid() == false then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Check if the file exists&#13;&#10;&#9;if fileToWrite:existsAsFile() == false then&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;-- If file does not exist, then create it&#13;&#10;&#9;&#9;if fileToWrite:create() == false then&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- If file cannot be created, then fail here&#13;&#10;&#9;&#9;&#9;utils.warnWindow (&quot;\n\nSorry, the Editor failed to\nsave the library to disk!&quot;, &quot;The file does not exist.&quot;)&#13;&#10;&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;saveLibraryAs(fileToWrite:getFullPathName())&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="854c2fc9cf1b46bfa42e4513a922e965" luaMethodValid="1"/>
      <luaMethod luaMethodName="sendPresetsToAmp" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;sendPresetsToAmp = function(mod, value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local answer = utils.questionWindow(&quot;Overwrite Amp Presets ?&quot;, &quot;Do you want to send all the presets of the current library to the Amp ?\nThis will overwrite all the current Amp presets.&quot;,&quot;OK&quot;,&quot;Cancel&quot;)&#13;&#10;&#9;if answer then&#13;&#10;&#9;&#9;-- Send to amp&#13;&#10;&#9;&#9;sendPresetsBufferDump(libraryPresets,sendPresetsToAmpFinisehd)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function sendPresetsToAmpFinisehd(complete)&#13;&#10;&#9;if complete then&#13;&#10;&#9;&#9;-- Update amp presets&#13;&#10;&#9;&#9;ampPresets = copyPresets(libraryPresets)&#13;&#10;&#9;&#9;if connected then&#13;&#10;&#9;&#9;&#9;-- Force combo and preset name update even if we are already in amp mode&#13;&#10;&#9;&#9;&#9;isLibrary = true&#13;&#10;&#9;&#9;&#9;setPresetMode(1,false)&#13;&#10;&#9;&#9;&#9;changePresetMode(false,true)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;--console(&quot;Upload complete !&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;--console(&quot;Upload canceled !&quot;)&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="794ef45950a74f15bee0133aac2f3b67" luaMethodValid="1"/>
      <luaMethod luaMethodName="backupPresets" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;backupPresets = function(mod, value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- TODO Force ampPresets update before backup&#13;&#10;&#9;local fileToWrite = utils.saveFileWindow(&quot;Save Amp presets to disk&quot;, File(&quot;&quot;), getAmpTypeExtension(), true)&#13;&#10;&#13;&#10;&#9;if fileToWrite:isValid() == false then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Check if the file exists&#13;&#10;&#9;if fileToWrite:existsAsFile() == false then&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;-- If file does not exist, then create it&#13;&#10;&#9;&#9;if fileToWrite:create() == false then&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- If file cannot be created, then fail here&#13;&#10;&#9;&#9;&#9;utils.warnWindow (&quot;\n\nSorry, the Editor failed to\nsave the library to disk!&quot;, &quot;The file does not exist.&quot;)&#13;&#10;&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;savePresetsToFile(fileToWrite:getFullPathName(),ampPresets)&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="a8e0d0f99b43491fbab2edbe7baea0c4" luaMethodValid="1"/>
      <luaMethod luaMethodName="restorePresets" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;restorePresets = function(mod, value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local fileToRead = utils.openFileWindow(&quot;Restore Amp presets from disk&quot;, File(&quot;&quot;), getAmpTypeExtension(), true)&#13;&#10;&#13;&#10;&#9;-- Check if the file exists&#13;&#10;&#9;if fileToRead:existsAsFile() then&#13;&#10;&#9;&#9;local path = fileToRead:getFullPathName()&#13;&#10;&#9;&#9;local answer = utils.questionWindow(&quot;Overwrite Amp Presets ?&quot;, &quot;Do you want to send all the presets from &quot;..path..&quot; to the Amp ?\nThis will overwrite all the current Amp presets.&quot;,&quot;OK&quot;,&quot;Cancel&quot;)&#13;&#10;&#9;&#9;if not answer then&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Load file&#13;&#10;&#9;&#9;local data = fileToRead:loadFileAsString()&#13;&#10;&#9;&#9;newAmpPresets = loadFromText(data)&#13;&#10;&#9;&#9;sendPresetsBufferDump(newAmpPresets,sendBackupToAmpFinisehd)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Could not open file &quot;..fileToRead:getFullPathName())&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function sendBackupToAmpFinisehd(complete)&#13;&#10;&#9;if complete then&#13;&#10;&#9;&#9;ampPresets = newAmpPresets&#13;&#10;&#9;&#9;if connected then&#13;&#10;&#9;&#9;&#9;-- Force combo and preset name update even if we are already in amp mode&#13;&#10;&#9;&#9;&#9;isLibrary = true&#13;&#10;&#9;&#9;&#9;setPresetMode(1,false)&#13;&#10;&#9;&#9;&#9;changePresetMode(false,true)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="37c70180db0244cfac9eb3c0e158e91a" luaMethodValid="1"/>
      <luaMethod luaMethodName="presetNumberChanged" luaMethodCode="--&#10;-- Called when the contents of a Label are changed&#10;-- @label&#10;-- @newContent    a string that the label now contains&#10;--&#10;&#10;presetNumberChanged = function(label, newContent)&#10;&#9;if stopBpmValueChangePropagation or panel:getBootstrapState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;--console(&quot;New preset number &quot;..newContent)&#13;&#10;&#9;local newPresetValue = nil&#13;&#10;&#9;if newContent ~= &quot;&quot; then&#13;&#10;&#9;&#9;local value = tonumber(newContent)&#13;&#10;&#9;&#9;if value ~= nil and value &gt;= 1 and value &lt;= 128 then&#13;&#10;&#9;&#9;&#9;newPresetValue = value&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;newPresetValue = nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;if newPresetValue ~= nil and newPresetValue ~= currentPresetNumber then&#13;&#10;&#9;&#9;changePresetNumber(newPresetValue)&#10;&#9;else&#13;&#10;&#9;&#9;local component = panel:getComponent(&quot;presetNumber&quot;)&#13;&#10;&#9;&#9;if component ~= nil then&#13;&#10;&#9;&#9;&#9;component:setComponentText(&quot;&quot;..currentPresetNumber)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;   &#9;&#9;console(&quot;Modulator not found: presetName&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="uiLabelChangedCbk" luaMethodSource="0"
                 uuid="d29d32b23fb44fcfb9769d8b3a4b85c1" luaMethodValid="1"/>
      <luaMethod luaMethodName="movePreset" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;movePreset = function(mod, value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;copyLibraryPreset(true)&#10;end&#13;&#10;&#13;&#10;copyLibraryPreset = function(move)&#10;&#9;if panel:getBootstrapState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Not supported in amp mode&#13;&#10;&#9;if not isLibrary then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local comboItems = StringArray()&#13;&#10;&#9;local comboPresets&#13;&#10;&#9;local size = 1&#13;&#10;&#9;while size &lt;= 128 do&#13;&#10;&#9;&#9;local presetName&#13;&#10;&#9;&#9;if libraryPresets[size] == nil then&#13;&#10;&#9;&#9;&#9;presetName = &quot;Preset &quot;..size&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;presetName = libraryPresets[size][&quot;name&quot;]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;comboItems:add (&quot;&quot;..size..&quot; - &quot;..presetName)&#13;&#10;&#9;&#9;size = size+1&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local message&#13;&#10;&#9;if move then&#13;&#10;&#9;&#9;message = &quot;Choose a location to move the preset to (exchange)&quot;&#13;&#10;&#9;else&#13;&#10;&#9;&#9;message = &quot;Choose a location to copy the preset to&quot;&#13;&#10;&#9;end&#13;&#10;&#9;modalWindow = AlertWindow(&quot;Location ?&quot;, message, AlertWindow.QuestionIcon)&#13;&#10;&#9;modalWindow:addButton(&quot;OK&quot;, 1, KeyPress(KeyPress.returnKey), KeyPress())&#13;&#10;&#9;modalWindow:addButton(&quot;Cancel&quot;, 0, KeyPress(KeyPress.escapeKey), KeyPress())&#13;&#10;&#9;modalWindow:addComboBox (&quot;myCombo&quot;, comboItems, &quot;Preset #&quot;)&#13;&#10;&#9;if move then&#13;&#10;&#9;&#9;modalWindow:setModalHandler(moveWindowCallback)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;modalWindow:setModalHandler(copyWindowCallback)&#13;&#10;&#9;end&#13;&#10;&#9;&#9;&#13;&#10;&#9;--  Never let Lua delete this window (3rd parameter), enter modal state&#13;&#10;&#9;modalWindow:runModalLoop()&#13;end&#13;&#10;&#13;&#10;function copyWindowCallback(result, window)&#13;&#10;&#9;libWindowCallback(result, window, false)&#13;&#10;end&#13;&#10;&#13;&#10;function moveWindowCallback(result, window)&#13;&#10;&#9;libWindowCallback(result, window, true)&#13;&#10;end&#13;&#10;&#13;&#10;function libWindowCallback(result, window, move)&#13;&#10;&#9;if panel:getBootstrapState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;window:setVisible(false)&#13;&#10;&#9;--console(&quot;\n\nwindowCallback result=&quot;..result)&#13;&#10;&#9;if result == 1 then&#13;&#10;&#9;&#9;comboBox = window:getComboBoxComponent(&quot;myCombo&quot;)&#13;&#10;&#9;&#9;if comboBox ~= nil then&#13;&#10;&#9;&#9;&#9;local originalPresetNumber = currentPresetNumber&#13;&#10;&#9;&#9;&#9;local newPresetNumber = comboBox:getSelectedId()&#13;&#10;&#9;&#9;&#9;if originalPresetNumber ~= newPresetNumber then&#13;&#10;&#9;&#9;&#9;&#9;if showOriginal then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- restore original buffer&#13;&#10;&#9;&#9;&#9;&#9;&#9;editBuffer = copyPreset(originalBuffer)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;if move then&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Exchange presets&#13;&#10;&#9;&#9;&#9;&#9;&#9;local presetFromNewLocation = presets[newPresetNumber]&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Update new location&#13;&#10;&#9;&#9;&#9;&#9;&#9;editBuffer[&quot;number&quot;]=newPresetNumber&#13;&#10;&#9;&#9;&#9;&#9;&#9;presets[newPresetNumber] = copyPreset(editBuffer)&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Update original location&#13;&#10;&#9;&#9;&#9;&#9;&#9;presetFromNewLocation[&quot;number&quot;]=originalPresetNumber&#13;&#10;&#9;&#9;&#9;&#9;&#9;presets[originalPresetNumber] = presetFromNewLocation&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- Copy preset&#13;&#10;&#9;&#9;&#9;&#9;&#9;editBuffer[&quot;number&quot;]=newPresetNumber&#13;&#10;&#9;&#9;&#9;&#9;&#9;presets[newPresetNumber] = copyPreset(editBuffer)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;setPresetNumber(newPresetNumber)&#13;&#10;&#9;&#9;&#9;&#9;-- Library is now dirty&#13;&#10;&#9;&#9;&#9;&#9;libraryDirty = true&#13;&#10;&#9;&#9;&#9;&#9;setLibraryFileName()&#13;&#10;&#9;&#9;&#9;&#9;-- And update combo content&#13;&#10;&#9;&#9;&#9;&#9;local combo = getPresetCombo()&#13;&#10;&#9;&#9;&#9;&#9;if combo ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;combo:changeItemText(newPresetNumber,&quot;&quot;..newPresetNumber..&quot; - &quot;..presets[newPresetNumber][&quot;name&quot;])&#13;&#10;&#9;&#9;&#9;&#9;&#9;combo:changeItemText(originalPresetNumber,&quot;&quot;..originalPresetNumber..&quot; - &quot;..presets[originalPresetNumber][&quot;name&quot;])&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="8e3b6f1e7bc24a5e834250b6533cff40" luaMethodValid="1"/>
      <luaMethod luaMethodName="copyPresetTo" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;copyPresetTo = function(mod, value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;copyLibraryPreset(false)&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="e04f30d3baca4d7bb348789e86756c6d" luaMethodValid="1"/>
      <luaMethod luaMethodName="generateStatusMidi" luaMethodCode="--&#10;--&#10;--&#10;generateStatusMidi = function(modulator, numericModulatorValue)&#13;&#10;&#9;if numericModulatorValue == 0 then&#13;&#10;&#9;&#9;return generateMidi(modulator,0)&#10;&#9;else&#13;&#10;&#9;&#9;return generateMidi(modulator,127)&#10;&#9;end&#10;end"
                 luaMethodLinkedProperty="luaModulatorGetValueForMIDI" luaMethodSource="0"
                 uuid="cd0af87fe8384851a9664a787f0d643d" luaMethodValid="1"/>
      <luaMethod luaMethodName="cancel" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;cancel = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local completed = presetsToSendIndex &gt;= presetsToSendSize&#13;&#10;&#9;presetsToSend = nil&#13;&#10;&#9;presetsToSendIndex = 0&#13;&#10;&#9;presetsToSendSize = 0&#13;&#10;&#9;if uploadFinishedCallback ~= nil then&#13;&#10;&#9;&#9;uploadFinishedCallback(completed)&#13;&#10;&#9;&#9;uploadFinishedCallback = nil&#13;&#10;&#9;end&#13;&#10;&#9;switchToEditorTab()&#13;&#10;end&#13;&#10;&#13;&#10;function startProgress(progressLabel,cancelLabel)&#13;&#10;&#9;panel:getComponent(&quot;progressLabel&quot;):setComponentText(progressLabel)&#13;&#10;&#9;panel:getComponent(&quot;progressCancel&quot;):setPropertyString(&quot;uiButtonContent&quot;,cancelLabel)&#13;&#10;&#9;updateProgressStatus(&quot;&quot;)&#13;&#10;&#9;updateProgressValue(0)&#13;&#10;&#9;switchToProgressTab()&#13;&#10;end&#13;&#10;&#13;&#10;function updateProgressStatus(status)&#13;&#10;&#9;panel:getComponent(&quot;progressStatus&quot;):setComponentText(status)&#13;&#10;end&#13;&#10;&#13;&#10;function updateProgressValue(value)&#13;&#10;&#9;panel:getComponent(&quot;progressBar&quot;):setComponentValue(value,true)&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="55db5370854d4b34b517f665b4b31afd" luaMethodValid="1"/>
      <luaMethod luaMethodName="settings" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;settings = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;sendSystemConfigRequest()&#13;&#10;&#9;switchToSettingsTab()&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="53baad1ad37b498aaf91df0228c6bf1e" luaMethodValid="1"/>
      <luaMethod luaMethodName="settingsOk" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;settingsOk = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Read modulator values&#13;&#10;&#9;omniMode = panel:getModulator(&quot;omniMode&quot;):getValue()&#10;&#9;midiChannel = panel:getModulator(&quot;midiChannel&quot;):getValue()&#10;&#9;powerEqGlobal = panel:getModulator(&quot;powerEqMode&quot;):getValue()&#10;&#9;powerSoakGlobal = panel:getModulator(&quot;powerSoakMode&quot;):getValue()&#13;&#10;&#9;local powerSoakValue = nil&#13;&#10;&#9;if (isLibrary or  isGm40()) and (powerSoakGlobal == 1) then&#13;&#10;&#9;&#9;powerSoakValue = globalPowerSoakValue&#13;&#10;&#9;else&#13;&#10;&#9;&#9;if editBuffer ~= nil then&#13;&#10;&#9;&#9;&#9;powerSoakValue = editBuffer[&quot;powerSoak&quot;]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;-- Send to amp&#13;&#10;&#9;sendSystemConfig()&#13;&#10;&#9;if powerSoakValue ~= nil then&#13;&#10;&#9;&#9;setModulatorValue(&quot;powerSoak&quot;,powerSoakValue,false,false)&#13;&#10;&#9;&#9;sendParameter(30,powerSoakValue)&#13;&#10;&#9;end&#13;&#10;&#9;switchToEditorTab()&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="d0b3228b515b4f8781bacc58b6cee29e" luaMethodValid="1"/>
      <luaMethod luaMethodName="settingsCancel" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;settingsCancel = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;switchToEditorTab()&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="05a6aa8d22544b539a231c5b974bbb33" luaMethodValid="1"/>
      <luaMethod luaMethodName="settingsDefault" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;settingsDefault = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;panel:getModulator(&quot;omniMode&quot;):setValue(1,true,true)&#10;&#9;panel:getModulator(&quot;midiChannel&quot;):setValue(1,true,true)&#10;&#9;panel:getModulator(&quot;powerEqMode&quot;):setValue(0,true,true)&#10;&#9;panel:getModulator(&quot;powerSoakMode&quot;):setValue(0,true,true)&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="aab4875e4c694c129acf9fd9c7e33418" luaMethodValid="1"/>
      <luaMethod luaMethodName="compareModeChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;compareModeChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if value == 1 then&#13;&#10;&#9;&#9;showOriginal = false&#13;&#10;&#9;else&#13;&#10;&#9;&#9;showOriginal = true&#13;&#10;&#9;end&#13;&#10;&#9;console(&quot;Set compare mode : &quot;..value)&#13;&#10;&#9;setCompareMode(true)&#13;&#10;&#9;if presetChanged then&#13;&#10;&#9;&#9;if showOriginal then&#13;&#10;&#9;&#9;&#9;sendOriginalBufferDump()&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;sendEditBufferDump()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#10;end&#13;&#10;&#13;&#10;function setModified(modified)&#13;&#10;&#9;if modified then&#13;&#10;&#9;&#9;panel:getModulator(&quot;compareSwitch&quot;):setValue(1,true,true)&#13;&#10;&#9;&#9;presetChanged = true&#13;&#10;&#9;else&#13;&#10;&#9;&#9;panel:getModulator(&quot;compareSwitch&quot;):setValue(0,true,true)&#13;&#10;&#9;&#9;presetChanged = false&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function setCompareMode(compare)&#13;&#10;&#9;if compare then&#13;&#10;&#9;&#9;compareMode = true&#13;&#10;&#9;&#9;showCompare()&#13;&#10;&#9;else&#13;&#10;&#9;&#9;compareMode = false&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function showCompare()&#13;&#10;&#9;-- Gain&#13;&#10;&#9;local editedValue = editBuffer[&quot;gain&quot;]&#13;&#10;&#9;local originalValue = originalBuffer[&quot;gain&quot;]&#13;&#10;&#9;local value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;channelGain&quot;,value,false,true,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Bass&#13;&#10;&#9;editedValue = editBuffer[&quot;bass&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;bass&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;preampBass&quot;,value,false,true,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Mid&#13;&#10;&#9;editedValue = editBuffer[&quot;mid&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;mid&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;preampMid&quot;,value,false,true,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Volume&#13;&#10;&#9;editedValue = editBuffer[&quot;volume&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;volume&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;channelVolume&quot;,value,false,true,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Treble&#13;&#10;&#9;editedValue = editBuffer[&quot;treble&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;treble&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;preampTreble&quot;,value,false,true,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Power EQ&#13;&#10;&#9;if not (powerEqGlobal == 1) then&#13;&#10;&#9;&#9;-- Resonance&#13;&#10;&#9;&#9;editedValue = editBuffer[&quot;resonance&quot;]&#13;&#10;&#9;&#9;originalValue = originalBuffer[&quot;resonance&quot;]&#13;&#10;&#9;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;&#9;setKknobModulatorValue(&quot;powerResonance&quot;,value,false,true,true)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Presence&#13;&#10;&#9;&#9;editedValue = editBuffer[&quot;presence&quot;]&#13;&#10;&#9;&#9;originalValue = originalBuffer[&quot;presence&quot;]&#13;&#10;&#9;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;&#9;setKknobModulatorValue(&quot;powerPresence&quot;,value,false,true,true)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;-- Reverb&#13;&#10;&#9;editedValue = editBuffer[&quot;reverb&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;reverb&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;reverbLevel&quot;,value,false,true,true)&#13;&#10;&#9;&#9;--setBlueLedModulatorValue(&quot;reverbStatus&quot;,value,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Delay level&#13;&#10;&#9;editedValue = editBuffer[&quot;delayLevel&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;delayLevel&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;delayLevel&quot;,value,false,true,true)&#13;&#10;&#9;&#9;--setBlueLedModulatorValue(&quot;delayStatus&quot;,value,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Delay Time&#13;&#10;&#9;editedValue = editBuffer[&quot;delayTime&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;delayTime&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;panel:getComponent(&quot;delayTime&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;&#9;if not connected then&#13;&#10;&#9;&#9;&#9;setDelayTime(value,true,true,false,true)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;-- Delay Feedback&#13;&#10;&#9;editedValue = editBuffer[&quot;delayFeedback&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;delayFeedback&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;delayFeedback&quot;,value,false,true,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Mod intensity&#13;&#10;&#9;editedValue = editBuffer[&quot;modIntensity&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;modIntensity&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setKknobModulatorValue(&quot;modulationIntensity&quot;,value,false,true,true)&#13;&#10;&#9;&#9;--setBlueLedModulatorValue(&quot;modulationStatus&quot;,value,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Mod rate / type&#13;&#10;&#9;editedValue = editBuffer[&quot;modType&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;modType&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;-- Rate&#13;&#10;&#9;&#9;local editedRate = (editedValue % 64)&#13;&#10;&#9;&#9;local originalRate = (originalValue % 64)&#13;&#10;&#9;&#9;if editedRate ~= originalRate then&#13;&#10;&#9;&#9;&#9;panel:getComponent(&quot;modulationRate&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Type&#13;&#10;&#9;&#9;local editedType = math.floor(editedValue / 64)&#13;&#10;&#9;&#9;local originalType = math.floor(originalValue / 64)&#13;&#10;&#9;&#9;if editedType ~= originalType then&#13;&#10;&#9;&#9;&#9;panel:getComponent(&quot;modulationType&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;rotary-red&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if not connected then&#13;&#10;&#9;&#9;&#9;setModulation(value,false,true)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;-- Preamp channel&#13;&#10;&#9;editedValue = editBuffer[&quot;channelType&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;channelType&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;panel:getComponent(&quot;channelType&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;rotary-red&quot;)&#13;&#10;&#9;&#9;if not connected then&#13;&#10;&#9;&#9;&#9;setModulatorValue(&quot;channelType&quot;,value,false,false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;-- Pream boost&#13;&#10;&#9;editedValue = editBuffer[&quot;channelBoost&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;channelBoost&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setRedLedModulatorValue(&quot;channelBoost&quot;,value,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Fx loop&#13;&#10;&#9;editedValue = editBuffer[&quot;fxLoop&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;fxLoop&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setBlueLedModulatorValue(&quot;fxLoopStatus&quot;,value,true)&#13;&#10;&#9;end&#13;&#10;&#9;-- Power soak&#13;&#10;&#9;if (not isLibrary and not isGm40()) or not (powerSoakGlobal == 1) then&#13;&#10;&#9;&#9;editedValue = editBuffer[&quot;powerSoak&quot;]&#13;&#10;&#9;&#9;originalValue = originalBuffer[&quot;powerSoak&quot;]&#13;&#10;&#9;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;&#9;panel:getComponent(&quot;powerSoak&quot;):setPropertyString(&quot;uiSliderTrackColour&quot;,&quot;FF7F0D13&quot;)&#13;&#10;&#9;&#9;&#9;if not connected then&#13;&#10;&#9;&#9;&#9;&#9;setModulatorValue(&quot;powerSoak&quot;,value,false,false)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;-- Noise Gate&#13;&#10;&#9;editedValue = editBuffer[&quot;noiseGate&quot;]&#13;&#10;&#9;originalValue = originalBuffer[&quot;noiseGate&quot;]&#13;&#10;&#9;value = getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if editedValue ~= originalValue then&#13;&#10;&#9;&#9;setBlueLedModulatorValue(&quot;noiseGateStatus&quot;,value,true)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function getCompareValue(editedValue,originalValue)&#13;&#10;&#9;if showOriginal then&#13;&#10;&#9;&#9;return originalValue&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return editedValue&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function hideCompare()&#13;&#10;&#9;-- Gain&#13;&#10;&#9;panel:getComponent(&quot;channelGain&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Bass&#13;&#10;&#9;panel:getComponent(&quot;preampBass&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Mid&#13;&#10;&#9;panel:getComponent(&quot;preampMid&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Volume&#13;&#10;&#9;panel:getComponent(&quot;channelVolume&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Treble&#13;&#10;&#9;panel:getComponent(&quot;preampTreble&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Resonance&#13;&#10;&#9;panel:getComponent(&quot;powerResonance&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Presence&#13;&#10;&#9;panel:getComponent(&quot;powerPresence&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Reverb&#13;&#10;&#9;panel:getComponent(&quot;reverbLevel&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;--panel:getComponent(&quot;reverbStatus&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue&quot;)&#13;&#10;&#9;-- Delay level&#13;&#10;&#9;panel:getComponent(&quot;delayLevel&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;--panel:getComponent(&quot;delayStatus&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue&quot;)&#13;&#10;&#9;-- Delay Time&#13;&#10;&#9;panel:getComponent(&quot;delayTime&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Delay Feedback&#13;&#10;&#9;panel:getComponent(&quot;delayFeedback&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Mod intensity&#13;&#10;&#9;panel:getComponent(&quot;modulationIntensity&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;--panel:getComponent(&quot;modulationStatus&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue&quot;)&#13;&#10;&#9;-- Mod type&#13;&#10;&#9;panel:getComponent(&quot;modulationType&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;rotary&quot;)&#13;&#10;&#9;panel:getComponent(&quot;modulationRate&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;-- Preamp channel&#13;&#10;&#9;panel:getComponent(&quot;channelType&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;rotary&quot;)&#13;&#10;&#9;-- Pream boost&#13;&#10;&#9;panel:getComponent(&quot;channelBoost&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-red&quot;)&#13;&#10;&#9;-- Fx loop&#13;&#10;&#9;panel:getComponent(&quot;fxLoopStatus&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue&quot;)&#13;&#10;&#9;-- Power soak&#13;&#10;&#9;panel:getComponent(&quot;powerSoak&quot;):setPropertyString(&quot;uiSliderTrackColour&quot;,&quot;FF409FCB&quot;)&#13;&#10;&#9;-- Noise Gate&#13;&#10;&#9;panel:getComponent(&quot;noiseGateStatus&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue&quot;)&#13;&#10;&#9;-- Disable compare&#13;&#10;&#9;compareMode = false&#13;&#10;&#9;-- Restore original switch&#13;&#10;&#9;setModified(false)&#13;&#10;end&#13;&#10;&#13;&#10;function highlight(paramName)&#13;&#10;&#9;if paramName == &quot;gain&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;channelGain&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;bass&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;preampBass&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;mid&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;preampMid&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;volume&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;channelVolume&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;treble&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;preampTreble&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;resonance&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;powerResonance&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;presence&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;powerPresence&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;reverb&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;reverbLevel&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;delayLevel&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;delayLevel&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;delayTime&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;delayTime&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;delayFeedback&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;delayFeedback&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;modIntensity&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;modulationIntensity&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;modTypeKnob&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;modulationType&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;rotary-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;modRateKnob&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;modulationRate&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;channelType&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;channelType&quot;):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;rotary-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;channelBoost&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;channelBoost&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-red-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;fxLoop&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;fxLoopStatus&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue-red&quot;)&#13;&#10;&#9;elseif paramName == &quot;powerSoak&quot; then&#13;&#10;&#9;&#9;if not isLibrary or not (powerSoakGlobal == 1) then&#13;&#10;&#9;&#9;&#9;panel:getComponent(&quot;powerSoak&quot;):setPropertyString(&quot;uiSliderTrackColour&quot;,&quot;FF7F0D13&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;elseif paramName == &quot;noiseGate&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;noiseGateStatus&quot;):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue-red&quot;)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function setKknobModulatorValue(name,value,sendMidi,animate,red)&#13;&#10;&#9;if red then&#13;&#10;&#9;&#9;panel:getComponent(name):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-red&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;panel:getComponent(name):setPropertyString(&quot;uiImageSliderResource&quot;,&quot;knob-blue&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;if not connected then&#13;&#10;&#9;&#9;setModulatorValue(name,value,sendMidi,animate)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function setRedLedModulatorValue(name,value,red)&#13;&#10;&#9;if red then&#13;&#10;&#9;&#9;panel:getComponent(name):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-red-red&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;panel:getComponent(name):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-red&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;if not connected then&#13;&#10;&#9;&#9;setStatusModulatorValue(name,value)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function setBlueLedModulatorValue(name,value,red)&#13;&#10;&#9;if red then&#13;&#10;&#9;&#9;panel:getComponent(name):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue-red&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;panel:getComponent(name):setPropertyString(&quot;uiImageButtonResource&quot;,&quot;led-button-blue&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;if not connected then&#13;&#10;&#9;&#9;setStatusModulatorValue(name,value)&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="d0cdd4870ab3493ea905476ef095fef2" luaMethodValid="1"/>
      <luaMethod luaMethodName="restoreOriginal" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;restoreOriginal = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if not presetChanged then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Restore original buffer&#13;&#10;&#9;editBuffer = copyPreset(originalBuffer)&#13;&#10;&#9;presets[currentPresetNumber] = copyPreset(editBuffer)&#13;&#10;&#13;&#10;&#9;-- Hide compare&#13;&#10;&#9;hideCompare()&#13;&#10;&#9;if libraryDirty and not lastPresetDirty then&#13;&#10;&#9;&#9;-- We are no longer dirty&#13;&#10;&#9;&#9;libraryDirty = false&#13;&#10;&#9;&#9;lastPresetDirty = false&#13;&#10;&#9;&#9;setLibraryFileName()&#13;&#10;&#9;end&#13;&#10;&#9;if not showOriginal then&#13;&#10;&#9;&#9;-- Restore original data&#13;&#10;&#9;&#9;sendEditBufferDump()&#13;&#10;&#9;&#9;if not connected then&#13;&#10;&#9;&#9;&#9;loadPreset(editBuffer,false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="8fef08f06ef04fcf82d22585bb6c96f2" luaMethodValid="1"/>
      <luaMethod luaMethodName="help" luaMethodCode="--&#10;-- Called when the mouse moves over a component&#10;--&#10;&#10;help = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;switchToHelpTab()&#10;end"
                 luaMethodLinkedProperty="componentLuaMouseMoved" luaMethodSource="0"
                 uuid="bfa58fd43f93423a8a685f4c8c81ae7e" luaMethodValid="1"/>
      <luaMethod luaMethodName="helpOk" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;helpOk = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;switchToEditorTab()&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="7261a10302e54a3b8958d5fa3eb27e06" luaMethodValid="1"/>
      <luaMethod luaMethodName="checkConnection" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;checkConnection = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local value&#13;&#10;&#9;if connected then&#13;&#10;&#9;&#9;value = 1&#13;&#10;&#9;else&#13;&#10;&#9;&#9;value = 0&#13;&#10;&#9;end&#13;&#10;&#9;mod:setPropertyInt(&quot;modulatorValue&quot;,value)&#13;&#10;&#9;--console(&quot;Check connection !&quot;)&#13;&#10;&#9;if connected then&#13;&#10;&#9;&#9;-- Force connection check&#13;&#10;&#9;&#9;state = 0&#13;&#10;&#9;&#9;setConnected(false)&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="b806ca88ed8148a0b03611a5a2ac4069" luaMethodValid="1"/>
      <luaMethod luaMethodName="checkSynced" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;checkSynced = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local value&#13;&#10;&#9;if synced then&#13;&#10;&#9;&#9;value = 1&#13;&#10;&#9;else&#13;&#10;&#9;&#9;value = 0&#13;&#10;&#9;end&#13;&#10;&#9;mod:setPropertyInt(&quot;modulatorValue&quot;,value)&#13;&#10;&#9;--console(&quot;Check synced !&quot;)&#13;&#10;&#9;if connected then&#13;&#10;&#9;&#9;-- Force connection check&#13;&#10;&#9;&#9;state = 0&#13;&#10;&#9;&#9;setConnected(false)&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="5b738219789840b4b036b838d83812c8" luaMethodValid="1"/>
      <luaMethod luaMethodName="savePresetsForIpad" luaMethodCode="&#13;&#10;--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;savePresetsForIpad = function(mod, value)&#13;&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local binaryLibraryFile = string.gsub(currentLibraryFile,&quot;%.gm36&quot;,&quot;&quot;)&#13;&#10;&#9;binaryLibraryFile = string.gsub(binaryLibraryFile,&quot;%.gm40&quot;,&quot;&quot;)&#13;&#10;&#9;local extension = &quot;*.gm36memory&quot;&#13;&#10;&#9;if isGm40() then&#13;&#10;&#9;&#9;extension = &quot;*.gm40memory&quot;&#13;&#10;&#9;end&#13;&#10;&#9;local fileToWrite = utils.saveFileWindow(&quot;Save iPad library to disk&quot;, File(binaryLibraryFile), extension, true)&#13;&#10;&#13;&#10;&#9;if fileToWrite:isValid() == false then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Check if the file exists&#13;&#10;&#9;if fileToWrite:existsAsFile() == false then&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;-- If file does not exist, then create it&#13;&#10;&#9;&#9;if fileToWrite:create() == false then&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- If file cannot be created, then fail here&#13;&#10;&#9;&#9;&#9;utils.warnWindow (&quot;\n\nSorry, the Editor failed to\nsave the library to disk!&quot;, &quot;The file does not exist.&quot;)&#13;&#10;&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;saveLibraryForIpad(fileToWrite:getFullPathName())&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="f0da3d230af946b7aadd9e34477843d8" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditor" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryEditor = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;switchToLibraryEditorTab()&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="13d5a482d6034699a42c6483aee1d26e" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorOk" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryEditorOk = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if libraryChanged or libraryListenPressed then&#13;&#10;&#9;&#9;libraryListenPressed = false&#13;&#10;&#9;&#9;-- Restore edit buffers&#13;&#10;&#9;&#9;--console(&quot;Restore preset #&quot;..currentPresetNumber..&quot; name = &quot;..presets[currentPresetNumber]['name']..&quot; channel &quot;..presets[currentPresetNumber][&quot;channelType&quot;])&#13;&#10;&#9;&#9;editBuffer = copyPreset(presets[currentPresetNumber])&#13;&#10;&#9;&#9;originalBuffer = copyPreset(presets[currentPresetNumber])&#13;&#10;&#9;&#9;-- Restore preset&#13;&#10;&#9;&#9;loadPreset(editBuffer,true)&#13;&#10;&#9;&#9;if connected then&#13;&#10;&#9;&#9;&#9;-- Send preset to amp&#13;&#10;&#9;&#9;&#9;sendEditBufferDump()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;if libraryChanged then&#13;&#10;&#9;&#9;if isLibrary then&#13;&#10;&#9;&#9;&#9;initPresetCombo()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Library is now dirty&#13;&#10;&#9;&#9;libraryDirty = true&#13;&#10;&#9;&#9;setLibraryFileName()&#13;&#10;&#9;&#9;libraryChanged = false&#13;&#10;&#9;end&#13;&#10;&#9;switchToEditorTab()&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="4afea29b342746c99bb94426f2a0c2e5" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorItemClicked" luaMethodCode="--&#10;-- Called when an item is clicked&#10;--&#10;-- @modulator the modulator the event occured on&#10;-- @value      a integer that represents the clicked item&#10;--&#10;&#10;libraryEditorItemClicked = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#13;&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;&#9;return numericModulatorValue&#13;&#10;&#9;end&#13;&#10;&#9;local bankNumber = modulator:getPropertyInt(&quot;modulatorCustomIndex&quot;)&#13;&#10;&#9;-- console(&quot;Item clicked = &quot;..value)&#13;&#10;&#9;local selectedIndex = (4 * (bankNumber-1)) + value + 1&#13;&#10;&#9;if (KeyPress.isKeyCurrentlyDown(KeyPress.escapeKey) or KeyPress.isKeyCurrentlyDown(KeyPress.tabKey)) then &#13;&#10;&#9;&#9;if selectedIndex &lt; librarySelectionStart then&#13;&#10;&#9;&#9;&#9;librarySelectionStart = selectedIndex&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;librarySelectionEnd = selectedIndex&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;librarySelectionStart = selectedIndex&#13;&#10;&#9;&#9;librarySelectionEnd = selectedIndex&#13;&#10;&#9;end&#13;&#10;&#9;libraryCursorPosition = selectedIndex&#13;&#10;&#9;updateLibraryEditorSelection()&#13;&#10;end"
                 luaMethodLinkedProperty="uiListBoxItemClicked" luaMethodSource="0"
                 uuid="3df36a93652c44edbc8eb015ac059db7" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorKeyPressed" luaMethodCode="--&#10;-- Called when the a key is pressed and the component has focus&#10;--&#10;&#10;libraryEditorKeyPressed = function(--[[ CtrlrComponent --]] comp, --[[KeyPress --]] keyEvent, --[[ Component --]] originatingComponent)&#13;&#10;&#9;local doSelectionChange = false&#10;&#9;if keyEvent:getKeyCode() == KeyPress.upKey then&#13;&#10;&#9;&#9;if keyEvent:getModifiers():isShiftDown() then&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = libraryCursorPosition - 1&#13;&#10;&#9;&#9;&#9;if libraryCursorPosition &lt; librarySelectionStart then&#13;&#10;&#9;&#9;&#9;&#9;librarySelectionStart = libraryCursorPosition&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;librarySelectionEnd = libraryCursorPosition&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;librarySelectionStart = libraryCursorPosition - 1&#13;&#10;&#9;&#9;&#9;librarySelectionEnd = librarySelectionStart&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = librarySelectionStart&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;doSelectionChange = true&#13;&#10;&#9;elseif keyEvent:getKeyCode() == KeyPress.downKey then&#13;&#10;&#9;&#9;if keyEvent:getModifiers():isShiftDown() then&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = libraryCursorPosition + 1&#13;&#10;&#9;&#9;&#9;if libraryCursorPosition &gt; librarySelectionEnd then&#13;&#10;&#9;&#9;&#9;&#9;librarySelectionEnd = libraryCursorPosition&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;librarySelectionStart = libraryCursorPosition&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;librarySelectionStart = libraryCursorPosition + 1&#13;&#10;&#9;&#9;&#9;librarySelectionEnd = librarySelectionStart&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = librarySelectionStart&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;doSelectionChange = true&#13;&#10;&#9;elseif keyEvent:getKeyCode() == KeyPress.leftKey then&#13;&#10;&#9;&#9;if keyEvent:getModifiers():isShiftDown() then&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = libraryCursorPosition - 32&#13;&#10;&#9;&#9;&#9;if libraryCursorPosition &lt; librarySelectionStart then&#13;&#10;&#9;&#9;&#9;&#9;librarySelectionStart = libraryCursorPosition&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;librarySelectionEnd = libraryCursorPosition&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;librarySelectionStart = libraryCursorPosition - 32&#13;&#10;&#9;&#9;&#9;librarySelectionEnd = librarySelectionStart&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = librarySelectionStart&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;doSelectionChange = true&#13;&#10;&#9;elseif keyEvent:getKeyCode() == KeyPress.rightKey then&#13;&#10;&#9;&#9;if keyEvent:getModifiers():isShiftDown() then&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = libraryCursorPosition + 32&#13;&#10;&#9;&#9;&#9;if libraryCursorPosition &gt; librarySelectionEnd then&#13;&#10;&#9;&#9;&#9;&#9;librarySelectionEnd = libraryCursorPosition&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;librarySelectionStart = libraryCursorPosition&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;librarySelectionStart = libraryCursorPosition + 32&#13;&#10;&#9;&#9;&#9;librarySelectionEnd = librarySelectionStart&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = librarySelectionStart&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;doSelectionChange = true&#13;&#10;&#9;elseif keyEvent:getKeyCode() == 67 and (keyEvent:getModifiers():isCtrlDown() or keyEvent:getModifiers():isCommandDown() or keyEvent:getModifiers():isShiftDown()) then&#13;&#10;&#9;&#9;doLibraryEditorCopy()&#13;&#10;&#9;elseif keyEvent:getKeyCode() == 86 and (keyEvent:getModifiers():isCtrlDown() or keyEvent:getModifiers():isCommandDown() or keyEvent:getModifiers():isShiftDown()) then&#13;&#10;&#9;&#9;doLibraryEditorPaste()&#13;&#10;&#9;elseif keyEvent:getKeyCode() == 90 and (keyEvent:getModifiers():isCtrlDown() or keyEvent:getModifiers():isCommandDown() or keyEvent:getModifiers():isShiftDown()) then&#13;&#10;&#9;&#9;doLibraryEditorUndo()&#13;&#10;&#9;end&#13;&#10;&#9;--console(&quot;Key presed, key code &quot;..keyEvent:getKeyCode()..&quot; modifiers &quot;..keyEvent:getModifiers():getRawFlags())&#13;&#10;&#9;if doSelectionChange then&#13;&#10;&#9;&#9;if librarySelectionStart &lt; 1 then&#13;&#10;&#9;&#9;&#9;librarySelectionStart = 1&#13;&#10;&#9;&#9;elseif librarySelectionStart &gt; 128 then&#13;&#10;&#9;&#9;&#9;librarySelectionStart = 128&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if librarySelectionEnd &lt; 1 then&#13;&#10;&#9;&#9;&#9;librarySelectionEnd = 1&#13;&#10;&#9;&#9;elseif librarySelectionEnd &gt; 128 then&#13;&#10;&#9;&#9;&#9;librarySelectionEnd = 128&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if libraryCursorPosition &lt; 1 then&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = 1&#13;&#10;&#9;&#9;elseif libraryCursorPosition &gt; 128 then&#13;&#10;&#9;&#9;&#9;libraryCursorPosition = 128&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;--console(&quot;Selection &quot;..librarySelectionStart..&quot; &quot;..librarySelectionEnd)&#13;&#10;&#9;&#9;updateLibraryEditorSelection()&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="uiCustomKeyDownCallback" luaMethodSource="0"
                 uuid="18562ca86b8d468e8e5179317cabcd98" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorItemDoubleClicked" luaMethodCode="--&#10;-- Called when an item is double clicked&#10;--&#10;-- @modulator the modulator the event occured on&#10;-- @value      an integer that represents the double clicked item&#10;--&#10;&#10;libraryEditorItemDoubleClicked = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local bankNumber = modulator:getPropertyInt(&quot;modulatorCustomIndex&quot;)&#13;&#10;&#9;local selectedIndex = (4 * (bankNumber-1)) + value + 1&#13;&#10;&#9;librarySelectionStart = selectedIndex&#13;&#10;&#9;librarySelectionEnd = selectedIndex&#13;&#10;&#9;libraryCursorPosition = selectedIndex&#13;&#10;&#9;updateLibraryEditorSelection()&#13;&#10;&#13;&#10;&#9;local name = libraryEditorPresets[selectedIndex][&quot;name&quot;]&#13;&#10;&#9;local modalWindow = AlertWindow(&quot;Preset #&quot;..selectedIndex..&quot; name&quot;, &quot;Change preset name&quot;, AlertWindow.QuestionIcon)&#13;&#10;&#9;modalWindow:addButton(&quot;OK&quot;, 1, KeyPress(KeyPress.returnKey), KeyPress())&#13;&#10;&#9;modalWindow:addButton(&quot;Cancel&quot;, 0, KeyPress(KeyPress.escapeKey), KeyPress())&#13;&#10;&#9;modalWindow:addTextEditor (&quot;presetNameTextEditor&quot;, name, &quot;Preset #&quot;..selectedIndex..&quot;:&quot;, false)&#13;&#10;&#9;modalWindow:setModalHandler(libraryEditorPresetNameCallback)&#13;&#10;&#13;&#10;&#9;--  Never let Lua delete this window (3rd parameter), enter modal state&#13;&#10;&#9;modalWindow:runModalLoop()&#13;end&#13;&#10;&#13;&#10;function libraryEditorPresetNameCallback(result, window)&#13;&#10;&#9;window:setVisible (false)&#13;&#10;&#9;if result == 1 then&#13;&#10;&#9;&#9;textEditor = window:getTextEditor(&quot;presetNameTextEditor&quot;)&#13;&#10;&#9;&#9;if textEditor ~= nil then&#9;&#13;&#10;&#9;&#9;&#9;local newName = textEditor:getText()&#13;&#10;&#9;&#9;&#9;libraryEditorPresets[libraryCursorPosition][&quot;name&quot;]=newName&#13;&#10;&#9;&#9;&#9;libraryChanged = true&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#10;&#9;initLibraryEditor()&#13;&#10;end"
                 luaMethodLinkedProperty="uiListBoxItemDoubleClicked" luaMethodSource="0"
                 uuid="6b89831ab661447f8be49a34c8d61272" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorMoveSelection" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryEditorMoveSelection = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local increment = modulator:getPropertyInt(&quot;modulatorCustomIndex&quot;)&#13;&#10;&#9;local selection = storeSelection()&#13;&#10;&#9;if increment &gt; 0 then&#13;&#10;&#9;&#9;if (librarySelectionEnd + increment) &gt; 128 then&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Move displaced elements&#13;&#10;&#9;&#9;for i=1,increment do&#13;&#10;&#9;&#9;&#9;moveAndFixPresetNumber(librarySelectionStart+i-1,libraryEditorPresets[librarySelectionEnd+i])&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;if (librarySelectionStart + increment) &lt;= 0 then&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Move displaced elements&#13;&#10;&#9;&#9;for i=1,(increment*-1) do&#13;&#10;&#9;&#9;&#9;moveAndFixPresetNumber(librarySelectionEnd-i+1,libraryEditorPresets[librarySelectionStart-i])&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;librarySelectionStart=librarySelectionStart+increment&#13;&#10;&#9;librarySelectionEnd=librarySelectionEnd+increment&#13;&#10;&#9;libraryCursorPosition=libraryCursorPosition+increment&#13;&#10;&#9;-- Place selection&#13;&#10;&#9;local currentPosition = librarySelectionStart&#13;&#10;&#9;for k,v in ipairs(selection) do&#13;&#10;&#9;&#9;moveAndFixPresetNumber(currentPosition,v)&#13;&#10;&#9;&#9;currentPosition = currentPosition+1&#13;&#10;&#9;end&#13;&#10;&#9;libraryChanged = true&#13;&#10;&#9;initLibraryEditor()&#13;&#10;end&#13;&#10;&#13;&#10;function storeSelection()&#13;&#10;&#9;local selection = {}&#13;&#10;&#9;local selectionIndex = 1&#13;&#10;&#9;for i=librarySelectionStart,librarySelectionEnd do&#13;&#10;&#9;&#9;selection[selectionIndex] = libraryEditorPresets[i]&#13;&#10;&#9;&#9;selectionIndex = selectionIndex + 1&#13;&#10;&#9;end&#13;&#10;&#9;return selection&#13;&#10;end&#13;&#10;&#13;&#10;function moveAndFixPresetNumber(index,presetToMove)&#13;&#10;&#9;presetToMove[&quot;number&quot;]=index&#13;&#10;&#9;libraryEditorPresets[index]=presetToMove&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="c32d464f53924ba299fb79c6e7fb1d8f" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryPresetNameChanged" luaMethodCode="--&#10;-- Called when the contents of a Label are changed&#10;-- @label&#10;-- @newContent    a string that the label now contains&#10;--&#10;&#10;libraryPresetNameChanged = function(--[[ CtrlrLabel --]] label, --[[ String --]] newContent)&#13;&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Disabled in bulk edit mode&#13;&#10;&#9;if librarySelectionStart == librarySelectionEnd then&#13;&#10;&#9;&#9;if libraryEditorPresets[libraryCursorPosition] ~= nil and libraryEditorPresets[libraryCursorPosition][&quot;name&quot;] ~= newContent then&#13;&#10;&#9;&#9;&#9;--console(&quot;New name for preset &quot;..libraryCursorPosition..&quot; = &quot;..newContent)&#13;&#10;&#9;&#9;&#9;libraryEditorPresets[libraryCursorPosition][&quot;name&quot;]=newContent&#13;&#10;&#9;&#9;&#9;libraryChanged = true&#13;&#10;&#9;&#9;&#9;initLibraryEditor()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#10;end"
                 luaMethodLinkedProperty="uiLabelChangedCbk" luaMethodSource="0"
                 uuid="9278f5a950fc4836bc6168d7c6b46f72" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryModulatorValueChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryModulatorValueChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or panel:getRestoreState() or notActive(mod) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local paramName = mod:getName():replace(&quot;library-&quot;,&quot;&quot;,false)&#13;&#10;&#9;--console(&quot;New value for param &quot;..paramName..&quot; = &quot;..value)&#13;&#10;&#9;for i=librarySelectionStart,librarySelectionEnd do&#13;&#10;&#9;&#9;--console(&quot;Changing value for preset &quot;..i)&#13;&#10;&#9;&#9;libraryEditorPresets[i][paramName]=value&#13;&#10;&#9;end&#13;&#10;&#9;libraryChanged = true&#13;&#10;end&#13;&#10;&#13;&#10;function notActive(mod)&#13;&#10;&#9;local comp = mod:getComponent()&#13;&#10;&#9;--local childComp = comp:getChildComponent(0)&#13;&#10;&#9;--what(comp)&#13;&#10;&#9;--what(childComp)&#13;&#10;&#9;--if (mod == nil or comp == nil or childComp == nil or (not childComp:isMouseOver(true) and not comp:isMouseOver(true))) then&#13;&#10;&#9;--&#9;console(&quot;Is mouse over false&quot;)&#13;&#10;&#9;--else&#13;&#10;&#9;--&#9;console(&quot;Is mouse over true&quot;)&#13;&#10;&#9;--end&#13;&#10;&#9;return (mod == nil or comp == nil or ((not comp:isMouseOver(true)) and (not comp:hasKeyboardFocus(true))))&#13;&#10;end&#13;&#10;&#13;&#10;"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="518cf1d6dd2b4e1c92209790ea63d959" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorPaste" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryEditorPaste = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;doLibraryEditorPaste()&#13;&#10;end&#13;&#10;&#13;&#10;function doLibraryEditorPaste()&#13;&#10;&#9;if libraryCliboardEmpty or (librarySelectionStart ~= librarySelectionEnd) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Store current content for undo and paste new content&#13;&#10;&#9;local selectionIndex = librarySelectionStart&#13;&#10;&#9;for k,v in ipairs(libraryClipboard) do&#13;&#10;&#9;&#9;libraryUndoContent[k] = copyPreset(libraryEditorPresets[selectionIndex])&#13;&#10;&#9;&#9;libraryEditorPresets[selectionIndex] = copyPreset(v)&#13;&#10;&#9;&#9;-- Fix preset number&#13;&#10;&#9;&#9;libraryEditorPresets[selectionIndex][&quot;number&quot;]=selectionIndex&#13;&#10;&#9;&#9;selectionIndex = selectionIndex + 1&#13;&#10;&#9;&#9;if selectionIndex &gt; 128 then&#13;&#10;&#9;&#9;&#9;break&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;libraryUndoEmpty = false&#13;&#10;&#9;libraryUndoStart = librarySelectionStart&#13;&#10;&#9;libraryChanged = true&#13;&#10;&#9;initLibraryEditor()&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="f8c79de9afa44372b62f8d666c8fab2d" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorCopy" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryEditorCopy = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;doLibraryEditorCopy()&#13;&#10;end&#13;&#10;&#13;&#10;function doLibraryEditorCopy()&#13;&#10;&#9;-- copy content of selection into clipboard&#13;&#10;&#9;local selectionIndex = 1&#13;&#10;&#9;for i=librarySelectionStart,librarySelectionEnd do&#13;&#10;&#9;&#9;libraryClipboard[selectionIndex] = copyPreset(libraryEditorPresets[i])&#13;&#10;&#9;&#9;selectionIndex = selectionIndex + 1&#13;&#10;&#9;end&#13;&#10;&#9;-- set clipboard metadata&#13;&#10;&#9;libraryClipboardStart = librarySelectionStart&#13;&#10;&#9;libraryClipboardEnd = librarySelectionEnd&#13;&#10;&#9;libraryCliboardEmpty = false&#13;&#10;&#9;libraryClipboardSourceIsLib = not libraryEditorExternal&#13;&#10;&#9;initLibraryEditor()&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="6931d01003bc4405a00928fe6b99f67c" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorUndo" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryEditorUndo = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;doLibraryEditorUndo()&#13;&#10;end&#13;&#10;&#13;&#10;function doLibraryEditorUndo()&#13;&#10;&#9;if libraryUndoEmpty then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;-- Restore original content&#13;&#10;&#9;local selectionIndex = libraryUndoStart&#13;&#10;&#9;for k,v in ipairs(libraryUndoContent) do&#13;&#10;&#9;&#9;libraryEditorPresets[selectionIndex] = copyPreset(v)&#13;&#10;&#9;&#9;selectionIndex = selectionIndex + 1&#13;&#10;&#9;&#9;if selectionIndex &gt; 128 then&#13;&#10;&#9;&#9;&#9;break&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;-- Update undo status&#13;&#10;&#9;libraryUndoContent = {}&#13;&#10;&#9;libraryUndoEmpty = true&#13;&#10;&#9;libraryUndoStart = 0&#13;&#10;&#9;initLibraryEditor()&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="6e9ec65778554a76b55dcf7e202c3f43" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryEditorListen" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryEditorListen = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if connected then&#13;&#10;&#9;&#9;editBuffer = copyPreset(libraryEditorPresets[librarySelectionStart])&#13;&#10;&#9;&#9;-- Send preset to amp&#13;&#10;&#9;&#9;sendEditBufferDump()&#13;&#10;&#9;&#9;libraryListenPressed = true&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="8f151ba442ce4535b690347d44021970" luaMethodValid="1"/>
      <luaMethod luaMethodName="loadExternalFile" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;loadExternalFile = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local fileToRead = utils.openFileWindow(&quot;Load external file from disk&quot;, File(&quot;&quot;), &quot;*.gm36;*.gm36memory;*.gm40;*.gm40memory&quot;, true)&#13;&#10;&#13;&#10;&#9;-- Check if the file exists&#13;&#10;&#9;if fileToRead:existsAsFile() then&#13;&#10;&#9;&#9;currentExternalFile = fileToRead:getFullPathName()&#13;&#10;&#9;&#9;local oldExternalPresets = externalPresets&#13;&#10;&#9;&#9;externalPresets = loadFromFile(currentExternalFile,false)&#13;&#10;&#9;&#9;if externalPresets == nil then&#13;&#10;&#9;&#9;&#9;-- TODO alert : could not read file&#13;&#10;&#9;&#9;&#9;externalPresets = oldexternalPresets&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;externalPresetsLoaded = true&#13;&#10;&#9;&#9;&#9;libraryEditorExternal = true&#13;&#10;&#9;&#9;&#9;libraryEditorPresets = externalPresets&#13;&#10;&#9;&#9;&#9;setLibraryExternalToggle(libraryEditorExternal)&#13;&#10;&#9;&#9;&#9;initLibraryEditor()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console(&quot;Could not open file &quot;..fileToRead:getFullPathName())&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="6fc0e26ffe2a4f0e9a3b373be212fd45" luaMethodValid="1"/>
      <luaMethod luaMethodName="libraryExternalToggleChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;libraryExternalToggleChanged = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value)&#10;&#9;if panel:getBootstrapState() or notMouseOver(modulator) then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if not externalPresetsLoaded then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;local newLibraryEditorExternal&#13;&#10;&#9;if value == 0 then&#13;&#10;&#9;&#9;newLibraryEditorExternal = false&#13;&#10;&#9;else&#13;&#10;&#9;&#9;newLibraryEditorExternal = true&#13;&#10;&#9;end&#13;&#10;&#9;if newLibraryEditorExternal ~= libraryEditorExternal then&#13;&#10;&#9;&#9;libraryEditorExternal = newLibraryEditorExternal&#13;&#10;&#9;&#9;setLibraryEditorPresets()&#13;&#10;&#9;&#9;initLibraryEditor()&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function setLibraryEditorPresets()&#13;&#10;&#9;if libraryEditorExternal then&#13;&#10;&#9;&#9;libraryEditorPresets = externalPresets&#13;&#10;&#9;else&#13;&#10;&#9;&#9;libraryEditorPresets = libraryPresets&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function setLibraryExternalToggle(boolValue)&#13;&#10;&#9;local modulator = panel:getModulator(&quot;libraryExternalToggle&quot;)&#9;&#13;&#10;&#9;if modulator ~= nil then&#13;&#10;&#9;&#9;if boolValue then&#13;&#10;&#9;&#9;&#9;modulator:setValue(1,true,true)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;modulator:setValue(0,true,true)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="a01aa0bebd9c4dcdaa8f6355a8ddc60e" luaMethodValid="1"/>
    </luaManagerMethods>
  </luaManager>
  <panelResources>
    <resource resourceHash="-119805985295704969" resourceLoadedTime="1539186256698"
              resourceSize="28501" resourceFile="blue-led.png" resourceSourceFile="blue-led.png"
              resourceName="blue-led" resourceType="Image"/>
    <resource resourceHash="5270837575833458173" resourceLoadedTime="1539186256702"
              resourceSize="35802" resourceFile="factory.gm36" resourceSourceFile="factory.gm36"
              resourceName="factory" resourceType="Data"/>
    <resource resourceHash="-4459332601201669072" resourceLoadedTime="1539186256707"
              resourceSize="35475" resourceFile="factory40.gm40" resourceSourceFile="factory40.gm40"
              resourceName="factory40" resourceType="Data"/>
    <resource resourceHash="7825937883353234962" resourceLoadedTime="1539186256713"
              resourceSize="762436" resourceFile="grandmeister.png" resourceSourceFile="grandmeister.png"
              resourceName="grandmeister" resourceType="Image"/>
    <resource resourceHash="-1149646585843999408" resourceLoadedTime="1539186256716"
              resourceSize="27978" resourceFile="green-led.png" resourceSourceFile="green-led.png"
              resourceName="green-led" resourceType="Image"/>
    <resource resourceHash="2910823912256833842" resourceLoadedTime="1539186256719"
              resourceSize="2189" resourceFile="help.png" resourceSourceFile="help.png"
              resourceName="help" resourceType="Image"/>
    <resource resourceHash="-7144534480765107108" resourceLoadedTime="1539186256755"
              resourceSize="5936493" resourceFile="knob-blue.png" resourceSourceFile="knob-blue.png"
              resourceName="knob-blue" resourceType="Image"/>
    <resource resourceHash="-2627694074823202541" resourceLoadedTime="1539186256792"
              resourceSize="5929476" resourceFile="knob-red.png" resourceSourceFile="knob-red.png"
              resourceName="knob-red" resourceType="Image"/>
    <resource resourceHash="5880954689559434580" resourceLoadedTime="1539186256795"
              resourceSize="25536" resourceFile="led-button-blue-red.png" resourceSourceFile="led-button-blue-red.png"
              resourceName="led-button-blue-red" resourceType="Image"/>
    <resource resourceHash="7978259517039391116" resourceLoadedTime="1539186256799"
              resourceSize="25156" resourceFile="led-button-blue.png" resourceSourceFile="led-button-blue.png"
              resourceName="led-button-blue" resourceType="Image"/>
    <resource resourceHash="-2330204642172071381" resourceLoadedTime="1539186256803"
              resourceSize="24767" resourceFile="led-button-red-red.png" resourceSourceFile="led-button-red-red.png"
              resourceName="led-button-red-red" resourceType="Image"/>
    <resource resourceHash="7202011171716016131" resourceLoadedTime="1539186256807"
              resourceSize="24339" resourceFile="led-button-red.png" resourceSourceFile="led-button-red.png"
              resourceName="led-button-red" resourceType="Image"/>
    <resource resourceHash="4733375761340207994" resourceLoadedTime="1539186256810"
              resourceSize="27431" resourceFile="red-led.png" resourceSourceFile="red-led.png"
              resourceName="red-led" resourceType="Image"/>
    <resource resourceHash="-7744490094007381166" resourceLoadedTime="1539186256815"
              resourceSize="198923" resourceFile="rotary-red.png" resourceSourceFile="rotary-red.png"
              resourceName="rotary-red" resourceType="Image"/>
    <resource resourceHash="5088230686955965530" resourceLoadedTime="1539186256819"
              resourceSize="215439" resourceFile="rotary.png" resourceSourceFile="rotary.png"
              resourceName="rotary" resourceType="Image"/>
    <resource resourceHash="-6040905373696519831" resourceLoadedTime="1539186256823"
              resourceSize="6276" resourceFile="switch-toggle-led-dis.png"
              resourceSourceFile="switch-toggle-led-dis.png" resourceName="switch-toggle-led-dis"
              resourceType="Image"/>
    <resource resourceHash="2932470883005626268" resourceLoadedTime="1539186256834"
              resourceSize="6522" resourceFile="switch-toggle-led.png" resourceSourceFile="switch-toggle-led.png"
              resourceName="switch-toggle-led" resourceType="Image"/>
  </panelResources>
  <uiPanelEditor uiPanelCanvasRectangle="0 0 836 592" uiPanelSnapSize="4" uiPanelBackgroundColour="ffd7d7d7"
                 uiPanelBackgroundColour1="ff000000" uiPanelBackgroundColour2="ff01041d"
                 uiPanelBackgroundGradientType="1" uiPanelImageResource="" uiPanelEditMode="1"
                 uiPanelViewPortSize="1223" uiPanelPropertiesSize="305" uiPanelLock="0"
                 uiPanelDisabledOnEdit="0" uiPanelMenuBarVisible="1" uiPanelMenuBarHideOnExport="0"
                 uiPanelWidth="400" uiPanelHeight="400" name="Hughes &amp; Kettner Remote - v1.0"
                 uiPanelImageAlpha="255" uiPanelImageLayout="64" uiPanelSnapActive="0"
                 uiPanelPropertiesOnRight="0" luaPanelPaintBackground="" luaPanelResized="-- None"
                 luaPanelFileDragDropHandler="-- None" luaPanelFileDragEnterHandler="-- None"
                 luaPanelFileDragExitHandler="-- None" uiPanelInvisibleComponentAlpha="0.5"
                 uiPanelTooltipBackgroundColour="0xffeeeebb" uiPanelTooltipOutlineColour="0xff000000"
                 uiPanelTooltipColour="0xff000000" uiPanelTooltipCornerRound="1"
                 uiPanelTooltipPlacement="2" uiPanelTooltipFont="&lt;Sans-Serif&gt;;15;1;0;0;0;0;3"
                 uiPanelZoom="1.3" uiPanelMidiToolbarVisible="0" uiPanelDisableCombosOnEdit="0"
                 uiPanelToolbarPosition="8 8 800 40" uiPanelRotation="0" uiPanelToolbarVisible="1"
                 lastBrowsedComponentDir="D:\Fichiers\Seven\Documents">
    <uiPanelCanvasLayer uiPanelCanvasLayerName="Components" uiPanelCanvasLayerUid="40828ca4020000001896d00656f25599"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="1"
                        uiPanelCanvasLayerIndex="1"/>
  </uiPanelEditor>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="19" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateStatusMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="54"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="reverbStatus"
             modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="54" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="right" componentLabelJustification="centred"
               componentLabelHeight="13" componentLabelWidth="50" componentLabelVisible="1"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentVisibleName="Reverb"
               componentMouseCursor="0" componentGroupName="modulator-2" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0.5" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="led-button-blue" componentRectangle="14 6 76 35"
               resourceImageWidth="120" resourceImageHeight="120" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;127" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiImageButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Reverb" uiGroupTextColour="ff409fcb"
               uiGroupOutlineColour1="ff409fcb" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="0xffffffff" uiGroupBackgroundGradientType="Vertical"
               uiGroupBackgroundImage="" componentRectangle="8 165 96 160" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentSnapSizeAllow="0" componentEffectAlpha="1" uiType="uiGroup"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-5" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="FX Loop"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="103 165 96 160" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0" uiType="uiGroup" componentEffectAlpha="1"
               componentSnapSizeAllow="0" uiSliderValueFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="20" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateStatusMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="55"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="fxLoopStatus"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="55" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="50" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="0" componentGroupName="modulator-5" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="led-button-blue" componentRectangle="32 60 35 35"
               resourceImageWidth="120" resourceImageHeight="120" resourceImagePaintMode="1"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-6" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Delay" uiGroupTextColour="ff409fcb"
               uiGroupOutlineColour1="ff409fcb" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="0xffffffff" uiGroupBackgroundGradientType="Vertical"
               uiGroupBackgroundImage="" componentRectangle="198 165 328 160"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="bottomRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0" uiType="uiGroup" componentEffectAlpha="1"
               componentSnapSizeAllow="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="13" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="28"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="delayLevel"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="28" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Level"
               componentMouseCursor="0" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="16 42 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="18" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateStatusMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="53"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="delayStatus"
             modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="53" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="right" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="50" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentVisibleName="Delay"
               componentMouseCursor="0" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="led-button-blue" componentRectangle="20 8 73 35"
               resourceImageWidth="120" resourceImageHeight="120" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;255" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="12" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="27"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="delayFeedback"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="27" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Feedback"
               componentMouseCursor="0" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="87 42 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="1" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="updateDelayTime" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="04"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="delayTime"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="4" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Time"
               componentMouseCursor="0" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="161 42 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="tapTempo" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="tapTempo" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Tap Tempo"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="248 67 56 54" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="delayBpm" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="1" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="9.4" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ff4b0000"
               uiLabelTextColour="ffd12000" uiLabelOutline="1" uiLabelOutlineColour="ff845505"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLCDLabelFont="5"
               uiLCDLabelFontHeight="30" uiLabelText="1176" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="ffd12000" uiLabelEditOnSingleClick="1"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="0123456789" uiLabelInputMaxLength="4"
               uiLabelChangedCbk="bpmValueChanged" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLCDLabel" componentRectangle="237 13 77 40" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-7" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="BPM"
               componentMouseCursor="2" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="174 25 88 24" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-8" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Modulation"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="525 165 304 160" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentSnapSizeAllow="0" componentEffectAlpha="1" uiType="uiGroup"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="50" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="1"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="modulationIntensity"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Intensity"
               componentMouseCursor="0" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="88 44 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="17" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateStatusMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="52"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="modulationStatus"
             modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="52" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="right" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="65" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentVisibleName="Modulation"
               componentMouseCursor="0" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="led-button-blue" componentRectangle="20 8 92 35"
               resourceImageWidth="120" resourceImageHeight="120" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="63" vstIndex="11" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="modulationRateChanged" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="12"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="modulationRate"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="26" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Rate"
               componentMouseCursor="0" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="63" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="16 44 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-13" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Preset" uiGroupTextColour="ff409fcb"
               uiGroupOutlineColour1="ff409fcb" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="0xffffffff" uiGroupBackgroundGradientType="Vertical"
               uiGroupBackgroundImage="" componentRectangle="525 6 304 160"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="bottomRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0" uiType="uiGroup" componentEffectAlpha="1"
               componentSnapSizeAllow="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="0"
             name="presetNumber" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="1" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ff4b0000"
               uiLabelTextColour="ffd12000" uiLabelOutline="1" uiLabelOutlineColour="ff845505"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLCDLabelFont="5"
               uiLCDLabelFontHeight="30" uiLabelText="1" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="ffd12000" uiLabelEditOnSingleClick="1"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="presetNumberChanged"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="202 65 80 35"
               uiType="uiLCDLabel" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" uiSliderValueFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"
               uiGroupTextColour="ff409fcb"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="128" vstIndex="23" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue-1"
             modulatorValueExpressionReverse="midiValue+1" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="presetStepChanged" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%d" luaModulatorValueChange="-- None"
             name="presetStep" modulatorMin="1" modulatorValue="1">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="26" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="0" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="1" uiSliderMax="128" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="1" uiSliderValuePosition="0" uiSliderValueHeight="16"
               uiSliderValueWidth="100" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="36" uiSliderThumbHeight="36" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff393939" uiSliderRotaryFillColour="ff000000"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff3b3b3b" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentRectangle="201 100 82 22" componentSnapSizeAllow="0"
               componentEffectAlpha="0" uiType="uiSlider" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" uiListBoxHighlightFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="14" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="29"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="reverbLevel"
             modulatorMin="0" modulatorValue="92">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="29" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Level"
               componentMouseCursor="0" componentGroupName="modulator-2" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="16 42 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-16" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Power Amp Eq"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="8 324 191 144" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0" uiType="uiGroup" componentEffectAlpha="1"
               componentSnapSizeAllow="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="10" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="25"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="powerPresence"
             modulatorMin="0" modulatorValue="148">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="25" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Presence"
               componentMouseCursor="0" componentGroupName="modulator-16" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="16 20 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="9" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="24"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="powerResonance"
             modulatorMin="0" modulatorValue="58">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="24" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Resonance"
               componentMouseCursor="0" componentGroupName="modulator-16" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="102 20 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-17" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Noise Gate"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="198 324 96 144" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentSnapSizeAllow="0" componentEffectAlpha="1" uiType="uiGroup"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="21" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateStatusMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="63"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="noiseGateStatus"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="63" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="50" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="0" componentGroupName="modulator-17" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="led-button-blue" componentRectangle="32 48 35 35"
               resourceImageWidth="120" resourceImageHeight="120" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-18" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Preamp Eq"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="293 324 233 144" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentSnapSizeAllow="0" componentEffectAlpha="1" uiType="uiGroup"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="7" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="22"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="preampMid"
             modulatorMin="0" modulatorValue="241">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="22" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mid"
               componentMouseCursor="0" componentGroupName="modulator-18" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="84 20 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="8" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="23"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="preampTreble"
             modulatorMin="0" modulatorValue="50">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="23" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Treble"
               componentMouseCursor="0" componentGroupName="modulator-18" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="10 20 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="6" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="21"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="preampBass"
             modulatorMin="0" modulatorValue="98">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="21" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Bass"
               componentMouseCursor="0" componentGroupName="modulator-18" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="158 20 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-19" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Channel"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="525 324 304 144" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0" uiType="uiGroup" componentEffectAlpha="1"
               componentSnapSizeAllow="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="2" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="57"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="channelVolume"
             modulatorMin="0" modulatorValue="249">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="7" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Volume"
               componentMouseCursor="0" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="12 20 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="5" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="56"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="channelGain"
             modulatorMin="0" modulatorValue="81">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="20" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="15" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Gain"
               componentMouseCursor="0" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiImageSliderResource="knob-blue" resourceImageWidth="120" resourceImageHeight="120"
               resourceImagePaintMode="128" resourceImageOrientation="1" uiSliderMin="0"
               uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="14"
               uiSliderValueWidth="64" uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;13;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderValueHighlightColour="0xff0000ff" uiSliderValueOutlineColour="ffffff"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiImageSlider" componentRectangle="84 20 64 94"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="0" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateStatusMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="64"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="channelBoost"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="64" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="right" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="50" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="0" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="led-button-red" componentRectangle="152 88 35 35"
               resourceImageWidth="120" resourceImageHeight="120" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="16" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="0"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="31"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="channelType"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="31" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Type"
               componentMouseCursor="0" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearVertical"
               uiImageSliderResource="rotary" resourceImageWidth="255" resourceImageHeight="283"
               resourceImagePaintMode="128" resourceImageOrientation="0" uiSliderMin="0"
               uiSliderMax="127" uiSliderInterval="42" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="0" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="0xffffffff" uiSliderValueFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"
               uiSliderValueTextJustification="centred" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="0xffffffff" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="1" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="42" uiSliderPopupBubble="0" uiType="uiImageSlider"
               componentRectangle="184 28 96 104" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="store" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="copyPresetTo"
             name="presetCopy" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="864" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Copy" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="24 70 70 22"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-20" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Global Mute"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="198 467 96 80" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0" uiType="uiGroup" componentEffectAlpha="1"
               componentSnapSizeAllow="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="3" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateStatusMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="09"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="globalMute"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="9" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="70" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="0" componentGroupName="modulator-20" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="led-button-red" componentRectangle="32 20 35 35"
               resourceImageWidth="120" resourceImageHeight="120" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-21" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Power Soak"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="293 467 233 80" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentSnapSizeAllow="0" componentEffectAlpha="1" uiType="uiGroup"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="15" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="generateMidi" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="30"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="powerSoak"
             modulatorMin="0" modulatorValue="124">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="30" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="0" componentGroupName="modulator-21" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearHorizontal"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="32" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="16"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="1" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff393939" uiSliderRotaryFillColour="ff000000"
               uiSliderThumbColour="ff3b3b3b" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="FF409FCB"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="31"
               uiSliderPopupBubble="0" uiImageButtonResource="led-button-blue-red"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiSlider"
               componentEffectAlpha="0" componentSnapSizeAllow="0" componentRectangle="28 32 184 40"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-3" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-21" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="No Sp." uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="5 8 61 24" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-23" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-21" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="5W" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="100 8 38 24"
               uiType="uiLabel" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="powerSoakHalf" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-21" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="18W" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="143 8 37 24" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="powerSoakFull" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-21" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="36W" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="180 8 42 24" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-24" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-21" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="1W" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="59 8 36 24" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-4" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Boost" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="148 69 45 24"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-29" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Chorus" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="174 25 41 21"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="3" vstIndex="4" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="modulationTypeChanged" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="0"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="12"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="modulationType"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="12" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Type"
               componentMouseCursor="0" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearVertical"
               uiImageSliderResource="rotary" resourceImageWidth="255" resourceImageHeight="283"
               resourceImagePaintMode="128" resourceImageOrientation="0" uiSliderMin="0"
               uiSliderMax="3" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="0" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderValueTextColour="0xff000000"
               uiSliderValueBgColour="0xffffffff" uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiSliderValueTextJustification="centred" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="0xffffffff" uiSliderVelocitySensitivity="1"
               uiSliderVelocityThreshold="1" uiSliderVelocityOffset="0" uiSliderVelocityMode="0"
               uiSliderVelocityModeKeyTrigger="1" uiSliderSpringMode="0" uiSliderSpringValue="0"
               uiSliderMouseWheelInterval="1" uiSliderPopupBubble="0" uiType="uiImageSlider"
               componentRectangle="184 28 96 104" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="presetName" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="1" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ff4b0000"
               uiLabelTextColour="ffd12000" uiLabelOutline="1" uiLabelOutlineColour="ff845505"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLCDLabelFont="5"
               uiLCDLabelFontHeight="30" uiLabelText="Super Clean" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="ffd12000" uiLabelEditOnSingleClick="1"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="0"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="presetNameChanged"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLCDLabel" componentRectangle="24 16 258 43" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="-1" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="setPresetCombo"
             name="presetCombo" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="ffffffff"
               uiComboOutlineColour="ff3b3b3b" uiComboTextColour="0xff000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="ff000000"
               uiComboBgColour="ff000000" uiComboMenuBackgroundColour="0xfff0f0f0"
               uiComboMenuFontColour="0xff000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent=""
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="1" uiComboButtonGradientColour1="ff9f9f9f"
               uiComboButtonGradientColour2="ff3b3b3b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="5" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="207 28 86 16"
               uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="delayTimeMsLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="modulator-6" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="51 ms" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="153 130 80 24" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="store" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="movePreset"
             name="presetMove" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Move" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="24 100 70 22"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-9" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Library"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="525 467 304 80" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0" uiType="uiGroup" componentEffectAlpha="1"
               componentSnapSizeAllow="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="loadPresets"
             name="libraryLoad" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-9" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Load" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="36 29 70 21"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="savePresets"
             name="librarySave" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-9" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Save" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="120 29 70 21"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="sendPresetsToAmp"
             name="librarySendToAmp" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-9" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Send to Amp"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="208 28 80 21" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-10" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="0"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="File" uiGroupTextColour="0"
               uiGroupOutlineColour1="ff409fcb" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="0xffffffff" uiGroupBackgroundGradientType="Vertical"
               uiGroupBackgroundImage="" componentRectangle="8 546 518 40" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentSnapSizeAllow="0" componentEffectAlpha="1" uiType="uiGroup"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName=""
               componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="checkConnection"
             name="connectedLed" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Connected"
               componentMouseCursor="2" componentGroupName="modulator-10" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="blue-led" componentRectangle="8 4 65 29"
               resourceImageWidth="78" resourceImageHeight="82" resourceImagePaintMode="36"
               resourceImageOrientation="0" uiImageButtonTextColour="ff409fcb"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiImageButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="presetModeChanged"
             name="presetMode" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="30" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="0" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="132.4" componentEffectColour="55ffffff"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="switch-toggle-led-dis" componentRectangle="72 115 66 48"
               resourceImageWidth="80" resourceImageHeight="56" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="presetModeLibrary" modulatorVstExported="0" vstIndex=""
             modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Library" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="24 127 52 20"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="presetModeAmp" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Amp" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="136 127 43 20" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="midiInLed" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="MIDI In"
               componentMouseCursor="2" componentGroupName="modulator-10" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="1"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="red-led" componentRectangle="390 4 65 29"
               resourceImageWidth="78" resourceImageHeight="82" resourceImagePaintMode="36"
               resourceImageOrientation="0" uiImageButtonTextColour="ff409fcb"
               uiImageButtonContent="False&#10;True" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="midiOutLed" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="MIDI Out"
               componentMouseCursor="2" componentGroupName="modulator-10" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="1"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="green-led" componentRectangle="446 4 65 29"
               resourceImageWidth="78" resourceImageHeight="82" resourceImagePaintMode="36"
               resourceImageOrientation="0" uiImageButtonTextColour="ff409fcb"
               uiImageButtonContent="False&#10;True" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryFileName" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-9" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="C:/Users/fborry/gm36/factory.gm36" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="16 5 283 24" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-12" modulatorVstExported="0" vstIndex="" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="8" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Amp" uiGroupTextColour="ff409fcb"
               uiGroupOutlineColour1="ff409fcb" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="ffffff" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="0xffffffff" uiGroupBackgroundGradientType="Vertical"
               uiGroupBackgroundImage="" componentRectangle="525 546 304 40"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="bottomRight" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="1" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentSnapSizeAllow="0" componentEffectAlpha="1" uiType="uiGroup"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="0" uiButtonTextColourOff="ffffffff" uiButtonTextColourOn="ffffffff"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="backupPresets"
             name="ampBackup" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-12" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Backup" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="36 10 70 21"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="restorePresets"
             name="ampRestore" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-12" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Restore" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="120 10 70 21"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="savePresetsAs"
             name="librarySaveAs" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="13824" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-9" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Save As" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="120 54 70 21"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="store" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="storePreset"
             name="presetStore" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Store" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="115 70 70 22"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="store" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="storePresetAs"
             name="presetStoreAs" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;1;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Store as" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="115 100 70 22"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="checkSynced"
             name="syncedLed" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Synced"
               componentMouseCursor="2" componentGroupName="modulator-10" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="blue-led" componentRectangle="72 4 65 29"
               resourceImageWidth="78" resourceImageHeight="82" resourceImagePaintMode="36"
               resourceImageOrientation="0" uiImageButtonTextColour="ff409fcb"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;0;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageResource="grandmeister"
               uiType="uiImage" componentRectangle="43 22 441 125" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-30" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Flanger" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="194 11 41 21" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-31" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Phaser" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="235 11 41 21" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-32" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-8" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Tremolo" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="255 25 41 21" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-37" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Clean" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="183 25 41 21" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-33" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Crunch" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="200 11 41 21"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-38" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Ultra" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="255 25 41 21"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-40" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-19" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Lead" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="238 11 41 21"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="tabs" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="ffffffff"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="ffffffff"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiTabsCurrentTabChanged=""
               uiTabsDepth="0" uiTabsOutlineThickness="0" uiTabsFrontTabOutline="0"
               uiTabsTabOutline="0" uiTabsIndentThickness="0" uiTabsOrientation="0"
               uiTabsFrontTabFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiTabsTabFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3"
               uiTabsOutlineGlobalColour="0x00000000" uiTabsOutlineGlobalBackgroundColour="0x67000000"
               uiTabsOutlineTabColour="0xff303030" uiTabsTextTabColour="0xff909090"
               uiTabsFrontTabOutlineColour="ffffffff" uiTabsFrontTabTextColour="ffffffff"
               uiTabsAddTab="0" uiTabsRemoveTab="0" componentRectangle="0 0 840 592"
               uiType="uiTabs" componentLayerUid="40828ca4020000001896d00656f25599"
               uiTabsCurrentTab="0">
      <uiTabsTab uiTabsTabIndex="0" uiTabsTabName="Tab 0" uiTabsTabContentBackgroundColour="0"
                 uiTabsTabBackgroundColour="0" uiTabsTabBackgroundImage="-- None"
                 uiTabsTabBackgroundImageLayout="36" uiTabsTabBackgroundImageAlpha="255"/>
      <uiTabsTab uiTabsTabIndex="1" uiTabsTabName="Tab 1" uiTabsTabContentBackgroundColour="0"
                 uiTabsTabBackgroundColour="0" uiTabsTabBackgroundImage="-- None"
                 uiTabsTabBackgroundImageLayout="36" uiTabsTabBackgroundImageAlpha="255"/>
      <uiTabsTab uiTabsTabIndex="2" uiTabsTabName="Tab 2" uiTabsTabContentBackgroundColour="0"
                 uiTabsTabBackgroundColour="0" uiTabsTabBackgroundImage="-- None"
                 uiTabsTabBackgroundImageLayout="36" uiTabsTabBackgroundImageAlpha="255"/>
      <uiTabsTab uiTabsTabIndex="3" uiTabsTabName="Tab 3" uiTabsTabContentBackgroundColour="0"
                 uiTabsTabBackgroundColour="0" uiTabsTabBackgroundImage="-- None"
                 uiTabsTabBackgroundImageLayout="36" uiTabsTabBackgroundImageAlpha="255"/>
      <uiTabsTab uiTabsTabIndex="4" uiTabsTabName="Tab 4" uiTabsTabContentBackgroundColour="0"
                 uiTabsTabBackgroundColour="0" uiTabsTabBackgroundImage="-- None"
                 uiTabsTabBackgroundImageLayout="36" uiTabsTabBackgroundImageAlpha="255"/>
    </component>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="progressBar" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiProgressBarBackgroundColour="ff101010"
               uiProgressBarForegroundColour="ff409fcb" uiProgressBarDisplayPercent="1"
               componentRectangle="88 108 364 20" componentTabId="2" componentTabName="tabs"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiProgressBar"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="cancel"
             name="progressCancel" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Abort" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="232 164 70 21"
               componentTabId="2" componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiButton" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="progressLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiLabelText="Sending presets..." uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="2" componentTabName="tabs" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="6 12 524 43"
               uiType="uiLabel" componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="progressStatus" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centredLeft" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Preset 128: Empty preset" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="88 76 323 32" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabName="tabs"
               componentTabId="2"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-1" modulatorVstExported="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Group Text"
               uiGroupTextColour="0xff000000" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="ff409fcb" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="1" uiGroupBackgroundImage="" componentRectangle="150 220 535 225"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="2" componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-22" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Compare"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="8 467 191 80" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentSnapSizeAllow="0"
               componentEffectAlpha="1" uiType="uiGroup" componentTabId="0"
               componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="settings"
             name="settings" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-10" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Settings" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="204 10 70 21"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="settingsOk"
             name="settingsOk" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="OK" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="148 237 70 21"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="settingsCancel"
             name="settingsCancel" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Cancel" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="280 237 70 21"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-11" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="288" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="2" componentEffectRadius="1"
               componentEffectColour="ff000000" componentEffectOffsetX="1" componentEffectOffsetY="1"
               componentExcludedFromLabelDisplay="0" componentValueDecimalPlaces="0"
               componentLuaMouseMoved="-- None" componentLuaMouseDown="-- None"
               componentLuaMouseDrag="-- None" componentLuaMouseDoubleClick="-- None"
               uiGroupText="Settings" uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="8 188 520 296" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentTabId="3"
               componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiGroup" componentEffectAlpha="1" componentSnapSizeAllow="0"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="54"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="" name="omniMode"
             modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="54" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="13" componentLabelWidth="80" componentLabelVisible="1"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="0" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0.5" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="led-button-blue" componentRectangle="280 21 35 35"
               resourceImageWidth="120" resourceImageHeight="120" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="powerEqPreset" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Preset" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="244 131 52 20"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="powerEqMode" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="30" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="0" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="132.4" componentEffectColour="55ffffff"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="switch-toggle-led" componentRectangle="264 99 66 48"
               resourceImageWidth="80" resourceImageHeight="56" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentTabId="3" componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiImageButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="powerEqGlobal" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Global" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="305 131 43 20" uiType="uiLabel" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="16" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue-1"
             modulatorValueExpressionReverse="midiValue+1" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%d" luaModulatorValueChange="-- None"
             name="midiChannel" modulatorMin="1" modulatorValue="1">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="26" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="0" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="1" uiSliderMax="16" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="1" uiSliderValuePosition="2" uiSliderValueHeight="16"
               uiSliderValueWidth="100" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="36" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ff409fcb" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="ff393939" uiSliderRotaryFillColour="ff000000"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff3b3b3b" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentRectangle="283 64 65 33" componentSnapSizeAllow="0"
               componentEffectAlpha="0" uiType="uiSlider" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" uiListBoxHighlightFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"
               componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="settingsLabels" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Omni Mode&#10;&#10;&#10;Midi Channel&#10;&#10;&#10;Power EQ mode&#10;&#10;&#10;Power Soak mode&#10;&#10;&#10;Amp type&#10;&#10;Firmware Version"
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="123 30 117 196"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="settingsDefault"
             name="settingsDefault" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="0"
               uiButtonColourOff="0" uiButtonTextColourOn="ff409fcb" uiButtonTextColourOff="ff409fcb"
               uiButtonContent="Default Values" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="415 2 107 19" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="compareModeChanged"
             name="compareSwitch" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="30" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="0" componentGroupName="modulator-22" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="132.4" componentEffectColour="55ffffff"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="switch-toggle-led" componentRectangle="61 11 66 48"
               resourceImageWidth="80" resourceImageHeight="56" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentTabId="0" componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiImageButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="compareModified" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-22" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Modified" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="0" componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="128 24 54 20" uiType="uiLabel" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="compareOriginal" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-22" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Original" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="9 23 52 20" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="restoreOriginal"
             name="restoreOriginal" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-22" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Restore Orig."
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="6 54 70 21" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiButton" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="0" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="help" name="helpButton"
             modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="help"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="help" componentRectangle="502 9 16 16"
               resourceImageWidth="50" resourceImageHeight="50" resourceImagePaintMode="36"
               resourceImageOrientation="1" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0" uiImageButtonTextPosition="none" uiImageButtonTextWidth="0"
               uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="tabs" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-15" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="1" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText=" " uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="ff409fcb" uiGroupOutlineColour2="ff409fcb"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="1" uiGroupBackgroundImage="" componentRectangle="150 220 535 225"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="tabs" componentTabId="4"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="helpOk"
             name="helpOk" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-15" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="OK" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="232 176 70 21"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="tabs" componentTabId="2"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="helpTitle" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-15" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiLabelText="GrandMeister Desktop Remote" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="106 12 324 43" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" componentTabName="tabs"
               componentTabId="2"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="helpText1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-15" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Donate :&#10;&#10;Send feedback :&#10;&#10;Homepage :&#10;"
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="2" componentTabName="tabs" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="120 60 147 75"
               uiType="uiLabel" componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="firmwareVersion" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="?" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="270 230 52 20"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="versionLabel" modulatorVstExported="0" vstIndex="" modulatorGlobalVariable="-1"
             modulatorMuteOnStart="0" modulatorMute="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             modulatorControllerExpression="value" luaModulatorGetValueForMIDI="-- None"
             luaModulatorGetValueFromMIDI="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomName=""
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="settingsDefault"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorValue="0">
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="modulator-15" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Version 1.0" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="417 7 107 19" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="tabs" componentTabId="4"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="settingsDefault"
             name="settingsDefault-2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="modulator-15" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonContent="False&#10;True"
               uiHyperlinkColour="ff409fcb" uiHyperlinkFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiHyperlinkFitTextToSize="1" uiHyperlinkTextJustification="left"
               uiHyperlinkOpensUrl="1" componentRectangle="272 85 187 19" uiHyperlinkText="frederic.borry@gmail.com"
               uiHyperlinkUrl="mailto:frederic.borry@gmail.com" uiType="uiHyperlink"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="4"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="helpText1-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-15" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Many thanks to the Hughes &amp; Kettner team for supporting this project."
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="61 139 424 23" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabName="tabs"
               componentTabId="4"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="settingsDefault"
             name="settingsDefault-3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="modulator-15" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonContent="False&#10;True"
               uiHyperlinkColour="ff409fcb" uiHyperlinkFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiHyperlinkFitTextToSize="1" uiHyperlinkTextJustification="left"
               uiHyperlinkOpensUrl="1" componentRectangle="272 114 256 19" uiHyperlinkText="http://ctrlr.org/"
               uiHyperlinkUrl="http://ctrlr.org/hughes-kettner-grandmeister-36/"
               componentTabId="4" componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiHyperlink"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="77" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="savePresetsForIpad"
             name="librarySaveForIpad" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-9" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Save for iPad"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="36 54 70 21" uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="powerSoakMode" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="30" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="0" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="132.4" componentEffectColour="55ffffff"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiImageButtonMode="0"
               uiImageButtonResource="switch-toggle-led" componentRectangle="264 138 66 48"
               resourceImageWidth="80" resourceImageHeight="56" resourceImagePaintMode="128"
               resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiType="uiImageButton" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="powerEqGlobal-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Global" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiLabel" componentRectangle="305 170 43 20" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="powerEqPreset-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Preset" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="244 170 52 20"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="ampType" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="modulator-11" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="?" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="270 198 52 20"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditor"
             name="libraryEditor" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-10" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="Lib. editor"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="298 10 70 21" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryEditorGroup" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;0;3" componentVisibleName="modulator-2"
               componentMouseCursor="0" componentGroupName="" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="2" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="1" componentEffectOffsetY="1" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Library Editor"
               uiGroupTextColour="ff409fcb" uiGroupOutlineColour1="ff409fcb"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ffffff"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="0xffffffff"
               uiGroupBackgroundGradientType="Vertical" uiGroupBackgroundImage=""
               componentRectangle="8 142 821 405" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="bottomRight"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="1"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="5" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentSnapSizeAllow="0" componentEffectAlpha="1" uiType="uiGroup"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorOk"
             name="libraryEditorOk" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="OK" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="721 357 92 22"
               componentTabId="3" componentTabName="tabs" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="1"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank1ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Super Clean&#10;Fat Clean&#10;Bluesy Clean&#10;Crunchy Clean"
               componentRectangle="28 5 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank1Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="1&#10;2&#10;3&#10;4" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="3 13 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank2Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="5&#10;6&#10;7&#10;8" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="3 61 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="2"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank2ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 2"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Clean Brett&#10;Rhythn Crunch&#10;Fat Crunch&#10;Boosted Crunch"
               componentRectangle="28 53 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="3"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank3ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Low Gain Classic Lead&#10;Boosted Classic Lead&#10;Fat Classic Lead&#10;High Gain Classic Lead"
               componentRectangle="28 101 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank3Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="9&#10;10&#10;11&#10;12" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="3 109 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="4"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank4ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 4"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Classic Metal&#10;High Gain Metal&#10;Modern Metal&#10;Deep Metal"
               componentRectangle="28 149 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank4Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="13&#10;14&#10;15&#10;16" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="3 157 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank5Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="17&#10;18&#10;19&#10;20" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="3 205 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="5"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank5ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 5"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Chorus Clean&#10;Rotor Chorus Clean&#10;Clean Flanger&#10;Clean Phaser"
               componentRectangle="28 197 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentTabId="1" componentTabName="" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="6"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank6ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 6"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Space Crunch 1&#10;Space Crunch 2&#10;Flanged Lead&#10;World of Lead"
               componentRectangle="28 245 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank6Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="21&#10;22&#10;23&#10;24" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" componentTabId="3"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="3 253 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="7"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank7ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 7"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Sixties Tremolo Crunch&#10;British Tremolo Crunch&#10;Shine on Like Crazy&#10;Crunchy Flanger"
               componentRectangle="28 293 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank7Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="25&#10;26&#10;27&#10;28" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="3"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="3 301 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="8"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank8ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 8"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Ultra Power Chord&#10;Ultra Modulation&#10;Small Ultra Deep&#10;Ultra Deep Space"
               componentRectangle="28 341 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiListBox"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank8Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="29&#10;30&#10;31&#10;32" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="3"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="3 349 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="10"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank10ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 10"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Fat Clean Drive (Single Coil)&#10;Voxx Like  (Single Coil)&#10;Country Boy 1 (Single Coil)&#10;Country Boy 2 (Single Coil)"
               componentRectangle="176 53 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="9"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank9ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 9"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Dream Bell&#10;Warm Cave&#10;Funda Mental&#10;Spirit"
               componentRectangle="176 5 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="" componentTabId="1" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank9Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="33&#10;34&#10;35&#10;36" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="151 13 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank10Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="37&#10;38&#10;39&#10;40" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="151 61 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank11Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="41&#10;42&#10;43&#10;44" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="151 109 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank12Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="45&#10;46&#10;47&#10;48" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="151 157 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="12"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank12ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 12"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="My Tremolo&#10;My Chorus&#10;Funky phaser&#10;Clean Flanger"
               componentRectangle="176 149 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="11"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank11ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 11"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Running on the Moon (Single Coil)&#10;You Too (Single Coil)&#10;Volume Swell Pad (Single Coil)&#10;Arpeggio Rick Chords (Single Coil)"
               componentRectangle="176 101 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="13"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank13ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 13"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Crunch!&#10;Hot Crunch 1&#10;Hot Crunch 2&#10;Classic 2nd"
               componentRectangle="176 197 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentTabId="1" componentTabName="tabs" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank13Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="49&#10;50&#10;51&#10;52" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="151 205 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="14"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank14ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 14"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Classic Lead&#10;High Gain Solo 1&#10;High Gain Solo 2&#10;Ultra High Gain Solo"
               componentRectangle="176 245 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentTabId="1" componentTabName="tabs"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiType="uiListBox"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank14Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="53&#10;54&#10;55&#10;56" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="1"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="151 253 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="15"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank15ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 15"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Modern Metal Rhythm&#10;Modern Metal Lead&#10;Paradise Clean&#10;Paradise Rhythm"
               componentRectangle="176 293 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank15Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="57&#10;58&#10;59&#10;60" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="3"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="151 301 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="16"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank16ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 16"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Paradise Lead&#10;Black Hole Clean&#10;Black Hole Weird&#10;Bombtrack"
               componentRectangle="176 341 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiListBox"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank16Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="61&#10;62&#10;63&#10;64" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="3"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="151 349 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="45696" modulatorCustomIndex="17"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank17ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 17"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Good Love&#10;Love Solo&#10;Modern Rock Rhythm&#10;Modern Rock Lead"
               componentRectangle="326 5 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank17Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="65&#10;66&#10;67&#10;68" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="301 13 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank18Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="69&#10;70&#10;71&#10;72" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="301 61 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="18"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank18ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 18"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 69&#10;Preset 70&#10;Preset 71&#10;Preset 72"
               componentRectangle="326 53 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank19Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="73&#10;74&#10;75&#10;76" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="301 109 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="19"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank19ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 19"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 73&#10;Preset 74&#10;Preset 75&#10;Preset 76"
               componentRectangle="326 101 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank25Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="97&#10;98&#10;99&#10;100" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="451 13 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="25"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank25ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 25"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 97&#10;Preset 98&#10;Preset 99&#10;Preset 100"
               componentRectangle="476 5 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentTabId="1" componentTabName="" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank26Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="101&#10;102&#10;103&#10;104" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="3"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="451 61 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="26"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank26ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 26"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 101&#10;Preset 102&#10;Preset 103&#10;Preset 104"
               componentRectangle="476 53 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank27Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="105&#10;106&#10;107&#10;108" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="3"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="451 109 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="27"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank27ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 27"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 105&#10;Preset 106&#10;Preset 107&#10;Preset 108"
               componentRectangle="476 101 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank20Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="77&#10;78&#10;79&#10;80" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="301 157 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="20"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank20ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 20"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 77&#10;Preset 78&#10;Preset 79&#10;Preset 80"
               componentRectangle="326 149 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank28Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="109&#10;110&#10;111&#10;112" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="3"
               componentTabName="tabs" uiType="uiLabel" componentRectangle="451 157 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="28"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank28ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 28"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 109&#10;Preset 110&#10;Preset 111&#10;Preset 112"
               componentRectangle="476 149 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiListBox"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank21Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="81&#10;82&#10;83&#10;84" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="301 205 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="21"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank21ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 21"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 81&#10;Preset 82&#10;Preset 83&#10;Preset 84"
               componentRectangle="326 197 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="" componentTabId="1" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank29Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="113&#10;114&#10;115&#10;116" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="tabs" uiType="uiLabel" componentRectangle="451 205 20 40"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="29"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank29ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 29"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 113&#10;Preset 114&#10;Preset 115&#10;Preset 116"
               componentRectangle="476 197 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               componentTabName="tabs" componentTabId="1" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank22Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="85&#10;86&#10;87&#10;88" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="301 253 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="22"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank22ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 22"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 85&#10;Preset 86&#10;Preset 87&#10;Preset 88"
               componentRectangle="326 245 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank30Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="117&#10;118&#10;119&#10;120" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="451 253 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="30"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank30ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 30"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 117&#10;Preset 118&#10;Preset 119&#10;Preset 120"
               componentRectangle="476 245 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank23Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="89&#10;90&#10;91&#10;92" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="301 301 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="23"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank23ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 23"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 89&#10;Preset 90&#10;Preset 91&#10;Preset 92"
               componentRectangle="326 293 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank31Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="121&#10;122&#10;123&#10;124" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="451 301 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="31"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank31ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 31"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 121&#10;Preset 122&#10;Preset 123&#10;Preset 124"
               componentRectangle="476 293 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiListBox" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank24Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="93&#10;94&#10;95&#10;96" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="301 349 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="24"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank24ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 24"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 93&#10;Preset 94&#10;Preset 95&#10;Preset 96"
               componentRectangle="326 341 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="bank32Label" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="topRight" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="125&#10;126&#10;127&#10;128" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="451 349 20 40"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="32"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="bank32ListBox" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="8" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="Bank 32"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Preset 125&#10;Preset 126&#10;Preset 127&#10;Preset 128"
               componentRectangle="476 341 123 48" uiListBoxRowHeight="10" uiListBoxBackgroundColour="ff3b3b3b"
               uiListBoxHighlightBgColour="ff409fcb" uiListBoxHighlightFgColour="ffffffff"
               uiListBoxTextColour="bab9b9b9" uiListBoxFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiListBoxOutline="0"
               uiListBoxOutlineColour="0xff000000" uiListBoxVScrollBgColour="ff454545"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="ff454545" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="libraryEditorItemClicked"
               uiListBoxItemDoubleClicked="libraryEditorItemDoubleClicked" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" uiType="uiListBox" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="65536" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="keyLogger" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiCustomResizedCallback="-- None"
               uiCustomPaintCallback="-- None" uiCustomPaintOverChildrenCallback="-- None"
               componentRectangle="728 3 90 29" uiCustomMouseDownCallback="-- None"
               uiCustomMouseUpCallback="-- None" uiCustomMouseEnterCallback="-- None"
               uiCustomMouseExitCallback="-- None" uiCustomMouseMoveCallback="-- None"
               uiCustomMouseDragCallback="-- None" uiCustomKeyDownCallback="libraryEditorKeyPressed"
               uiCustomKeyStateChangedCallback="-- None" uiCustomMouseDoubleClickCallback="-- None"
               uiCustomMouseWheelMoveCallback="-- None" uiCustomStartDraggingCallback="-- None"
               uiCustomIsInterestedInDragSourceCallback="-- None" uiCustomItemDragEnterCallback="-- None"
               uiCustomItemDragMoveCallback="-- None" uiCustomItemDragExitCallback="-- None"
               uiCustomItemDroppedCallback="-- None" uiCustomDragAndDropTarget="0"
               uiCustomDragAndDropContainer="0" uiCustomDrawDragImageWhenOver="0"
               uiCustomAllowExternalDrags="0" uiCustomMouseDownGrabsFocus="1"
               uiCustomWantsKeyboardFocus="1" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiCustomComponent"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryEditorTip" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centredTop" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;1;0;0;1;3"
               uiLabelText="~ Use esc + mouse click or shift + arrow keys for multiple selection ~"
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="157 391 297 19"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="-1"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorMoveSelection"
             name="libraryEditorDec1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ff409fcb"
               uiButtonTextColourOff="ff409fcb" uiButtonContent="/\" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="616 120 23 26"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="1"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorMoveSelection"
             name="libraryEditorInc1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ff409fcb"
               uiButtonTextColourOff="ff409fcb" uiButtonContent="\/" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="616 153 23 26"
               componentTabId="3" componentTabName="tabs" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="-4"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorMoveSelection"
             name="libraryEditorDec4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ff409fcb"
               uiButtonTextColourOff="ff409fcb" uiButtonContent="/\ /\" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="616 74 23 40"
               componentTabId="3" componentTabName="tabs" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="4"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorMoveSelection"
             name="libraryEditorInc4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ff409fcb"
               uiButtonTextColourOff="ff409fcb" uiButtonContent="\/ \/" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="616 185 23 40"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiButton"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryPresetName" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="1" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="0.5"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ff454545"
               uiLabelTextColour="FF409FCB" uiLabelOutline="1" uiLabelOutlineColour="ff409fcb"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Super Clean" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="ff409fcb"
               uiLabelEditOnSingleClick="true" uiLabelEditOnDoubleClick="0"
               uiLabelEditFocusDiscardsChanges="0" uiLabelInputAllowedChars=""
               uiLabelInputMaxLength="1024" uiLabelChangedCbk="libraryPresetNameChanged"
               uiLabelTextColor="FFFF0000" uiType="uiLabel" componentRectangle="656 10 155 25"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="reverb" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-reverb" modulatorMin="0" modulatorValue="92">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Reverb: "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffcccccc" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ffffffff"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="ffababab"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="731 40 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="delayLevel" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-delayLevel" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Delay: "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="731 55 80 12"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="presence" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-presence" modulatorMin="0" modulatorValue="148">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Presence: "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ffffffff"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 70 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="resonance" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-resonance" modulatorMin="0" modulatorValue="58">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Resonance: "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 85 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="treble" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-treble" modulatorMin="0" modulatorValue="50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Treble: "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 100 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="mid" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-mid" modulatorMin="0" modulatorValue="241">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mid: "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 115 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="bass" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-bass" modulatorMin="0" modulatorValue="98">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="10"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 130 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="volume" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-volume" modulatorMin="0" modulatorValue="249">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="10"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 145 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="256" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="gain" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-gain" modulatorMin="0" modulatorValue="81">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="256" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="10"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 160 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="127" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="channelBoost" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-channelBoost" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="127" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="10"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="127"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 175 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="127" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="channelType" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-channelType" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="42" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="10"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="42"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 190 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="127" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="powerSoak" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-powerSoak" modulatorMin="0" modulatorValue="124">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="32" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="10"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="32"
               uiSliderPopupBubble="0" componentLayerUid="40828ca4020000001896d00656f25599"
               componentRectangle="730 205 80 12" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelReverb" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Reverb:&#10;Delay:&#10;Presence:&#10;Resonance:&#10;Treble:&#10;Mid:&#10;Bass:&#10;Volume:&#10;Gain:&#10;Boost:&#10;Channel:&#10;Power soak:"
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="tabs" uiType="uiLabel" componentRectangle="655 39 70 12"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelDelay" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Delay:&#10;" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="655 54 70 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelPresence" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Presence:&#10;" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="655 69 70 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelPresence-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Resonance:&#10;" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="tabs" uiType="uiLabel" componentRectangle="655 84 70 12"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelTreble" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Treble:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="655 99 70 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelMid" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Mid:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="tabs" uiType="uiLabel" componentRectangle="655 114 70 12"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelBass" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Bass:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="655 129 70 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelVolume" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Volume:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="tabs" uiType="uiLabel" componentRectangle="655 144 70 12"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelGain" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Gain:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="655 159 70 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelBoost" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Boost:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="tabs" uiType="uiLabel" componentRectangle="655 174 70 12"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelChannel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Channel:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="655 189 70 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelPowerSoak" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Power soak:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="tabs" uiType="uiLabel" componentRectangle="655 204 70 12"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelFxLoop" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Fx Loop:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="655 219 70 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libLabelNoiseGate" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="right" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Noise Gate:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="655 234 70 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="127" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="fxLoop" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-fxLoop" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="127" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="10"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="127"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="730 220 80 12"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="127" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="noiseGate" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="libraryModulatorValueChanged"
             name="library-noiseGate" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="left"
               componentLabelHeight="12" componentLabelWidth="80" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="ff409fcb"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="127" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="10"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffccccc0" uiSliderValueBgColour="ffababab"
               uiSliderRotaryOutlineColour="ff454545" uiSliderRotaryFillColour="ff454545"
               uiSliderThumbColour="ff409fcb" uiSliderValueHighlightColour="ff409fcb"
               uiSliderValueOutlineColour="ffababab" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff454545" uiSliderIncDecTextColour="ff409fcb"
               uiSliderValueFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="127"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="730 235 80 12"
               componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorCopy"
             name="libraryEditorCopy" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ff409fcb"
               uiButtonTextColourOff="ff409fcb" uiButtonContent="Copy" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="616 280 68 22"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiButton" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorPaste"
             name="libraryEditorPaste" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ff409fcb"
               uiButtonTextColourOff="ff409fcb" uiButtonContent="Paste" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="689 280 68 22"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentLayerUid="40828ca4020000001896d00656f25599"
               uiType="uiButton" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="84" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorUndo"
             name="libraryEditorUndo" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ff409fcb"
               uiButtonTextColourOff="ff409fcb" uiButtonContent="Undo" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="762 280 48 22"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentTabId="3"
               componentTabName="tabs" componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryClipboardLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Clipboard:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="1" componentTabName="tabs" uiType="uiLabel" componentRectangle="617 259 52 16"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryClipboardContent" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;0;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ff454545"
               uiLabelTextColour="ff409fcb" uiLabelOutline="1" uiLabelOutlineColour="ff409fcb"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Empty" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="670 259 139 16"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryEditorTip-1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centredTop" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;1;0;0;1;3"
               uiLabelText="shift + c" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="3" componentTabName="tabs" uiType="uiLabel" componentRectangle="616 300 66 12"
               componentLayerUid="40828ca4020000001896d00656f25599" componentBubbleNameJustification="centred"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameColour="0xff000000"
               componentBubbleValueJustification="centred" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryEditorTip-2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centredTop" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;1;0;0;1;3"
               uiLabelText="shift + v" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="689 300 68 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryEditorTip-3" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;8;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centredTop" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;1;0;0;1;3"
               uiLabelText="shift + z" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="762 300 48 12"
               uiType="uiLabel" componentTabName="tabs" componentTabId="3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryEditorListen"
             name="libraryEditorListen" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;0;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ff409fcb"
               uiButtonTextColourOff="ff409fcb" uiButtonContent="Listen" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="605 10 47 26"
               componentTabId="3" componentTabName="tabs" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="0"
             name="libraryExternalFile" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;10;0;0;0;0;1;3"
               uiLabelText="&lt;?&gt;" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="616 332 170 20"
               uiType="uiLabel" componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="loadExternalFile"
             name="libraryLoadExternalFile" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ff3b3b3b"
               uiButtonColourOff="ff454545" uiButtonTextColourOn="ffffffff"
               uiButtonTextColourOff="ffffffff" uiButtonContent="..." uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="786 329 21 18"
               uiType="uiButton" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryExternalFileLable" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="12" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="External file:" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="ff409fcb" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" componentBubbleRoundAngle="10"
               componentBubbleBackgroundColour1="0x9cffffff" componentBubbleBackgroundColour2="0xbab9b9b9"
               componentBubbleBackgroundGradientType="1" componentBubbleValueColour="0xff000000"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" componentBubbleNameJustification="centred"
               componentLayerUid="40828ca4020000001896d00656f25599" componentRectangle="616 321 100 16"
               uiType="uiLabel" componentTabName="tabs" componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="1"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex=""
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="libraryExternalToggleChanged"
             name="libraryExternalToggle" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="30" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="24" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="0" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="1" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="No Effect" componentEffectRadius="132.4"
               componentEffectColour="55ffffff" componentEffectOffsetX="0" componentEffectOffsetY="0"
               componentExcludedFromLabelDisplay="0" componentValueDecimalPlaces="0"
               componentLuaMouseMoved="-- None" componentLuaMouseDown="-- None"
               componentLuaMouseDrag="-- None" componentLuaMouseDoubleClick="-- None"
               uiImageButtonMode="0" uiImageButtonResource="switch-toggle-led-dis"
               componentRectangle="640 348 44 32" resourceImageWidth="80" resourceImageHeight="56"
               resourceImagePaintMode="128" resourceImageOrientation="0" uiImageButtonTextColour="0xff000000"
               uiImageButtonContent="0&#10;1" uiImageButtonTextPosition="none"
               uiImageButtonTextWidth="0" uiImageButtonTextHeight="32" uiButtonTextFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiButtonTextJustification="centred" uiButtonRepeat="0" uiButtonRepeatRate="100"
               componentLayerUid="40828ca4020000001896d00656f25599" uiType="uiImageButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="libraryExternalToggleLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="libraryEditorGroup"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="0"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="ff409fcb" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3"
               uiLabelText="Library / External" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="ff409fcb"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="604 370 120 20" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="0"
             name="bankNumber" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="1" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="modulator-13" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="ff4b0000"
               uiLabelTextColour="ffd12000" uiLabelOutline="1" uiLabelOutlineColour="ff845505"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLCDLabelFont="5"
               uiLCDLabelFontHeight="16" uiLabelText="1 - A" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="ffd12000" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="0"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="presetNumberChanged"
               uiGroupTextColour="ff409fcb" uiSliderValueFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0;3"
               uiType="uiLCDLabel" componentRectangle="202 122 80 18" componentLayerUid="40828ca4020000001896d00656f25599"
               componentBubbleNameJustification="centred" componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleNameColour="0xff000000" componentBubbleValueJustification="centred"
               componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               componentBubbleValueColour="0xff000000" componentBubbleBackgroundGradientType="1"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleRoundAngle="10"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="85" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomName="" modulatorCustomIndexGroup="0" modulatorCustomNameGroup=""
             modulatorVstNameFormat="%n" luaModulatorValueChange="settingsDefault"
             name="settingsDefault-4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="none" componentLabelJustification="centred"
               componentLabelHeight="0" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName=""
               componentMouseCursor="2" componentGroupName="modulator-15" componentGroupped="1"
               componentSnapSize="1" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonContent="False&#10;True"
               uiHyperlinkColour="ff409fcb" uiHyperlinkFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiHyperlinkFitTextToSize="1" uiHyperlinkTextJustification="left"
               uiHyperlinkOpensUrl="1" componentRectangle="272 58 256 19" uiHyperlinkText="http://www.paypal.me/fredericborry"
               uiHyperlinkUrl="https://www.paypal.me/fredericborry" uiType="uiHyperlink"
               componentLayerUid="40828ca4020000001896d00656f25599" componentTabName="tabs"
               componentTabId="4"/>
  </modulator>
  <panelCustomData currentPresetNumber="1" currentLibraryFile="C:\Users\fborry/gm36/factory.gm36"
                   ingoredVersionUpdate="2.2" globalPowerSoak="127" currentExternalFile="C:\Users\fborry/gm36/factory.gm36"
                   ampType="?"/>
</panel>
